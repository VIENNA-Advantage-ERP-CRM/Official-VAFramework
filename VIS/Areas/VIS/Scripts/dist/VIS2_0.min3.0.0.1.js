(()=>{var __webpack_modules__={"./Areas/VIS/Scripts/F20/acontentpane.js":()=>{eval(';\n(function (VIS, $) {\n  //****************************************************//\n  //**             VTabbedPane                       **//\n  //**************************************************//\n\n  /**\r\n   *  multiptab and link tab view manager Pane - Window Tab\r\n   *\r\n   */\n  function ContentPane(aTabbedPane, parentDiv) {\n    this.aTabbedPane = aTabbedPane;\n    var $root = parentDiv;\n    this.tabLIObj = []; //Li element for tabs\n    this.tabItems = []; //tab elements \n    this.tabIds = []; // ids of tab\n    this.tabs = [];\n    this.headerTab = null;\n    this.aNew = null;\n    this.aSave = null;\n    this.aDelete = null;\n    this.aRefresh = null;\n    //tolbar \n    var $ulTabControl = null;\n    var $divTabControl = null;\n    var $divTabNav = null;\n    var $divHeaderNav = null;\n    var $divContent = null;\n    var $ulToolbar = null;\n    var $dynActionList = null;\n    var $actionDiv = null;\n    var $divUlTabNav = null;\n    var self = this;\n    function init() {\n      //navigation and tab control\n      $ulTabControl = $root.find(".vis-ad-w-p-t-c-inc-tc");\n      ; // $("<ul class=\'vis-appsaction-ul vis-apanel-tabcontrol-ul\'>");//tab control\n      $divTabControl = $root.find(".vis-ad-w-p-t-c-inc"); // $("<div class=\'vis-apanel-tabcontrol\'>").append($ulTabControl);\n      $divTabNav = $root.find(".vis-ad-w-p-inc-tabs-oflow").hide(); // $("<div class=\'vis-apanel-tab-oflow\'>").hide();\n      $divHeaderNav = $root.find(".vis-ad-w-p-inc-tabs");\n      $divUlTabNav = $root.find(".vis-ad-w-p-inc-tb");\n      $root.css(\'display\', \'flex\');\n      $divContent = $root.find(".vis-ad-w-p-inc-content");\n      $ulToolbar = $root.find(".vis-ad-w-p-inc-tb-lc");\n      $dynActionList = $root.find(".vis-ad-w-p-inc-tab-a-list");\n      $actionDiv = $root.find(".vis-ad-w-p-inc-tab-ac-buttons");\n    }\n    init();\n    function display(hide) {\n      if (hide) $root.css(\'display\', \'none\');else $root.css(\'display\', \'flex\');\n    }\n    //Action Perormed\n    var onAction = function (action) {\n      self.actionPerformed(action);\n    };\n    $divTabNav.on("click", function (e) {\n      e.stopPropagation();\n      var dir = $(e.target).data(\'dir\');\n      if (!dir) return;\n      var dWidth = $divTabControl.width();\n      var ulWidth = $ulTabControl.width();\n      var cPos = $divTabControl.scrollLeft();\n      var offSet = Math.ceil(dWidth / 2);\n      //console.log(dWidth + "--" + ulWidth + \'---\' + cPos);\n      var s = 0;\n      if (dir == \'r\') {\n        if (cPos + offSet >= ulWidth - offSet) return;\n        var ms = ulWidth - dWidth;\n        s = cPos + offSet;\n        $divTabControl.animate({\n          scrollLeft: s > ms ? ms : s\n        }, 1000);\n      } else if (dir == \'b\') {\n        if (cPos == 0) return;\n        s = cPos - offSet;\n        $divTabControl.animate({\n          scrollLeft: s < 0 ? 0 : s\n        }, 1000);\n        //$divTabControl.scrollLeft(cPos - offSet);\n      }\n      if (dir == \'rl\') {\n        if (cPos + offSet >= ulWidth - offSet) return;\n        var ms = ulWidth - dWidth;\n        //s = cPos + offSet;\n        $divTabControl.animate({\n          scrollLeft: ms\n        }, 500);\n      } else if (dir == \'bf\') {\n        if (cPos == 0) return;\n        s = cPos - offSet;\n        $divTabControl.animate({\n          scrollLeft: 0\n        }, 500);\n        //$divTabControl.scrollLeft(cPos - offSet);\n      }\n    });\n\n    /* set sub tabs for coposite view */\n    this.setTabControl = function (tab) {\n      this.resetListners();\n      this.headerTab = tab;\n      $ulTabControl.empty();\n      if (tab.ChildTabsItems.length == 0) {\n        display(true);\n        return;\n      }\n      display();\n      for (var i = 0; i < tab.ChildTabsItems.length; i++) {\n        var childTab = tab.ChildTabsItems[i];\n        var li = childTab.getListItm();\n        this.tabLIObj[childTab.action] = li;\n        $ulTabControl.append(li);\n        childTab.setEnabled(false);\n        childTab.onAction = null;\n        if (tab.TabLevel + 1 >= tab.ChildTabs[i].getTabLevel()) {\n          childTab.onAction = this.onTabChange;\n          childTab.setEnabled(true);\n        }\n\n        //Tab elements\n        tab.ChildEle[i].addSubTabDataStatusListner(this);\n        this.tabItems.push(tab.ChildEle[i]);\n        this.tabIds.push(childTab.getAction());\n        this.tabs.push(childTab);\n        if (i == 0) {\n          this.selectedTab = li;\n          // this.onTabChange(childTab.getAction());\n        }\n      }\n\n      //  this.setTabNavigation();\n    };\n    this.setSelectedTab = function (id) {\n      if (this.selectedTab) this.selectedTab.removeClass("vis-apanel-tab-selected");\n      this.selectedTab = this.tabLIObj[id];\n      this.selectedTab.addClass("vis-apanel-tab-selected");\n    };\n    this.onTabChange = function (action) {\n      self.tabActionPerformed(action);\n      //alert("sub tab change" + action);\n    };\n    this.getLayout = function () {\n      return $divContent;\n    };\n    this.setTabNavigation = function () {\n      if ($ulTabControl.width() > $divTabControl.width()) {\n        if (!VIS.Application.isMobile) $divTabNav.show();\n      } else {\n        $divTabNav.hide();\n      }\n    };\n    this.createToolBar = function () {\n      var pnl = this.aTabbedPane.getAPanel();\n      //1. toolbar action\n      this.aRefresh = pnl.addActions(pnl.ACTION_NAME_REFRESH, null, true, true, false, onAction, null, "Shct_CV_Refresh", "Refresh");\n      this.aDelete = pnl.addActions(pnl.ACTION_NAME_DELETE, null, true, true, false, onAction, null, "Shct_CV_Delete", "Delete");\n      this.aNew = pnl.addActions(pnl.ACTION_NAME_NEW, null, true, true, false, onAction, null, "Shct_CV_New", "New");\n      this.aIgnore = pnl.addActions("UNO", null, true, true, false, onAction, null, "Shct_CV_Ignore", "Ignore");\n      this.aSave = pnl.addActions("SAR", null, true, true, false, onAction, null, "Shct_CV_Save", "Save");\n      //this.aFind = pnl.addActions("Find", null, true, true, false, onAction, null, "Shct_Find");\n      //this.aInfo = pnl.addActions("Info", null, true, true, false, onAction, null, "Shct_Info");\n      //this.aReport = pnl.addActions("Report", null, true, true, false, onAction, null, "Shct_Report");\n      //this.aPrint = pnl.addActions("Print", null, true, true, false, onAction, null, "Shct_Print");\n      this.aMulti = pnl.addActions("Multi", null, false, true, true, onAction, true, "Shct_CV_MultiRow");\n      $ulToolbar.append(this.aIgnore.getListItm());\n      $ulToolbar.append(this.aNew.getListItm());\n      $ulToolbar.append(this.aDelete.getListItm());\n      $ulToolbar.append(this.aSave.getListItm());\n      $ulToolbar.append(this.aRefresh.getListItm());\n      $ulToolbar.append(this.aMulti.getListItm());\n\n      //$ulToobar.append(this.aReport.getListItm());\n      //$ulToobar.append(this.aPrint.getListItm());\n      this.toolbarCreated = true;\n    };\n    this.createToolBar();\n    this.finishLayout = function () {\n      if (!VIS.Application.isMobile) $divTabControl.addClass("vis-ad-w-p-t-c-mob");\n    };\n    this.setDynamicActions = function (gc, remove) {\n      $actionDiv.css(\'display\', \'none\');\n      if (gc == null) return;\n      if (remove) {\n        gc.detachDynamicAction();\n      } else {\n        var index = 0;\n        var actions = [];\n        if (gc.leftPaneLinkItems.length > 0) {\n          actions = this.curGC.leftPaneLinkItems;\n          for (index = 0; index < actions.length; index++) {\n            $dynActionList.append(actions[index].getControl());\n          }\n        }\n        index = 0;\n        if (gc.rightPaneLinkItems.length > 0) {\n          actions = this.curGC.rightPaneLinkItems;\n          for (index = 0; index < actions.length; index++) {\n            $dynActionList.append(actions[index].getControl());\n          }\n        }\n        if (gc.leftPaneLinkItems.length > 0 || gc.rightPaneLinkItems.length > 0) {\n          $actionDiv.css(\'display\', \'flex\');\n          $actionDiv.find(\'span\').show();\n        }\n        actions = null;\n      }\n    };\n    this.disposeComponents = function () {\n      self = null;\n      $root.remove();\n      $ulToobar = $ulNav = $root = $ulTabControl = $divTabControl = $divTabNav = $divHeaderNav = null;\n      $dynActionList = $actionDiv = null;\n    };\n  }\n  ;\n\n  /**\r\n   *  tab change event \r\n   * @param {string} action name\r\n   */\n\n  /**\r\n   * remove all listner and do cleanup \r\n   * */\n  ContentPane.prototype.resetListners = function () {\n    for (var i = 0; i < this.tabItems.length; i++) {\n      this.tabItems[i].removeSubTabDataStatusListner();\n      //this.tabItems[i].setVisible(false);\n    }\n    this.tabLIObj = [];\n    this.tabItems = []; //tab elements \n    this.tabIds = [];\n    this.tabs = [];\n    this.setDynamicActions(this.curGC, true);\n    if (this.curST) this.curST.setVisible(false);\n    if (this.curGC) this.curGC.setVisible(false);\n    this.curST = this.curGC = null;\n    this.curTabIndex = -1;\n  };\n  ContentPane.prototype.getTabElement = function (action) {\n    this.newTabIndex = this.tabIds.indexOf(action);\n    return this.tabItems[this.newTabIndex];\n  };\n  ContentPane.prototype.getIsZoomToHeader = function (action) {\n    if (this.curTabIndex == this.tabIds.indexOf(action)) {\n      return true;\n    }\n    return false;\n  };\n  ContentPane.prototype.onParentTabChange = function (action) {\n    action = action.replace(\'st_\', \'\');\n    this.aTabbedPane.getAPanel().onTabChange(action);\n  };\n\n  /**\r\n   *\ttab change\r\n   *  @param action tab item\'s id\r\n   */\n  ContentPane.prototype.tabActionPerformed = function (action) {\n    var back = false;\n    var isAPanelTab = false;\n    var tabEle = this.getTabElement(action);\n    var curEle = this.curST || this.curGC;\n    var oldGC = null;\n\n    //// END\n\n    var selfPanel = this;\n    //  Workbench Tab Change\n\n    ////  Just a Tab Change\n    ////log.Info("Tab=" + tp);\n    //this.curWinTab = this.vTabbedPane;\n    //var tpIndex = this.curWinTab.getSelectedIndex();\n    back = this.newTabIndex < this.curTabIndex;\n    var gc = null,\n      st = null;\n    if (tabEle instanceof VIS.VSortTab) {\n      st = tabEle;\n      isAPanelTab = true;\n    } else {\n      gc = tabEle;\n    }\n    var canExecute = true;\n    if (this.curGC != null) {\n      //  has anything changed?\n      if (this.curTab.needSave(true, false)) {\n        //  do we have real change\n        if (this.curTab.needSave(true, true)) {\n          //\tAutomatic Save\n          if (VIS.Env.getCtx().isAutoCommit(this.curWindowNo)) {\n            if (!this.curTab.dataSave(true)) {\n              //  there is a problem, so we go back\t\n              //this.vTabbedPane.restoreTabChange();//m_curWinTab.setSelectedIndex(m_curTabIndex);\n              this.setBusy(false, true);\n              return false;\n            }\n          } else {\n            canExecute = false;\n            VIS.ADialog.confirm("SaveChanges?", true, this.curTab.getCommitWarning(), \'Confirm\', function (results) {\n              if (results) {\n                if (!selfPanel.curTab.dataSave(true)) {\n                  //  there is a problem, so we go back\n\n                  selfPanel.setBusy(false, true);\n                  return false;\n                }\n              } else {\n                selfPanel.curTab.dataIgnore();\n              }\n              curEle = selfPanel.curGC;\n              oldGC = selfPanel.curGC;\n              selfPanel.curGC = null;\n              selfPanel.tabActionPerformedCallback(action, back, isAPanelTab, tabEle, curEle, oldGC, gc, st);\n            });\n          }\n        } else\n          //  new record, but nothing changed\n          selfPanel.curTab.dataIgnore();\n      }\n      if (canExecute) {\n        curEle = this.curGC;\n        oldGC = this.curGC;\n        this.curGC = null;\n      }\n    }\n    if (canExecute) {\n      if (this.curST != null) {\n        this.curST.saveData();\n        //this.curST.unRegisterAPanel();\n        curEle = this.curST;\n        this.curST = null;\n      }\n\n      //if (!isAPanelTab)\n      //    this.curGC = gc;\n    }\n    if (canExecute) {\n      selfPanel.tabActionPerformedCallback(action, back, isAPanelTab, tabEle, curEle, oldGC, gc, st);\n    }\n    return true;\n  };\n  ContentPane.prototype.sizeChanged = function () {\n    this.setTabNavigation();\n    return;\n  };\n  ContentPane.prototype.refresh = function () {\n    if (this.curGC) {\n      this.curGC.vTable.resize();\n    }\n    return;\n  };\n  ContentPane.prototype.tabActionPerformedCallback = function (action, back, isAPanelTab, tabEle, curEle, oldGC, gc, st) {\n    this.setDynamicActions(oldGC, true); //remove action\n\n    if (this.getIsZoomToHeader(action)) {\n      console.log("zoom to parent tab");\n      this.onParentTabChange(action);\n      return false;\n    }\n    this.curTabIndex = this.newTabIndex;\n    if (isAPanelTab) {\n      this.curST = st;\n      //st.registerAPanel(this);\n      st.loadData();\n    } else {\n      this.curGC = gc;\n      gc.activate(oldGC);\n      this.setDynamicActions(this.curGC);\n      this.curTab = gc.getMTab();\n      //this.setDynamicActions();\n      //PopulateSerachCombo(false);\n      /*\tRefresh only current row when tab is current(parent)*/\n\n      if (!gc.isZoomAction && this.curTab.getTabLevel() > 0) {\n        var queryy = new VIS.Query();\n        this.curTab.query = queryy;\n      }\n      if (back && this.curTab.getIsCurrent()) {\n        gc.dataRefresh();\n      } else\n        //\tRequery and bind\n        {\n          this.reQuery();\n        }\n\n      //if (this.curGC.onDemandTree) {\n      //    this.aShowSummaryLevel.show();\n      //}\n      //else {\n      //    this.aShowSummaryLevel.hide();\n      //}\n    }\n\n    //\tOrder Tab\n    if (isAPanelTab) {\n      this.aMulti.setPressed(false);\n      this.aMulti.setEnabled(false);\n      this.aNew.setEnabled(false);\n      this.aDelete.setEnabled(false);\n      this.aRefresh.setEnabled(false);\n    } else\n      //\tGrid Tab\n      {\n        this.aMulti.setEnabled(true);\n        this.aMulti.setPressed(this.curGC.getIsSingleRow() || this.curGC.getIsMapRow());\n        this.aRefresh.setEnabled(true);\n      }\n    if (curEle) {\n      curEle.setVisible(false);\n      curEle.getRoot().detach();\n    }\n    this.getLayout().append(tabEle.getRoot());\n    tabEle.setVisible(true);\n    this.setSelectedTab(action); //set Seleted tab\n\n    this.setTabNavigation();\n    curEle = tabEle = null;\n\n    //if (this.curTab.getAD_Process_ID() == 0) {\n    //    this.aPrint.setEnabled(false);\n    //}\n    //else this.aPrint.setEnabled(true);\n\n    //if (this.curTab.getIsMapView()) {\n    //    this.aMap.show();\n    //}\n    //else {\n    //    this.aMap.hide();\n    //}\n  };\n  ContentPane.prototype.reQuery = function () {\n    if (this.curTabIndex < 0 && this.tabs.length > 0) {\n      this.onTabChange(this.tabs[0].getAction());\n      return;\n    }\n    if (this.curGC) {\n      this.curTab.getTableModel().setCurrentPage(1);\n      if (!this.curGC.onDemandTree || this.curGC.isZoomAction) {\n        this.curTab.searchText = "";\n        this.curGC.query(this.curTab.getOnlyCurrentDays(), 0, false); //\tupdated\n      }\n    }\n  };\n\n  /**\r\n  *\tData Status Listener (row change)\t\t\t^ | v\r\n  *  @param e event \r\n  */\n  ContentPane.prototype.dataStatusChanged = function (e) {\n    if (!e) {\n      if (this.curGC) {\n        if (this.curTab.needSave(true, false)) {\n          //  do we have real change\n          if (this.curTab.needSave(true, true)) {\n            this.curGC.dataIgnore();\n          }\n        }\n        this.curGC.activateTree();\n      }\n      this.reQuery();\n    } else {\n      $ths = this;\n\n      //  Confirm Error\n      if (e.getIsError() && !e.getIsConfirmed()) {\n        // VIS.ADialog.error(e.getAD_Message(), true, e.getInfo());\n\n        VIS.ADialogCallback.error(e.getAD_Message(), e.getInfo(), null, function () {\n          var lf = $ths.curTab.getLastFocus();\n          if (lf) {\n            lf.focus();\n            $ths.curTab.setLastFocus(null);\n          }\n        });\n        e.setConfirmed(true); //  show just once - if MTable.setCurrentRow is involved the status event is re-issued\n        this.errorDisplayed = true;\n      }\n      //  Confirm Warning\n      else if (e.getIsWarning() && !e.getIsConfirmed()) {\n        VIS.ADialog.warn(e.getAD_Message(), true, e.getInfo());\n        e.setConfirmed(true); //  show just once - if MTable.setCurrentRow is involved the status event is re-issued\n      }\n\n      //\tupdate Change\n      var changed = e.getIsChanged() || e.getIsInserting();\n      var readOnly = this.curTab.getIsReadOnly();\n      var insertRecord = !readOnly;\n      if (insertRecord) insertRecord = this.curTab.getIsInsertRecord();\n      this.aNew.setEnabled(!changed && insertRecord);\n      this.aRefresh.setEnabled(!changed);\n      this.aDelete.setEnabled(!changed && !readOnly && e.getCurrentRow() > -1);\n      //\n      if (readOnly && this.curTab.getIsAlwaysUpdateField()) readOnly = false;\n      this.aIgnore.setEnabled(changed && !readOnly);\n      this.aSave.setEnabled(changed && !readOnly);\n\n      //\n      //\tNo Rows\n      if (e.getTotalRows() == 0 && insertRecord) {\n        this.aNew.setEnabled(true);\n        this.aDelete.setEnabled(false);\n      }\n\n      //\tSingle-Multi\n      this.aMulti.setPressed(this.curGC.getIsSingleRow() || this.curGC.getIsMapRow());\n      if (this.curTab.getRecord_ID() < 1) {\n        // this.aIgnore.setEnabled(false);\n        //this.aSave.setEnabled(false);\n        this.aDelete.setEnabled(false);\n        // this.aNew.setEnabled(false);\n      } else {}\n\n      //\tTransaction info\n\n      //if (this.curWinTab == this.vTabbedPane) {\n      this.evaluate(null);\n      //}\n\n      if (!e.getIsInserting()) {\n        this.aTabbedPane.getAPanel().setStatusInfo();\n      }\n\n      /******End Header Panel******/\n    }\n  }; //\n\n  ContentPane.prototype.actionPerformed = function (action) {\n    if (this.getIsUILocked()) return;\n    //\tDo Screenrt w/o busy\n\n    var selfPan = this;\n    setTimeout(function () {\n      //  Command Buttons\n\n      if (action.source instanceof VIS.Controls.VButton) {\n        if (!selfPan.actionButton(action.source)) {\n          selfPan.setBusy(false, true);\n        }\n        return;\n      }\n      selfPan.actionPerformedCallback(selfPan, action);\n    });\n    this.setBusy(true);\n  };\n  ContentPane.prototype.actionPerformedCallback = function (tis, action) {\n    if (tis.aMulti.getAction() === action) {\n      tis.aMulti.setPressed(!tis.curGC.getIsSingleRow());\n      tis.curGC.switchRowPresentation();\n    } else if (tis.aRefresh.getAction() === action) {\n      tis.cmd_save(false);\n      tis.curGC.dataRefreshAll();\n    } else if (tis.aIgnore.getAction() === action) {\n      tis.curGC.dataIgnore();\n    } else if (tis.aSave.getAction() === action) {\n      tis.cmd_save(true);\n    } else if (tis.aNew.getAction() === action) {\n      if (this.curGC.aPanel.curTab.needSave()) {\n        VIS.ADialog.warn(\'VIS_SaveParentFirst\');\n      } else {\n        if (!tis.curTab.getIsInsertRecord()) {\n          return;\n        }\n        tis.curGC.dataNew(false);\n      }\n    } else if (tis.aDelete.getAction() === action) {\n      tis.cmd_delete();\n    }\n    tis.setBusy(false);\n    tis = null;\n  };\n  ContentPane.prototype.cmd_save = function (manual, callback) {\n    //cmd_save(false);\n    //this.curGC.dataRefreshAll();\n    if (this.curST != null) manual = false;\n    this.errorDisplayed = false;\n    //this.curGC.stopEditor(true);\n\n    if (this.curST != null) {\n      this.curST.saveData();\n      this.aSave.setEnabled(false); //\tset explicitly\n      return;\n    }\n    var needExecute = true;\n    if (this.curTab.getCommitWarning().length > 0 && this.curTab.needSave(true, false)) {\n      needExecute = false;\n      var selfPanel = this;\n      VIS.ADialog.confirm("SaveChanges?", true, this.curTab.getCommitWarning(), "Confirm", function (result) {\n        if (!result) {\n          return;\n        }\n        var retValue = selfPanel.curGC.dataSave(manual);\n        if (manual && !retValue && !selfPanel.errorDisplayed) {}\n        // this.curGC.refreshTabPanelData(this.curTab.getRecord_ID());\n        if (manual) selfPanel.curGC.dynamicDisplay(-1);\n      });\n      if (callback) {\n        callback(retValue);\n      }\n    }\n    if (needExecute) {\n      var retValue = this.curGC.dataSave(manual);\n      if (manual && !retValue && !this.errorDisplayed) {}\n      if (manual) this.curGC.dynamicDisplay(-1);\n      if (callback) {\n        callback(retValue);\n      }\n      //this.curGC.refreshTabPanelData(this.curTab.getRecord_ID());\n      return retValue;\n    }\n  }; //Save\n\n  ContentPane.prototype.cmd_delete = function () {\n    if (this.curTab.getIsReadOnly()) return;\n    //var keyID = this.curTab.getRecord_ID();\n    //prevent deletion if client access for Read Write does not exist for this Role.\n\n    var ids = this.curGC.canDeleteRecords();\n\n    // if (!VIS.MRole.getDefault().getIsClientAccess(this.curTab.getAD_Client_ID(), true))\n    if (ids.length > 0) {\n      VIS.ADialog.error("CannotDelete", true, " [ " + ids.join(",") + "]");\n      return;\n    }\n\n    //if (VIS.ADialog.ask("DeleteRecord?")) {\n    //    this.curGC.dataDelete();\n    //}\n\n    var thisPanel = this;\n    VIS.ADialog.confirm("DeleteRecord?", true, "", "Confirm", function (result) {\n      if (result) {\n        thisPanel.curGC.dataDeleteAsync();\n      }\n      thisPanel = null;\n    });\n  };\n  ContentPane.prototype.actionButton = function (btn) {\n    this.aTabbedPane.getAPanel().actionButton(btn, this);\n  };\n\n  // Added By Mandeep --30-Mar-2023\n  ContentPane.prototype.keyDown = function (evt) {\n    if (evt.altKey && evt.ctrlKey && this.curGC) {\n      var en = this.aNew.getIsEnabled();\n      switch (evt.keyCode) {\n        case 78:\n          //N for ADD\n          if (en) this.actionPerformed(this.aNew.getAction());\n          break;\n        case 68:\n          // D for Delete\n          if (en) this.actionPerformed(this.aDelete.getAction());\n          break;\n        case 81:\n          // Q for Refresh\n          if (en) this.actionPerformed(this.aRefresh.getAction());\n          break;\n        case 83:\n          //S for save                   \n          this.actionPerformed(this.aSave.getAction());\n          break;\n        case 84:\n          // Arrow Down for next record\n          this.actionPerformed(this.aMulti.getAction());\n          break;\n        case 90:\n          // Z for undo\n          if (!en) this.actionPerformed(this.aIgnore.getAction());\n          break;\n      }\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n  };\n\n  /**\r\n   * evaluate other tab logics\r\n   * @param {any} e\r\n   */\n  ContentPane.prototype.evaluate = function (e) {\n    // var tl = this.headerTab.TabLevel;\n    for (var i = 0; i < this.tabItems.length; i++) {\n      var c = this.tabItems[i];\n      if (c instanceof VIS.GridController) {\n        var gc = c;\n        var display = this.headerTab.TabLevel + 1 >= this.headerTab.ChildTabs[i].getTabLevel() && gc.getIsDisplayed();\n        this.tabs[i].setEnabled(display);\n      }\n    }\n  };\n  ContentPane.prototype.setBusy = function (isBusy) {\n    this.aTabbedPane.getAPanel().setBusy(isBusy);\n  };\n  ContentPane.prototype.getIsUILocked = function () {\n    this.aTabbedPane.getAPanel().getIsUILocked();\n  };\n  ContentPane.prototype.dispose = function () {\n    this.disposeComponents();\n    this.aNew.dispose();\n    this.aSave.dispose();\n    this.aDelete.dispose();\n    this.aRefresh.dispose();\n    this.aPanel = null;\n  };\n  VIS.ContentPane = ContentPane;\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/acontentpane.js?')},"./Areas/VIS/Scripts/F20/afilterpanel.js":()=>{eval(';\n(function (VIS, $) {\n  // var tmpfp = document.querySelector(\'#vis-ad-fptmp\').content;// $("#vis-ad-windowtmp");\n\n  function getTemplate(winNo) {\n    var str = \' <div class="vis-fp-bodycontent vis-formouterwrpdiv">                                                 \' + \'     <div class="vis-fp-viwall" >                                                  \' + \'         <span>\' + VIS.Msg.getMsg("ViewMore") + \'</span>                               \' + \'     </div>                                                                       \' + \'  <div class="vis-fp-datawrap"> \' + \'     <div class="vis-fp-static-ctrlwrp">                                          \' + \' <div class="vis-fp-static-ctrlinnerwrp"></div>    \' + \'     </div>                                                                       \' + \'     <div class="vis-fp-custcolumns" id="accordion_\' + winNo + \'"">                \' + \'         <div class="card">                                                       \' + \'             <div class="card-header" style="cursor:pointer" data-toggle="collapse" href="#collapseOne_\' + winNo + \'">                                            \' + \'                 <span>\' + VIS.Msg.getMsg("CustomCondition") + \'</span>                                  \' + \'                 <a class="card-link" > \' + \'                     <i class="vis vis-arrow-up"></i>                             \' + \'                 </a>                                                             \' + \'             </div>                                                               \' + \'             <div id="collapseOne_\' + winNo + \'"" class="collapse" data-parent="#accordion_\' + winNo + \'" >\' + \'                 <div class="card-body">                                          \' + \'                     <div class="input-group vis-input-wrap">                     \' + \'                         <div class="vis-control-wrap">                           \' + \'                             <select class="vis-fp-cols">                         \' + \'                             </select>                                            \' + \'                             <label class="vis-fp-lblcols">\' + VIS.Msg.getMsg("Column") + \'</label>         \' + \'                         </div>                                                   \' + \'                     </div>                                                       \' + \'                     <div class="input-group vis-input-wrap">                     \' + \'                         <div class="vis-control-wrap">                           \' + \'                             <select class="vis-fp-op">                           \' + \'                             </select>                                            \' + \'                             <label class="vis-fp-lblop">\' + VIS.Msg.getMsg("Operator") + \'</label>         \' + \'                         </div>                                                   \' + \'                     </div>                                                       \' + \'                     <div class="vis-fp-valueone">                                \' + \'                     </div>                                                       \' + \'                     <div class="vis-fp-valuetwo">                                \' + \'                     </div>                                                       \' + \'                     <div class="vis-fp-valuethree">                              \' + \'                     </div>                                                       \' + \'                     <div class="vis-fp-cc-addbtnwrp">                            \' + \'                         <span class="vis-fp-cc-addbutton">\' + VIS.Msg.getMsg("ADD") + \'</span>             \' + \'                     </div>                                                       \' + \'                 </div>                                                           \' + \'             </div>                                                               \' + \'         </div>                                                                   \' + \'         <div class="vis-fp-custcoltagswrp">                                      \' + \'             <div class="vis-fp-custcoltag">                                      \' + \'             </div>                                                               \' + \'         </div>\x3c!-- vis-fp-custcoltagswrp --\x3e                                     \' + \'     </div>  </div>                                                                     \' + \' </div>\';\n    return str;\n  }\n  ;\n\n  //AdvanceSearch\n  function FilterPanel(windowNo, gc) {\n    var tmp = getTemplate(windowNo);\n    var control1, control2;\n    var dsAdvanceData = null;\n    var bodyDiv = $(tmp);\n    var divCtrlWrap = bodyDiv.find(".vis-fp-datawrap");\n    var divStatic = bodyDiv.find(".vis-fp-static-ctrlwrp");\n    var divStaticInner = bodyDiv.find(".vis-fp-static-ctrlinnerwrp");\n    var btnViewAll = bodyDiv.find(".vis-fp-viwall");\n    var spnViewAll = $(btnViewAll.find(\'span\')[0]);\n    var divDynamic = bodyDiv.find(".vis-fp-custcolumns");\n    var cmbColumns = divDynamic.find(\'.vis-fp-cols\');\n    var cmbOp = divDynamic.find(\'.vis-fp-op\');\n    var drpDynamicOp = divDynamic.find("#drpDynamicOp_" + windowNo);\n    var btnAdd = divDynamic.find(\'.vis-fp-cc-addbtnwrp\');\n    var divValue1 = divDynamic.find(\'.vis-fp-valueone\');\n    var divValue2 = divDynamic.find(\'.vis-fp-valuetwo\');\n    var divDynFilters = divDynamic.find(\'.vis-fp-custcoltag\');\n    spnViewAll.text(VIS.Msg.getMsg("ViewMore"));\n    this.curGC = gc;\n    this.winNo = windowNo;\n    this.selectionfields = null;\n    this.curTabfields = null;\n    this.curTab = null;\n    this.listOfFilterQueries = [];\n    this.ctrlObjects = {};\n    this.getRoot = function () {\n      return bodyDiv;\n    };\n    this.setLayout = function () {\n      if (this.selectionfields && this.selectionfields.length > 0) {\n        for (var i = 0; i < this.selectionfields.length; i++) {\n          var crt;\n          var label;\n          var fieldorg = this.selectionfields[i];\n          //if (!fieldorg.getIsDisplayed())\n          //    continue;\n\n          var field = {};\n          if (VIS.DisplayType.IsLookup(fieldorg.getDisplayType()) || VIS.DisplayType.ID == fieldorg.getDisplayType()) {\n            field = jQuery.extend(true, {}, fieldorg);\n            field.lookup = jQuery.extend(true, {}, fieldorg.lookup);\n            if (field.lookup && field.lookup.initialize) {\n              field.lookup.initialize();\n            } else continue;\n          } else {\n            field = fieldorg;\n          }\n          this.selectionfields[i] = field;\n          if (field.getIsKey()) {\n            crt = new VIS.Controls.VNumTextBox(field.getColumnName(), false, false, true, field.getDisplayLength(), field.getFieldLength(), field.getColumnName());\n          } else {\n            crt = VIS.VControlFactory.getControl(null, field, true, true, false);\n          }\n          crt.setReadOnly(false);\n          crt.setMandatory(false);\n          this.ctrlObjects[field.getColumnName()] = crt;\n          var inputWrapGroup = $(\'<div class="vis-fp-inputgroupseprtr" data-ColumnName="\' + crt.getName() + \'" data-cid="\' + crt.getName() + \'_\' + this.curTab.getAD_Tab_ID() + \'"></div>\');\n          var inputWrap = $(\'<div class="vis-control-wrap">\');\n          var grp = $(\'<div class="input-group vis-input-wrap">\');\n          if (field.getDisplayType() == VIS.DisplayType.YesNo) {\n            var htm = [];\n            htm.push(\'<div class="vis-fp-lst-searchrcrds">\');\n            htm.push(\'<div class="vis-fp-inputspan">\');\n            htm.push(\'<div class="vis-fp-istagwrap"><input class="vis-fp-chboxInput vis-fp-inputvalueforupdate" type="checkbox" data-column="\' + crt.getName() + \'" data-keyval="\' + crt.getName() + \'_Y" data-id="Y"\');\n            htm.push(\'><span data-id="Y">\' + VIS.Msg.getMsg("Yes") + \'</span> </div>\');\n            htm.push(\'</div>\');\n            htm.push(\'<div class="vis-fp-inputspan">\');\n            htm.push(\'<div class="vis-fp-istagwrap"><input class="vis-fp-chboxInput vis-fp-inputvalueforupdate" type="checkbox" data-column="\' + crt.getName() + \'" data-keyval="\' + crt.getName() + \'_N" data-id="N"\');\n            htm.push(\'><span data-id="N">\' + VIS.Msg.getMsg("No") + \'</span> </div>\');\n            htm.push(\'</div>\');\n            htm.push(\'</div>\');\n            inputWrap.append(\'<label>\' + field.getHeader() + \'</label>\');\n            grp.append(inputWrap);\n            grp.append(htm.join(\'\'));\n          } else {\n            label = VIS.VControlFactory.getLabel(field); //get label\n            crt.addVetoableChangeListener(this);\n            inputWrap.append(crt.getControl());\n            if (label) {\n              label.getControl().find(\'sup\').hide();\n              if (label) inputWrap.append(label.getControl());\n            }\n            grp.append(inputWrap);\n          }\n          if (crt && crt.getBtnCount() > 1) {\n            var btn = crt.getBtn(0);\n            if (btn) {\n              var $divInputGroupAppend = $(\'<div class="input-group-append">\');\n              $divInputGroupAppend.append(btn);\n              grp.append($divInputGroupAppend);\n            }\n          }\n          inputWrapGroup.append(grp);\n          divStaticInner.append(inputWrapGroup);\n          this.getFilterOption(field);\n        }\n      }\n    };\n    function prepareWhereClause(context) {\n      var finalWhereClause = \'\';\n      var listOfDiv = bodyDiv.find(\'.vis-fp-inputgroupseprtr\');\n      if (listOfDiv && listOfDiv.length > 0) {\n        //allcontrols\n        for (var i = 0; i < listOfDiv.length; i++) {\n          var selectedDiv = $(listOfDiv[i]);\n          var listOfSelectedIDs = selectedDiv.find(\'.vis-fp-inputvalueforupdate\');\n          var col = selectedDiv.data(\'columnname\');\n          if (listOfSelectedIDs && listOfSelectedIDs.length > 0) {\n            //if (finalWhereClause.length > 2) {\n            //    finalWhereClause += \' AND \';      //Append and in main where\n            //}\n\n            var whereClause = \'\';\n            for (var j = 0; j < listOfSelectedIDs.length; j++) {\n              var inputType = $(listOfSelectedIDs[j]);\n              if (inputType[0].type == \'checkbox\' && !inputType.is(":checked")) {\n                continue;\n              }\n              var pasedVal = context.parseWhereCondition(col, VIS.Query.prototype.EQUAL, inputType.data(\'id\'), null);\n              if (whereClause != \'\') {\n                whereClause += " OR " + pasedVal;\n              } else {\n                whereClause += "(" + pasedVal;\n              }\n            }\n            if (whereClause != \'\') {\n              whereClause += ")";\n              if (finalWhereClause != "") finalWhereClause += " AND " + whereClause;else finalWhereClause += whereClause;\n            }\n            var found = false;\n            for (var k = 0; k < context.listOfFilterQueries.length; k++) {\n              if (context.listOfFilterQueries[k].columnName == col) {\n                found = true;\n                if (whereClause != \'\') context.listOfFilterQueries[k].whereClause = whereClause;else context.listOfFilterQueries.splice(k, 1);\n              }\n            }\n            if (!found && whereClause != \'\') context.listOfFilterQueries.push({\n              \'columnName\': col,\n              \'whereClause\': whereClause\n            });\n          } else {\n            //delete consiftion of exist\n            for (var k = 0; k < context.listOfFilterQueries.length; k++) {\n              if (context.listOfFilterQueries[k].columnName == col) {\n                context.listOfFilterQueries.splice(k, 1);\n              }\n            }\n          }\n        }\n      }\n      var dynFilter = self.getDynamicFilter();\n      if (dynFilter != \'\') {\n        if (finalWhereClause != \'\') finalWhereClause += \' AND \' + dynFilter;else finalWhereClause = dynFilter;\n      }\n      return finalWhereClause;\n    }\n    ;\n    this.fireValChanged = function (colName) {\n      // if (ignoreTarget || $target.hasClass(\'vis-fp-inputvalueforupdate\')) {\n      // this.refreshAll(colName, prepareWhereClause(this));\n      this.refreshAll(colName);\n    };\n    this.vetoablechange = function (evt) {\n      //data-cid="\' + crt.getName() + \'_\' + this.curTab.getAD_Tab_ID()\n      var wrapper = bodyDiv.find(\'[data-cid="\' + evt.propertyName + \'_\' + this.curTab.getAD_Tab_ID() + \'"]\');\n      //wrapper.append(\'<span >\' + evt.newValue + \'</span>\');\n      var field = $.grep(this.selectionfields, function (field, index) {\n        if (field.getColumnName() == evt.propertyName) return field;\n      });\n      var displayVal;\n      if (field[0].lookup && field[0].lookup.getDisplay) displayVal = field[0].lookup.getDisplay(evt.newValue);else displayVal = evt.newValue;\n      if (this.ctrlObjects[evt.propertyName]) this.ctrlObjects[evt.propertyName].setValue(evt.newValue);\n      var hue = Math.floor(Math.random() * 360);\n      var v = Math.floor(Math.random() * 16) + 85;\n      var pastel = \'hsl(\' + hue + \', 100%, \' + v + \'%)\';\n      var spann = $(\'<span data-id="\' + evt.newValue + \'" class="vis-fp-inputvalueforupdate" >\' + displayVal + \'</span>\');\n      var iconCross = $(\'<i data-id="\' + evt.newValue + \'" data-keyval="\' + evt.propertyName + "_" + evt.newValue + \'" class="vis vis-mark"></i></div></div>\');\n      wrapper.append($(\'<div class="vis-fp-currntrcrdswrap">\').append($(\'<div style="background-color:\' + pastel + \'" class="vis-fp-currntrcrds">\').append(spann).append(iconCross)));\n      if (this.ctrlObjects[evt.propertyName]) this.ctrlObjects[evt.propertyName].setValue(null);\n      this.fireValChanged(evt.propertyName);\n    };\n    this.setFilterOptions = function (data, key) {\n      var fields;\n      var selIds = [];\n      var selItems = [];\n      var wrapper = divStatic.find(\'[data-cid="\' + key + \'_\' + this.curTab.getAD_Tab_ID() + \'"]\');\n      if (wrapper && wrapper.length > 0) {\n        fields = wrapper.find(\'.vis-fp-lst-searchrcrds\');\n        var inputs = fields.find(\'input\');\n        if (inputs && inputs.length > 0) {\n          for (var a = 0; a < inputs.length; a++) {\n            var ctr = $(inputs[a]);\n            if (ctr.is(\':checked\')) {\n              selIds.push(ctr.data("id"));\n              ctr.parent().parent().find(\'.vis-fp-spanCount\').text("(0)");\n              selItems.push(ctr.parent().parent());\n            }\n            //else\n            ctr.parent().parent().remove();\n          }\n        }\n      }\n      if (!fields || fields.length == 0) {\n        fields = $(\'<div class="vis-fp-lst-searchrcrds vis-fp-lst-searchrcrdswrp"></div>\');\n        wrapper.append(fields);\n      }\n      for (var i = 0; i < data.length; i++) {\n        var htm = [];\n        var dId = data[i].ID;\n        if (!isNaN(dId)) {\n          dId = parseFloat(dId);\n        }\n        var index = selIds.indexOf(dId);\n        if (index > -1) {\n          selItems[index].find(\'.vis-fp-spanCount\').text("(" + data[i].Count + ")");\n          fields.append(selItems[index]);\n          selItems.splice(index, 1);\n          selIds.splice(index, 1);\n          continue;\n        }\n        if (i < 5) {\n          htm.push(\'<div class="vis-fp-inputspan">\');\n          htm.push(\'<div class="vis-fp-istagwrap"><input class="vis-fp-chboxInput vis-fp-inputvalueforupdate" type="checkbox" data-column="\' + key + \'" data-keyval="\' + key + \'_\' + data[i].ID + \'" data-id="\' + data[i].ID + \'"\');\n          htm.push(\'><span data-id="\' + data[i].ID + \'">\' + data[i].Name + \'</span> </div><span class="vis-fp-spanCount">(\' + data[i].Count + \')</span>\');\n          htm.push(\'</div>\');\n          fields.append(htm.join(\'\'));\n        }\n      }\n      for (i = 0; i < selItems.length; i++) {\n        fields.append(selItems[i]);\n      }\n      selItems = [];\n      selIds = [];\n    };\n    this.hardRefreshFilterPanel = function () {\n      divStatic.find(\'.vis-fp-lst-searchrcrdswrp\').remove();\n      divStatic.find(\'.vis-fp-currntrcrdswrap\').remove();\n      divDynFilters.find(\'.vis-fp-currntrcrds\').remove();\n      dsAdvanceData = [];\n      this.curGC.aPanel.setFilterWhere("");\n      cmbColumns.val(-1);\n      cmbOp.val(-1);\n      setControlNullValue();\n      setControlNullValue(true);\n    };\n    this.getFilterClause = function () {\n      var whereExtended = prepareWhereClause(this);\n      this.curGC.aPanel.setFilterWhere(whereExtended);\n      if (whereExtended.length > 0) {\n        this.curGC.aPanel.setIsFilter(true);\n      } else {\n        this.curGC.aPanel.setIsFilter(false);\n      }\n      this.curGC.aPanel.setFilterFlag(true);\n      return whereExtended;\n    };\n\n    //dynamic\n    this.fillColumns = function (htm) {\n      cmbColumns.append(htm);\n    };\n    var self = this;\n\n    //Events ... \n    divStatic.on("click", "i", function (e) {\n      var tgt = $(this);\n      if (tgt.hasClass("vis-mark")) {\n        tgt.parent().parent().remove();\n        self.fireValChanged(tgt.data(\'keyval\')); // evt.propertyName);\n      }\n    });\n    divDynFilters.on("click", "i", function (e) {\n      var tgt = $(this);\n      if (tgt.hasClass("vis-mark")) {\n        var colName = tgt.parent().data("id");\n        deleteDynRow(colName); // evt.propertyName);\n      }\n    });\n    bodyDiv.on("click", function (e) {\n      $target = $(e.target);\n      if ($target.is(\'input\') && $target.hasClass(\'vis-fp-chboxInput\')) {\n        var currentColumnName = $target.data(\'column\');\n        self.fireValChanged(currentColumnName);\n      }\n    });\n    btnAdd.on("click", function (e) {\n      saveDynFilter();\n    });\n    btnViewAll.on("click", "span", function (e) {\n      divStatic.toggleClass(\'vis-fp-static-ctrlwrp-auto\');\n      if (spnViewAll.text() == VIS.Msg.getMsg("ViewMore")) {\n        spnViewAll.text(VIS.Msg.getMsg(\'ViewLess\'));\n      } else {\n        spnViewAll.text(VIS.Msg.getMsg(\'ViewMore\'));\n      }\n    });\n\n    //dynamic\n    cmbColumns.on(\'change\', function (e) {\n      // if (isBusy) return;\n      //chkDynamic.prop("disabled", true);\n      //chkDynamic.prop("checked", false);\n      // chkDynamic.trigger("change");\n      // divDynamic.hide();\n\n      // set control at value1 position according to the column selected\n      var columnName = cmbColumns.val();\n      var f = self.getTargetMField(columnName);\n      if (columnName && columnName != "-1") {\n        var dsOp = null;\n        // if column name is of ant ID\n        if (columnName.endsWith("_ID") || columnName.endsWith("_Acct") || columnName.endsWith("_ID_1") || columnName.endsWith("_ID_2") || columnName.endsWith("_ID_3")) {\n          // fill dataset with operators of type ID\n          dsOp = self.getOperatorsQuery(VIS.Query.prototype.OPERATORS_ID);\n        } else if (columnName.startsWith("Is")) {\n          // fill dataset with operators of type Yes No\n          dsOp = self.getOperatorsQuery(VIS.Query.prototype.OPERATORS_YN);\n        } else if (VIS.DisplayType.IsDate(f.getDisplayType())) {\n          dsOp = self.getOperatorsQuery(VIS.Query.prototype.OPERATORS);\n        } else {\n          // fill dataset with all operators available\n          dsOp = self.getOperatorsQuery(VIS.Query.prototype.CVOPERATORS);\n        }\n        if (f != null && VIS.DisplayType.IsDate(f.getDisplayType()) && VIS.Query.prototype.BETWEEN.equals(dsOp)) {\n          /*drpDynamicOp.html(self.getOperatorsQuery(VIS.Query.prototype.OPERATORS_DATE_DYNAMIC, true));\r\n          divDynamic.show();\r\n           chkDynamic.prop("disabled", false);\r\n           setDynamicQryControls();\r\n           $root.find(\'.vis-advancedSearchContentArea-down\').css(\'height\', \'calc(100% - 195px)\');\r\n             if (f.getDisplayType() == VIS.DisplayType.DateTime)// If Datetime, then on = operator, show full day checkbox.\r\n           {\r\n             showValue2(false);\r\n           showFullDay(true);\r\n           }*/\n\n          setControl(false, f);\n          setValueEnabled(false);\n          // disable control at value2 position\n          setValue2Enabled(true);\n        }\n\n        /*else if (self.getIsUserColumn(columnName)) {\r\n        drpDynamicOp.html($self.getOperatorsQuery(VIS.Query.prototype.OPERATORS_DYNAMIC_ID, true));\r\n        divDynamic.show();\r\n        $root.find(\'.vis-advancedSearchContentArea-down\').css(\'height\', \'calc(100% - 195px)\');\r\n        chkDynamic.prop("disabled", false);\r\n        setDynamicQryControls(true);\r\n        }*/\n\n        if (f.getDisplayType() != VIS.DisplayType.DateTime)\n          // If Datetime, then on = operator, show full day checkbox.\n          {\n            //  showValue2(true);\n            // showFullDay(false);\n          }\n        cmbOp.html(dsOp);\n        cmbOp[0].SelectedIndex = 0;\n        // get field\n        //var field = getTargetMField(columnName);\n        // set control at value1 position\n        setControl(true, f);\n        // enable the save row button\n        //setEnableButton(btnSave, true);//silverlight comment\n        cmbOp.prop("disabled", false);\n      } else {\n        // showFullDay(false);\n        // showValue2(true);\n      }\n      // enable control at value1 position\n      setValueEnabled(true);\n      // disable control at value2 position\n      setValue2Enabled(false);\n      divValue2.hide();\n    });\n    cmbOp.on(\'change\', function (e) {\n      var columnName = cmbColumns.val();\n      var f = self.getTargetMField(columnName);\n      if (VIS.Query.prototype.BETWEEN.equals(cmbOp.val())) {\n        setControl(false, f);\n        setValue2Enabled(true);\n        divValue2.show();\n      } else {\n        divValue2.hide();\n      }\n    });\n    bodyDiv.on("mouseover", function () {\n      if (divStaticInner.height() > divStatic.parent().height() - 60 && divStaticInner.height() + 15 >= divStatic.height()) {\n        btnViewAll.css(\'visibility\', \'visible\');\n      } else {\n        btnViewAll.css(\'visibility\', \'hidden\');\n      }\n    });\n    bodyDiv.on("mouseout", function () {\n      if (spnViewAll.text() == VIS.Msg.getMsg("ViewMore")) btnViewAll.css(\'visibility\', \'hidden\');\n    });\n    drpDynamicOp.on("change", function () {\n      setDynamicQryControls();\n    });\n\n    /* show hide Dynamic div area */\n    function setDynamicQryControls(isUser) {\n      var index = drpDynamicOp[0].selectedIndex;\n      if (isUser) {\n        divYear.hide();\n        divMonth.hide();\n        divDay.hide();\n        return;\n      }\n      divYear.show();\n      divMonth.show();\n      if (chkDynamic.is(\':checked\')) {\n        divDay.show();\n      } else {\n        divDay.hide();\n      }\n      txtDay.prop("readonly", false);\n      txtMonth.prop("min", 1);\n      if (index == 3 || index == 6) {\n        txtMonth.prop("min", 0);\n        txtDay.val(0);\n        txtMonth.val(0);\n        txtYear.val(1);\n      } else if (index == 2 || index == 5) {\n        divYear.hide();\n        txtYear.val("");\n        txtMonth.val(1);\n        txtDay.val(0);\n      } else if (index == 1 || index == 4) {\n        divYear.hide();\n        divMonth.hide();\n        txtDay.val(0);\n      } else if (index == 0) {\n        txtDay.prop("readonly", true);\n        divYear.hide();\n        divMonth.hide();\n        txtDay.val(0);\n        //divDay.hide();\n      }\n    }\n    ;\n    this.disposeComponent = function () {\n      bodyDiv.remove();\n      this.listOfFilterQueries = [];\n      self = null;\n    };\n\n    //functions\n    function setValueEnabled(isEnabled) {\n      // get control\n      var ctrl = divValue1.children()[1];\n      var btn = null;\n      if (divValue1.children().length > 2) btn = divValue1.children()[2];\n      if (btn) $(btn).prop("disabled", !isEnabled).prop("readonly", !isEnabled);else if (ctrl != null) {\n        $(ctrl).prop("disabled", !isEnabled).prop("readonly", !isEnabled);\n      }\n    }\n    ;\n    function setValue2Enabled(isEnabled) {\n      var ctrl = divValue2.children()[1];\n      var btn = null;\n      if (divValue2.children().length > 2) btn = divValue2.children()[2];\n      if (btn) $(btn).prop("disabled", !isEnabled).prop("readonly", !isEnabled);else if (ctrl != null) {\n        $(ctrl).prop("disabled", !isEnabled).prop("readonly", !isEnabled);\n      }\n    }\n    ;\n    function setControlNullValue(isValue2) {\n      var crtlObj = null;\n      if (isValue2) {\n        crtlObj = control2;\n      } else {\n        crtlObj = control1;\n      }\n\n      // if control exists\n      if (crtlObj != null) {\n        crtlObj.setValue(null);\n      }\n    }\n    ;\n    function setControl(isValue1, field) {\n      // set column and row position\n      /*****Get control form specified column and row from Grid***********/\n      if (isValue1) control1 = null;\n      control2 = null;\n      var ctrl = null;\n      var ctrl2 = null;\n      if (isValue1) {\n        ctrl = divValue1.children()[0];\n      } else {\n        ctrl = divValue2.children()[0];\n      }\n\n      //Remove any elements in the list\n      if (ctrl != null) {\n        $(ctrl).remove();\n        if (ctrl2 != null) $(ctrl2).remove();\n        ctrl = null;\n      }\n      /**********************************/\n      var crt = null;\n      // if any filed is given\n      if (field != null) {\n        // if field id any key, then show number textbox \n        if (field.getIsKey()) {\n          crt = new VIS.Controls.VNumTextBox(field.getColumnName(), false, false, true, field.getDisplayLength(), field.getFieldLength(), field.getColumnName());\n        } else {\n          crt = VIS.VControlFactory.getControl(null, field, true, true, false);\n        }\n      } else {\n        // if no field is given show an empty disabled textbox\n        crt = new VIS.Controls.VTextBox("columnName", false, true, false, 20, 20, "format", "GetObscureType", false); // VAdvantage.Controls.VTextBox.TextType.Text, DisplayType.String);\n      }\n      if (crt != null) {\n        crt.setMandatory(false);\n        crt.setReadOnly(false);\n        if (field.getDisplayType() == VIS.DisplayType.AmtDimension) {\n          crt.hideButton(false);\n          crt.setReadOnlyTextbox(false);\n        }\n        if (VIS.DisplayType.Text == field.getDisplayType() || VIS.DisplayType.TextLong == field.getDisplayType()) {\n          crt.getControl().attr("rows", "1");\n          crt.getControl().css("width", "100%");\n        } else if (VIS.DisplayType.YesNo == field.getDisplayType()) {\n          crt.getControl().css("clear", "both");\n        } else if (VIS.DisplayType.IsDate(field.getDisplayType())) {\n          crt.getControl().css("line-height", "1");\n        }\n        var btn = null;\n        var valueGrp = $(\'<div class="input-group vis-input-wrap">\');\n        var valueInputWrap = $(\'<div class="vis-control-wrap">\');\n        if (crt.getBtnCount() > 0 && !(crt instanceof VIS.Controls.VComboBox)) btn = crt.getBtn(0);\n        if (isValue1) {\n          divValue1.append(valueGrp);\n          valueGrp.append(valueInputWrap);\n          valueInputWrap.append(crt.getControl());\n          control1 = crt;\n          if (btn) {\n            var $divInputGroupBtn = $(\'<div class="input-group-append">\');\n            valueGrp.append($divInputGroupBtn);\n            $divInputGroupBtn.append(btn);\n          }\n          if (field.getDisplayType() == VIS.DisplayType.YesNo) {\n            ;\n          } else {\n            valueInputWrap.append(\'<label>\' + VIS.Msg.getMsg("QueryValue") + \'</label>\');\n          }\n        } else {\n          divValue2.append(valueGrp);\n          valueGrp.append(valueInputWrap);\n          valueInputWrap.append(crt.getControl());\n          control2 = crt;\n          if (btn) {\n            var $divInputGroupBtn = $(\'<div class="input-group-append">\');\n            valueGrp.append($divInputGroupBtn);\n            $divInputGroupBtn.append(btn);\n            //crt.getControl().css("width", "calc(100% - 30px)");\n            //btn.css("max-width", "30px");\n          }\n          if (field.getDisplayType() == VIS.DisplayType.YesNo) {\n            ;\n          } else {\n            var $InputLabel1 = $(\'<label>\' + VIS.Msg.getMsg("VIS_QueryValueTo") + \'</label>\');\n            valueInputWrap.append($InputLabel1);\n          }\n        }\n        if (field.getDisplayType() == VIS.DisplayType.AmtDimension) {\n          //crt.getControl().css("width", "100%");\n        }\n      }\n    }\n    ;\n    function getControlValue(isValue1) {\n      var crtlObj = null;\n      // get control\n      if (isValue1) {\n        // crtlObj = (IControl)tblpnlA2.GetControlFromPosition(2, 1);\n        crtlObj = control1;\n      } else {\n        //  crtlObj = (IControl)tblpnlA2.GetControlFromPosition(3, 1);\n        crtlObj = control2;\n      }\n      // if control exists\n      if (crtlObj != null) {\n        // if control is any checkbox\n        if (crtlObj.getDisplayType() == VIS.DisplayType.YesNo) {\n          if (crtlObj.getValue().toString().toLowerCase() == "true") {\n            return "Y";\n          } else {\n            return "N";\n          }\n        }\n        // return control\'s value\n        if (crtlObj.displayType == VIS.DisplayType.AmtDimension) {\n          return crtlObj.getText();\n        } else {\n          return crtlObj.getValue();\n        }\n      }\n      return "";\n    }\n    ;\n\n    /* <param name="isValue1">true if get control\'s text at value1 position else false</param>\r\n     */\n    function getControlText(isValue1) {\n      var crtlObj = null;\n      // get control\n      if (isValue1) {\n        // crtlObj = (IControl)tblpnlA2.GetControlFromPosition(2, 1);\n        crtlObj = control1;\n      } else {\n        // crtlObj = (IControl)tblpnlA2.GetControlFromPosition(3, 1);\n        crtlObj = control2;\n      }\n      // if control exists\n      if (crtlObj != null) {\n        // get control\'s text\n\n        if (crtlObj.displayType == VIS.DisplayType.AmtDimension) {\n          return crtlObj.getText();\n        } else {\n          return crtlObj.getDisplay();\n        }\n      }\n      return "";\n    }\n    ;\n    this.getDynamicFilter = function () {\n      var dynWhere = \'\';\n      for (var col in dsAdvanceData) {\n        var arr = dsAdvanceData[col];\n        var arrCondition = [];\n        for (var i = 0; i < arr.length; i++) {\n          if (i == 0) {\n            arrCondition.push(" ( ");\n            arrCondition.push(arr[i].Where);\n          } else {\n            arrCondition.push(\' OR \' + arr[i].Where);\n          }\n        }\n        if (arrCondition.length > 0) arrCondition.push(" ) ");\n        if (dynWhere != \'\') dynWhere += \' AND \';\n        dynWhere += arrCondition.join(\' \');\n      }\n      return dynWhere;\n    };\n    function saveDynFilter() {\n      // set column name\n      var cVal = cmbColumns.val();\n      if (!cVal || cVal == "-1") return false;\n      var colName = cmbColumns.find("option:selected").text();\n      var colValue = "";\n      if (colName == null || colName.trim().length == 0) {\n        return false;\n      } else {\n        // set column value\n        colValue = cVal.toString();\n      }\n\n      // set operator name\n      var opName = cmbOp.val();\n      if (opName == null || opName == undefined) opName = cmbOp.find("option:selected").text();\n      ;\n      ; // vcmbOperator.Text;//silverlight comment\n      // set operator (sign)\n      var opValue = cmbOp.val();\n\n      // add row in dataset\n      addDynRow(colName, colValue, opName, opValue, getControlText(true), getControlValue(true), getControlText(false), getControlValue(false), true);\n    }\n    function addDynRow(colName, colValue, optr, optrName, value1Name, value1Value, value2Name, value2Value) {\n      if (dsAdvanceData == null) dsAdvanceData = {};\n      if (!(colValue in dsAdvanceData)) dsAdvanceData[colValue] = [];\n      dsAdvanceData[colValue].push({\n        \'Name\': colName,\n        \'Value\': value1Value,\n        \'Value2\': value1Value,\n        \'Text\': value1Name,\n        \'Text2\': value2Name,\n        \'Optr\': optr,\n        \'Where\': self.parseWhereCondition(colValue, optr, value1Value, value2Value)\n      });\n      refreshDynFiltersUI(colValue);\n    }\n    ;\n    function deleteDynRow(colValue) {\n      if (dsAdvanceData == null) dsAdvanceData = {};\n      if (colValue in dsAdvanceData) {\n        //var values = dsAdvanceData[col];\n        //for (var i = 0; i < values.length; i++) {\n        //    if (colValue == values[i][\'Value\']) {\n        //        values.splice(i, 1);\n        //        break;\n        //    }\n        //}\n        //if (values.length < 1)\n        delete dsAdvanceData[colValue];\n      }\n      refreshDynFiltersUI(colValue);\n    }\n    ;\n    function refreshDynFiltersUI(colValue) {\n      var selDiv = divDynFilters.find(\'[data-id="\' + colValue + \'"]\');\n      if (selDiv.length > 0) {\n        selDiv.remove();\n      }\n      if (colValue in dsAdvanceData) {\n        var htm = [];\n        var arrVal = dsAdvanceData[colValue];\n        var hue = Math.floor(Math.random() * 360);\n        var v = Math.floor(Math.random() * 16) + 85;\n        var pastel = \'hsl(\' + hue + \', 100%, \' + v + \'%)\';\n        htm.push(\'<div class="vis-fp-currntrcrds" style="background-color:\' + pastel + \'" data-id="\' + colValue + \'"><span  class="vis-fp-inputvalueforupdate">\');\n        for (var i = 0; i < arrVal.length; i++) {\n          if (i != 0) htm.push(\' | \');else {\n            htm.push(arrVal[i][\'Name\']);\n            htm.push(arrVal[i][\'Optr\']);\n          }\n          htm.push(arrVal[i][\'Text\']);\n        }\n        htm.push(\'</span> <i class="vis vis-mark"></i></div>\');\n        divDynFilters.append(htm.join(\' \'));\n      }\n      self.fireValChanged();\n      setControlNullValue();\n      setControlNullValue(true);\n    }\n  }\n  ;\n  FilterPanel.prototype.init = function () {\n    if (this.initialzed) return;\n    this.curTab = this.curGC.getMTab();\n    var curTabfieldlist = this.curTab.getFields();\n    this.selectionfields = [];\n    this.curTabfields = [];\n    var html = \'<option value="-1"> </option>\';\n    var sortedFields = [];\n    //Fill Dynamic Column List \n    for (var c = 0; c < curTabfieldlist.length; c++) {\n      // get field\n      var fieldorg = curTabfieldlist[c];\n      // var field = Object.assign(Object.create(Object.getPrototypeOf(fieldorg)), fieldorg);\n\n      //let field = JSON.parse(JSON.stringify(fieldorg));\n\n      //Object.setPrototypeOf(field, Object.getPrototypeOf(fieldorg));\n\n      var field = jQuery.extend(true, {}, fieldorg);\n      if (fieldorg.lookup && (VIS.DisplayType.IsLookup(fieldorg.getDisplayType()) || VIS.DisplayType.ID == fieldorg.getDisplayType())) {\n        field.lookup = jQuery.extend(true, {}, fieldorg.lookup);\n        if (field.lookup.initialize) field.lookup.initialize();\n      }\n      this.curTabfields.push(field);\n      if (field.getIsEncrypted()) continue;\n      // get field\'s column name\n      var columnName = field.getColumnName();\n      if (field.getDisplayType() == VIS.DisplayType.Button) {\n        if (field.getAD_Reference_Value_ID() == 0)\n          // change done here to display textbox for search in case where buttons don\'t have Reference List bind with Column\n          //continue;\n          field.setDisplayType(VIS.DisplayType.String);else {\n          if (columnName.endsWith("_ID")) field.setDisplayType(VIS.DisplayType.Table);else {\n            field.setDisplayType(VIS.DisplayType.List);\n            // bind lookup for buttons having Reference List bind with column\n            field.lookup = new VIS.MLookupFactory.getMLookUp(VIS.context, this.winNo, field.getAD_Column_ID(), VIS.DisplayType.List);\n          }\n          //field.loadLookUp();\n        }\n      }\n\n      // get text to be displayed\n      var header = field.getHeader();\n      if (header == null || header.length == 0) {\n        // get text according to the language selected\n        header = VIS.Msg.getElement(VIS.context, columnName);\n        if (header == null || header.Length == 0) continue;\n      }\n      // if given field is any key, then add "(ID)" to it\n      if (field.getIsKey()) header += " (ID)";\n      if ((VIS.DisplayType.IsLookup(field.getDisplayType()) || VIS.DisplayType.ID == field.getDisplayType()) && !field.lookup) {\n        ;\n      } else if (field.getIsSelectionColumn()) {\n        this.selectionfields.push(field);\n      } else sortedFields.push({\n        \'value\': columnName,\n        \'text\': header\n      });\n      // html += \'<option value="\' + columnName + \'">\' + header + \'</option>\';\n    }\n    sortedFields.sort(function (a, b) {\n      var n1 = a.text.toUpperCase();\n      var n2 = b.text.toUpperCase();\n      if (n1 > n2) return 1;\n      if (n1 < n2) return -1;\n      return 0;\n    });\n    for (var col = 0; col < sortedFields.length; col++) {\n      html += \'<option value="\' + sortedFields[col].value + \'">\' + sortedFields[col].text + \'</option>\';\n    }\n    //Add this html in Dynamic created column\n    this.fillColumns(html);\n    this.selectionfields.sort(function (a, b) {\n      return a.getSelectionSeqNo() - b.getSelectionSeqNo();\n    });\n    this.getFixedColumns();\n    this.setLayout();\n    this.initialzed = true;\n  };\n  FilterPanel.prototype.getFixedColumns = function () {\n    if (!this.selectionfields || this.selectionfields.length == 0) {\n      this.selectionfields = $.grep(this.curTabfields, function (field, index) {\n        if (field.getColumnName() == "Name" || field.getColumnName() == "Value" || field.getColumnName() == "DocumentNo") {\n          return field;\n        }\n      });\n    }\n  };\n  FilterPanel.prototype.getFilterOption = function (field, whereClause) {\n    if (!whereClause) whereClause = "";\n    if (field && field.getShowFilterOption()) {\n      var keyCol = "";\n      var displayCol = "";\n      var validationCode = "";\n      var lookupTableName = "";\n      if (field.getLookup() && field.getLookup().info) {\n        keyCol = field.getLookup().info.keyColumn;\n        displayCol = field.getLookup().info.displayColSubQ;\n        validationCode = VIS.Env.parseContext(VIS.Env.getCtx(), this.winNo, this.curTab.getTabNo(), field.getLookup().info.validationCode, false);\n        lookupTableName = field.getLookup().info.tableName;\n      }\n      //if (!displayCol || displayCol == \'\')\n      //    return;\n\n      var tabWhere = this.curTab.getWhereClause();\n      tabWhere = VIS.Env.parseContext(VIS.Env.getCtx(), this.winNo, this.curTab.getTabNo(), tabWhere, false);\n      var linkWhere = this.curTab.getLinkWhereClause();\n      if (linkWhere && linkWhere.length > 0) {\n        if (whereClause != "") whereClause += " AND " + linkWhere;else whereClause += " " + linkWhere;\n      }\n      if (tabWhere && tabWhere.length > 0) {\n        if (whereClause != "") whereClause += " AND " + tabWhere;else whereClause += " " + tabWhere;\n      }\n      var dynFilter = this.getDynamicFilter();\n      if (dynFilter && dynFilter.length > 0) {\n        if (whereClause != "") whereClause += " AND " + dynFilter;else whereClause += " " + dynFilter;\n      }\n\n      ////Remove query which will fetch image.. Only display test in Filter option.\n      //if (displayCol.indexOf("||\'^^\'|| NVL((SELECT NVL(ImageURL,\'\')") > 0\n      //    && displayCol.indexOf("thing.png^^\') ||\' \'||") > 0) {\n      //    var displayCol1 = displayCol.substr(0, displayCol.indexOf("||\'^^\'|| NVL((SELECT NVL(Imag"));\n      //    displayCol = displayCol.substr(displayCol.indexOf("othing.png^^\') ||\' \'||") + 22);\n      //    displayCol = displayCol1 + "||\'_\'||" + displayCol;\n      //}\n      //if (displayCol.indexOf("||\'^^\'|| NVL((SELECT NVL(ImageURL,\'\')") > 0) {\n      //    displayCol = displayCol.replace(displayCol.substr(displayCol.indexOf("||\'^^\'|| NVL((SELECT NVL(Imag"), displayCol.indexOf("Images/nothing.png^^\')") + 21), \'\');\n      //}\n      //else if (displayCol.indexOf("nothing.png") > -1) {\n      //    displayCol = displayCol.replace(displayCol.substr(displayCol.indexOf("NVL((SELECT NVL(ImageURL,\'\')"), displayCol.indexOf("thing.png^^\') ||\' \'||") + 21), \'\')\n      //}\n\n      //var data = {\n      //    keyCol: keyCol, displayCol: displayCol, validationCode: validationCode\n      //    , tableName: lookupTableName, AD_Referencevalue_ID: field.getAD_Reference_Value_ID(), pTableName: this.curTab.getTableName(),\n      //    pColumnName: field.getColumnName(), whereClause: whereClause,\n      //};\n      var lookupData = {\n        \'ctx\': VIS.context.getWindowCtx(this.winNo),\n        \'windowNo\': this.winNo,\n        \'column_ID\': field.getAD_Column_ID(),\n        \'AD_Reference_ID\': field.getDisplayType(),\n        \'columnName\': field.getColumnName(),\n        \'AD_Reference_Value_ID\': field.getAD_Reference_Value_ID(),\n        \'validationCode\': VIS.secureEngine.encrypt(validationCode),\n        whereClause: VIS.secureEngine.encrypt(whereClause),\n        \'isParent\': false,\n        \'pTableName\': this.curTab.getTableName()\n      };\n\n      // lookupData = JSON.stringify(lookupData);\n\n      var tht = this;\n      filterContext.getFilters(lookupData).then(function (data) {\n        var key = data["keyCol"];\n        data = data["list"];\n        //if (data && data.length > 0) {\n        tht.setFilterOptions(data, key);\n        //}\n        tht = null;\n      });\n    }\n  };\n  FilterPanel.prototype.refreshFilterOptions = function (colName, hardRefresh) {\n    if (hardRefresh) {\n      this.hardRefreshFilterPanel();\n    }\n    if (!this.selectionfields) return;\n    for (var i = 0; i < this.selectionfields.length; i++) {\n      if (this.selectionfields[i].getShowFilterOption()) {\n        var field = this.selectionfields[i];\n        if (field.getColumnName() != colName) {\n          var whereClause = \'\';\n          for (var j = 0; j < this.listOfFilterQueries.length; j++) {\n            var query = this.listOfFilterQueries[j];\n            if (query.columnName != field.getColumnName()) {\n              if (whereClause.length > 1) whereClause += " AND ";\n              whereClause += query.whereClause;\n            }\n          }\n          this.getFilterOption(field, whereClause);\n        }\n      }\n    }\n  };\n  FilterPanel.prototype.refreshAll = function (colName, finalWhereClause) {\n    var query = new VIS.Query(this.curTab.getTableName(), true);\n    //query.addRestriction(finalWhereClause);\n    //this.curTab.setQuery(query);\n    //this.curGC.query(0, 0, null);\n    this.curGC.applyFilters(query);\n    this.refreshFilterOptions(colName);\n  };\n  FilterPanel.prototype.getTargetMField = function (columnName) {\n    // if no column name, then return null\n    if (columnName == null || columnName.length == 0) return null;\n    // else find field for the given column\n    for (var c = 0; c < this.curTabfields.length; c++) {\n      var field = this.curTabfields[c];\n      if (columnName.equals(field.getColumnName())) return field;\n    }\n    return null;\n  };\n  FilterPanel.prototype.parseValue = function (field, pp) {\n    if (pp == null) return null;\n    var dt = field.getDisplayType();\n    var inStr = pp.toString();\n    if (inStr == null || inStr.equals(VIS.Env.NULLString) || inStr == "" || inStr.toUpper() == "NULL") return null;\n    try {\n      //\tReturn Integer\n      if (dt == VIS.DisplayType.Integer || VIS.DisplayType.IsID(dt) && field.getColumnName().endsWith("_ID")) {\n        //i = int.Parse(inStr);\n        return parseInt(inStr);\n        // return i;\n      }\n      //\tReturn BigDecimal\n      else if (VIS.DisplayType.IsNumeric(dt)) {\n        return parseFloat(inStr); //DisplayType.GetNumberFormat(dt).GetFormatedValue(inStr);\n      }\n      //\tReturn Timestamp\n      else if (VIS.DisplayType.IsDate(dt)) {\n        var time = "";\n        try {\n          return new Date(inStr);\n        } catch (e) {\n          //log.Log(Level.WARNING, inStr + "(" + inStr.GetType().FullName + ")" + e);\n          time = ""; //DisplayType.GetDateFormat(dt).Format(inStr);\n        }\n        try {\n          return Date.Parse(time);\n        } catch (ee) {\n          return null;\n        }\n      }\n    } catch (ex) {\n      //     log.Log(Level.WARNING, "Object=" + inStr, ex);\n      var error = ex.message;\n      if (error == null || error.length == 0) error = ex.toString();\n      var errMsg = "";\n      errMsg += field.getColumnName() + " = " + inStr + " - " + error;\n      //\n      //if(pp != null && pp.ToString().Trim().StartsWith("adddays") || pp.ToString().Trim().StartsWith("adddays")\n      VIS.ADialog.error("ValidationError", true, errMsg.toString());\n      //MessageBox.Show("ValidationError " + errMsg.ToString());\n      return null;\n    }\n    return inStr;\n  }; //\tpa\n\n  FilterPanel.prototype.createDirectSql = function (code, code_to, column, operator, convertToString) {\n    var sb = "";\n    var isoDateRegx = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})/;\n    if (typeof code == "string" && isNaN(code) && code.toString().toUpper() != "NULLValue".toUpper()) {\n      sb += " UPPER( ";\n    }\n    sb += this.curTab.getTableName() + \'.\' + column;\n    if (typeof code == "string" && isNaN(code) && code.toString().toUpper() != "NULLValue".toUpper()) {\n      sb += " ) ";\n    }\n    if (code == null || "NULL".equals(code.toString().toUpper()) || "NullValue".toUpper().equals(code.toString().toUpper())) {\n      if (operator.equals(VIS.Query.prototype.EQUAL)) sb += " IS NULL ";else sb += " IS NOT NULL ";\n    } else {\n      sb += operator;\n      if (VIS.Query.prototype.IN.equals(operator) || VIS.Query.prototype.NOT_IN.equals(operator)) {\n        sb += "(";\n      }\n      if (code instanceof Date || code && isoDateRegx.test(code.toString())) {\n        //  endsWith(\'Z\') && this.code.toString().contains(\'T\')))) {\n        sb += VIS.DB.to_date(code, false);\n      } else if ("string" == typeof code && isNaN(code)) {\n        if (convertToString) {\n          sb += " UPPER( ";\n          sb += VIS.DB.to_string(code.toString());\n          sb += " ) ";\n        } else {\n          sb += code.toString();\n        }\n      } else sb += code;\n\n      //\tBetween\n      if (VIS.Query.prototype.BETWEEN.equals(operator)) {\n        //\tif (Code_to != null && InfoDisplay_to != null)\n        sb += " AND ";\n        if (code_to instanceof Date || code_to && isoDateRegx.test(code_to.toString())) {\n          //  endsWith(\'Z\') ||  this.code.toString().contains(\'T\')))) {\n          sb += VIS.DB.to_date(code_to, false);\n        } else if (typeof code_to == "string") {\n          sb += " UPPER( ";\n          sb += VIS.DB.to_string(code_to.toString());\n          sb += " ) ";\n        } else sb += code_to;\n      } else if (VIS.Query.prototype.IN.equals(operator) || VIS.Query.prototype.NOT_IN.equals(operator)) sb += ")";\n    }\n    return sb;\n  };\n  FilterPanel.prototype.parseWhereCondition = function (columnName, optr, value, value2) {\n    //\tColumn\n    var field = this.getTargetMField(columnName);\n    var columnSQL = field.getColumnSQL(); //\n\n    if (value != null && value.length > 0 && VIS.DisplayType.IsText(field.getDisplayType()) && optr == VIS.Query.prototype.EQUAL) {\n      optr = VIS.Query.prototype.LIKE;\n      value = \'%\' + value + \'%\';\n    }\n    var whereCondition = \'\';\n    var parsedValue = null;\n    var parsedValue2 = null;\n    if (value != null && (value.toString().trim().startsWith("adddays") || value.toString().trim().startsWith("@"))) {\n      ;\n    } else {\n      parsedValue = this.parseValue(field, value);\n    }\n    if (value == null || value.toString().length < 1) {\n      /*if (VIS.Query.prototype.BETWEEN.equals(optr))\r\n          return whereCondition;*/\n      parsedValue = VIS.Env.NULLString;\n    }\n    if (VIS.DisplayType.IsDate(field.getDisplayType()) && VIS.Query.prototype.BETWEEN.equals(optr)) {\n      parsedValue2 = this.parseValue(field, value2);\n    }\n    if (field.getIsVirtualColumn()) {\n      columnSQL = field.vo.ColumnSQL;\n      columnName = field.vo.ColumnSQL;\n      if (VIS.Query.prototype.BETWEEN.equals(optr)) {\n        if (value2 == null || value2.toString().trim().length < 1) {\n          parsedValue = null;\n          parsedValue2 = null;\n          // return whereCondition;\n        }\n        parsedValue2 = this.parseValue(field, value2);\n        whereCondition = this.createDirectSql(parsedValue, parsedValue2, columnName, optr, true);\n      } else {\n        whereCondition = this.createDirectSql(parsedValue, parsedValue2, columnName, optr, true);\n      }\n    } else {\n      var tabName = "C_DimAmt";\n      var isAct = "IsActive";\n      var amt = "Amount";\n      var S = "S";\n      var E = "E";\n      var L = "L";\n      var elt = "ECT";\n      var F = "F";\n      var R = "R";\n      var OM = "OM";\n      var WH = "WH";\n      if (field.getDisplayType() == VIS.DisplayType.DateTime && VIS.Query.prototype.EQUAL.equals(optr) && parsedValue) {\n        var yearr = parsedValue.getFullYear();\n        var month = parsedValue.getMonth();\n        var date = parsedValue.getDate();\n        parsedValue2 = new Date(yearr, month, date, 24, 0, 0);\n        parsedValue = new Date(yearr, month, date, 0, 0, 0);\n        optr = VIS.Query.prototype.BETWEEN;\n      }\n      //\tValue2\n      // if "BETWEEN" selected\n      if (VIS.Query.prototype.BETWEEN.equals(optr)) {\n        value2 = parsedValue2;\n        if (value2 == null || value2.toString().trim().length < 1) {\n          parsedValue = null;\n          parsedValue2 = null;\n          //return whereCondition;\n        }\n        if (field.getDisplayType() == VIS.DisplayType.AmtDimension) {\n          var sqlAmount = S + E + L + elt + " " + tabName + "_ID " + F + R + OM + " " + tabName + " " + WH + E + R + E + " " + isAct + "=\'Y\' AND " + amt + " " + optr + value + " AND " + value2;\n          parsedValue = VIS.MRole.getDefault().addAccessSQL(sqlAmount.toString(), "C_DimAmt", VIS.MRole.SQL_NOTQUALIFIED, VIS.MRole.SQL_RO);\n          optr = VIS.Query.prototype.IN;\n        }\n        whereCondition = this.createDirectSql(parsedValue, parsedValue2, columnSQL, optr, false);\n      } else {\n        // else add simple restriction where clause to query\n\n        if (field.getDisplayType() == VIS.DisplayType.AmtDimension) {\n          var sqlAmount = S + E + L + elt + " " + tabName + "_ID " + F + R + OM + " " + tabName + " " + WH + E + R + E + " " + isAct + "=\'Y\' AND " + amt + " " + optr + value;\n          parsedValue = VIS.MRole.getDefault().addAccessSQL(sqlAmount.toString(), "C_DimAmt", VIS.MRole.SQL_NOTQUALIFIED, VIS.MRole.SQL_RO);\n          optr = VIS.Query.prototype.IN;\n        }\n        if (parsedValue == null && value != null && (value.toString().trim().startsWith("adddays") || value.toString().trim().startsWith("@"))) {\n          whereCondition = columnName + optr + value;\n          if (field.getDisplayType() == VIS.DisplayType.AmtDimension) {\n            whereCondition = columnName + VIS.Query.prototype.IN + \'(\' + parsedValue + \')\';\n          }\n        } else {\n          whereCondition = this.createDirectSql(parsedValue, parsedValue2, columnSQL, optr, true);\n        }\n      }\n    }\n    return whereCondition;\n  };\n  FilterPanel.prototype.dispose = function () {\n    this.disposeComponent();\n    this.curGC = this.curTab = this.curTabfields = this.selectionfields = null;\n  };\n  FilterPanel.prototype.getWhereClause = function () {\n    return this.finalWhere;\n  };\n  FilterPanel.prototype.setWhereClause = function (sql) {\n    this.finalWhere = sql;\n  };\n  FilterPanel.prototype.getOperatorsQuery = function (vnpObj, translate) {\n    var html = "";\n    var val = "";\n    for (var p in vnpObj) {\n      val = vnpObj[p];\n      if (translate) val = VIS.Msg.getMsg(val);\n      html += \'<option value="\' + p + \'">\' + val + \'</option>\';\n    }\n    return html;\n  };\n  var filterContext = {\n    getFilters: function (ldata) {\n      return new Promise(function (resolve, reject) {\n        var result = null;\n        $.ajax({\n          url: VIS.Application.contextUrl + "JsonData/GetRecordForFilter",\n          type: "POST",\n          data: {\n            \'data\': JSON.stringify(ldata)\n          }\n        }).done(function (json) {\n          result = json;\n          result = JSON.parse(result);\n          resolve(result);\n          //return result;\n        });\n\n        //$.ajax({\n        //    type: "GET",\n        //    url: VIS.Application.contextUrl + "JsonData/GetRecordForFilter",\n        //    data: {\n        //        keyCol: keyCol, displayCol: displayCol, validationCode: validationCode\n        //        , tableName: lookupTableName, AD_Referencevalue_ID: field.getAD_Reference_Value_ID(), pTableName: that.curTab.getTableName(), pColumnName: field.getColumnName(), whereClause: finalWhere\n        //    },\n        //    success: function (data) {\n        //        data = JSON.parse(data);\n        //        var key = data["keyCol"];\n        //        data = data["list"];\n        //        if (data && data.length > 0) {\n        //            var fields;\n        //            var wrapper = divStatic.find(\'[data-cid="\' + key + \'_\' + that.curTab.getAD_Tab_ID() + \'"]\');\n        //            if (wrapper && wrapper.length > 0) {\n        //                fields = wrapper.find(\'.vis-fp-lst-searchrcrds\');\n        //                var inputs = wrapper.find(\'input\');\n        //                if (inputs && inputs.length > 0) {\n        //                    for (var a = 0; a < inputs.length; a++) {\n        //                        if (!$(inputs[a]).is(\':checked\')) {\n        //                            $(inputs[a]).parents(\'.vis-fp-inputspan\').remove();\n        //                        }\n        //                    }\n        //                }\n\n        //            }\n        //            if (!fields || fields.length == 0) {\n        //                fields = $(\'<div class="vis-fp-lst-searchrcrds"></div>\');\n        //                wrapper.append(fields);\n        //            }\n\n        //            for (var i = 0; i < data.length; i++) {\n        //                var divinpuspanWrapper = $(\'<div class="vis-fp-inputspan">\');\n        //                divinpuspanWrapper.append(\'<input class="vis-fp-chboxInput vis-fp-inputvalueforupdate" type="checkbox" data-column="\' + key + \'" data-keyval="\' + key + \'_\' + data[i].ID + \'" data-id="\' + data[i].ID + \'"><span data-id="\' + data[i].ID + \'">\' + data[i].Name + \'</span><span class="vis-fp-spanCount">\' + data[i].Count + \'</span>\');\n        //                fields.append(divinpuspanWrapper);\n        //            }\n        //        }\n\n        //    },\n        //    error: function () { }\n        //});\n      });\n    }\n  };\n  VIS.FilterPanel = FilterPanel;\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/afilterpanel.js?')},"./Areas/VIS/Scripts/F20/aheaderpanel.js":()=>{eval(';\n(function (VIS, $) {\n  function HeaderPanel($parentRoot) {\n    var $root = null;\n    var alignmentHorizontal = false;\n    this.headerItems = null;\n    var $self = this;\n    this.evt = {\n      sender: \'hdrpnl\',\n      isHorizontal: false,\n      width: \'0px\',\n      height: \'0px\',\n      isClosed: true\n    };\n    this.curTab = null;\n    this.controls = [];\n    this.textAlignEnum = {\n      "C": "Center",\n      "R": "flex-end",\n      "L": "flex-start"\n    };\n    this.alignItemEnum = {\n      "C": "Center",\n      "T": "flex-start",\n      "B": "flex-end"\n    };\n    this.windowNo = 0;\n    this.dynamicStyle = [];\n    this.styleTag = document.createElement(\'style\');\n    var $slider = $parentRoot.find(\'.fa-angle-double-left\');\n    $parentRoot.css("flex-direction", "column");\n    $slider.parent().css(\'display\', \'flex\');\n    /**\r\n     * This function will check if tab is marked as header panel, then start creating header panel\r\n     * and call next method to load items of header panel.\r\n     * @param {any} _gTab\r\n     * @param {any} $parentRoot\r\n     */\n    this.setHeaderLayout = function (_gTab, backColor) {\n      //if Tab is market as Header Panel, only then execute further code.\n      if (_gTab.getIsHeaderPanel()) {\n        $self.headerItems = _gTab.getHeaderPanelItems();\n        $self.gTab = _gTab;\n        $self.windowNo = $self.gTab.getWindowNo();\n        if ($self.headerItems) {\n          // Create Root for header Panel\n          $root = $(\'<div class="vis-ad-w-p-header_root_common">\');\n          var headerCustom = this.headerParentCustomUISettings(backColor);\n          $parentRoot.addClass(headerCustom);\n        }\n      }\n    };\n\n    /**\r\n     * This method create headr panel items when user open header panel first time. After that when user change record, system simply change values of label\r\n     * and icons.\r\n     * */\n    this.setHeaderItems = function (currentItem, $containerDiv) {\n      /*If controls are already loaded, then do not manipulate DOM.Only fetch there reference from DOM and Change Values.\r\n       *Else create header panel items. \r\n       */\n      if (this.controls && this.controls.length > 0 && !currentItem && !$containerDiv) {\n        for (var i = 0; i < this.controls.length; i++) {\n          var objControl = this.controls[i];\n          if (objControl) {\n            var controls = objControl["control"];\n            var mField = objControl["field"];\n            var iControl = controls["control"];\n            if (mField == null && iControl != null) {\n              //dynamic\n\n              iControl.setValue(null);\n              continue;\n            }\n            if (iControl == null && !mField.getIsHeading()) {\n              continue;\n            }\n            var colValue = getFieldValue(mField, iControl);\n            if (iControl instanceof VIS.Controls.VButton) {\n              if (!colValue || colValue.indexOf("{") > -1) colValue = mField.getValue();\n            }\n\n            // if (!this.isChild) {\n            if (iControl instanceof VIS.Controls.VButton) {\n              //colValue = mField.getValue();\n              setValue(colValue, iControl, mField);\n            } else if (mField.lookup && mField.lookup.gethasImageIdentifier()) {\n              colValue = VIS.Utility.Util.getIdentifierDisplayVal(colValue);\n              var $imgCtrl = objControl["img"];\n              $imgCtrl.attr("src", "");\n              var $imgSpanCtrl = objControl["imgspan"];\n              $imgSpanCtrl.text(\'\');\n              var img = null;\n              var imgStyle = null;\n              if (mField.lookup.displayType == VIS.DisplayType.List) {\n                img = mField.lookup.getLOVIconElement(mField.getValue(), true, true);\n                //Fetch style of icon for list from image window and apply style on that icon\n                imgStyle = mField.lookup.getLOVIconStyle(mField.getValue());\n                var imgSpan = "";\n                if (!img && colValue) {\n                  imgSpan = colValue.substring(0, 1);\n                }\n                if (img) {\n                  if (img.contains("Images/")) {\n                    $imgCtrl.attr(\'src\', img).attr(\'style\', imgStyle);\n                    $imgSpanCtrl.hide();\n                    $imgCtrl.show();\n                  } else {\n                    imgSpan = img;\n                    $imgSpanCtrl.empty();\n                    $imgSpanCtrl.append("<i class=\'" + imgSpan + "\' style=\'" + imgStyle + "\'></i>");\n                    $imgSpanCtrl.show();\n                    $imgCtrl.hide();\n                  }\n                } else {\n                  if (!imgSpan) imgSpan = "";\n                  $imgSpanCtrl.empty();\n                  $imgSpanCtrl.text(imgSpan).attr(\'style\', imgStyle);\n                  $imgSpanCtrl.show();\n                  $imgCtrl.hide();\n                }\n              } else {\n                img = getIdentifierImage(mField);\n                var imgSpan;\n                if (img && !img.contains("Images/")) {\n                  imgSpan = img; //img contains First charater of Name or Identifier text\n                  $imgSpanCtrl.text(imgSpan);\n                  $imgSpanCtrl.show();\n                  $imgCtrl.attr(\'src\', "");\n                  $imgCtrl.hide();\n                } else {\n                  $imgCtrl.attr(\'src\', img);\n                  $imgSpanCtrl.hide();\n                  $imgCtrl.show();\n                }\n              }\n              setValue(colValue, iControl, mField);\n            } else {\n              setValue(colValue, iControl, mField);\n            }\n            // }\n            //else {\n            //    if (iControl instanceof VIS.Controls.VSpan || iControl instanceof VIS.Controls.VKeyText || iControl instanceof VIS.Controls.VButton){\n            //        setValue(colValue, iControl, mField);\n            //    }\n            //}\n          }\n          var fieldStyleLogic = this.controls[i].headerStyleLogic;\n          if (fieldStyleLogic && fieldStyleLogic.toLower().indexOf("?") > -1 && fieldStyleLogic.length > 0) {\n            fieldStyleLogic = this.evaluateStyleLogic(fieldStyleLogic);\n            if (fieldStyleLogic) {\n              fieldStyleLogic = " " + fieldStyleLogic + " ";\n            } else {\n              fieldStyleLogic = \'\';\n            }\n          } else {\n            fieldStyleLogic = \'\';\n          }\n          $root.find(\'.vis-w-p-header-Label-f\').eq(i).attr(\'style\', fieldStyleLogic);\n        }\n      } else {\n        if (!currentItem) return;\n        var fields = this.curTab.gridTable.gridFields;\n        fields = $.grep(fields, function (item) {\n          if (item.getIsHeaderPanelitem()) {\n            return item;\n          }\n        });\n        fields = fields.sort(function (a, b) {\n          return a.getHeaderSeqno() - b.getHeaderSeqno();\n        });\n\n        //loop through header item\n        var headergFields = null;\n        for (var headerSeqNo in currentItem.HeaderItems) {\n          var headerItem = currentItem.HeaderItems[headerSeqNo];\n          var startCol = headerItem.StartColumn;\n          var colSpan = headerItem.ColumnSpan;\n          var startRow = headerItem.StartRow;\n          var rowSpan = headerItem.RowSpan;\n          var justyFy = headerItem.JustifyItems;\n          var alignItem = headerItem.AlignItems;\n          var fieldPadding = headerItem.Padding;\n          var backgroundColor = headerItem.BackgroundColor;\n          if (!backgroundColor) {\n            backgroundColor = \'\';\n          }\n          var FontColor = headerItem.FontColor;\n          if (!FontColor) {\n            FontColor = \'\';\n          }\n          var fontSize = headerItem.FontSize;\n          if (!fontSize) {\n            fontSize = \'\';\n          }\n          var fieldStyleLogic = headerItem.FieldStyleLogic;\n          var $div = null;\n          var $divIcon = null;\n          //$divIconSpan = $(\'<span>\');\n          //$divIconImg = $(\'<img>\');\n          var $divLabel = null;\n          var $label = null;\n          var iControl = null;\n\n          //Apply HTML Style\n          var dynamicClassName = this.applyCustomUISettings(headerSeqNo, startCol, colSpan, startRow, rowSpan, justyFy, alignItem, backgroundColor, FontColor, fontSize, fieldPadding);\n\n          // Find the div with dynamic class from container. Class will only be available in DOm if two fields are having same item seq. No.\n          $div = $containerDiv.find(\'.\' + dynamicClassName);\n\n          //If div not found, then create new one.\n          if ($div.length <= 0) $div = $(\'<div class="vis-w-p-header-data-f \' + dynamicClassName + \'">\');\n          if (headerItem.IsStaticContent) {\n            var controls = {};\n            ContentFieldValue = headerItem.ContentFieldValue;\n            var ContentFieldLabel = VIS.Msg.getMsg(headerItem.ContentFieldLabel);\n            if (ContentFieldLabel.indexOf(\'[\') > -1) {\n              ContentFieldLabel = headerItem.ContentFieldLabel;\n            }\n            $divLabel = $(\'<div class="vis-w-p-header-data-label">\' + ContentFieldLabel + \'</div>\');\n            if (headerItem.FieldLabelStyle) {\n              $divLabel.attr(\'style\', headerItem.FieldLabelStyle);\n            }\n            var $sapn = "";\n            if (ContentFieldValue.indexOf(\'fa-\') > -1 || ContentFieldValue.indexOf(\'vis-\') > -1) {\n              if (ContentFieldValue.indexOf(\'fa-\') != -1 && ContentFieldValue.indexOf(\'fa \') == -1) {\n                ContentFieldValue = \'fa \' + ContentFieldValue;\n              } else if (ContentFieldValue.indexOf(\'vis-\') != -1 && ContentFieldValue.indexOf(\'vis \') == -1) {\n                ContentFieldValue = \'vis \' + ContentFieldValue;\n              }\n              $sapn = $(\'<i class="\' + ContentFieldValue + \'"></i>\');\n            } else if (ContentFieldValue.indexOf(\'data:image/\') > -1) {\n              $sapn = $(\'<img src="\' + ContentFieldValue + \'"/>\');\n            } else {\n              ContentFieldValue = VIS.Msg.getMsg(ContentFieldValue);\n              if (ContentFieldValue.indexOf(\'[\') > -1) {\n                ContentFieldValue = headerItem.ContentFieldValue;\n              }\n              $sapn = $(\'<span class="">\' + ContentFieldValue + \'</span>\');\n            }\n            if (headerItem.FieldValueStyle) {\n              $sapn.attr(\'style\', headerItem.FieldValueStyle);\n            }\n            $div.append($divLabel).append($sapn);\n            $containerDiv.append($div);\n          } else {\n            if (!headergFields) {\n              headergFields = {};\n              fields = fields.sort(function (a, b) {\n                return a.getHeaderSeqno() - b.getHeaderSeqno();\n              });\n              for (var i = 0; i < fields.length; i++) {\n                var field = fields[i];\n\n                // Check if field is marked as Header Panel Item or Not.\n                if (field.getIsHeaderPanelitem()) {\n                  if (field.getHeaderSeqno() in headergFields) {\n                    headergFields[field.getHeaderSeqno()].push(field);\n                  } else {\n                    headergFields[field.getHeaderSeqno()] = [field];\n                  }\n                }\n              }\n            }\n            var mFields = headergFields[headerSeqNo];\n            if (!mFields && headerItem.ColSql.length < 0) continue;else if (!mFields && headerItem.ColSql.length > 0) {\n              var controls = {};\n              $divLabel = $(\'<div class="vis-w-p-header-Label-f"></div>\');\n              iControl = new VIS.Controls.VKeyText(headerItem.ColSql, $self.gTab.getWindowNo(), $self.gTab.getWindowNo() + "_" + headerSeqNo, headerItem.IsAlwaysExecute, mField, headerItem.AD_GridLayoutItems_ID);\n              if (iControl == null) {\n                continue;\n              }\n              controls["control"] = iControl;\n              var objctrls = {\n                "control": controls,\n                "field": null\n              };\n              $divLabel.append(iControl.getControl());\n              $div.append($divLabel);\n              // $div.append($divLabel);\n              $containerDiv.append($div);\n              $self.controls.push(objctrls);\n            } else if (mFields) {\n              for (var x = 0; x < mFields.length; x++) {\n                var mField = mFields[x];\n                if (!mField) continue;\n                var controls = {};\n                $divIcon = $(\'<div class="vis-w-p-header-icon-f"></div>\');\n                $divLabel = $(\'<div class="vis-w-p-header-Label-f"></div>\');\n                // If Referenceof field is Image then added extra class to align image and Label in center.\n                if (mField.getDisplayType() == VIS.DisplayType.Image) {\n                  $divLabel.addClass(\'vis-w-p-header-Label-center-f\');\n                  var dynamicClassForImageJustyfy = this.justifyAlignImageItems(headerSeqNo, justyFy, alignItem);\n                  $divLabel.addClass(dynamicClassForImageJustyfy);\n                }\n\n                // Get Controls to be displayed in Header Panel\n                $label = VIS.VControlFactory.getHeaderLabel(mField, true);\n                if (headerItem.ColSql.length > 0) {\n                  iControl = new VIS.Controls.VKeyText(headerItem.ColSql, $self.gTab.getWindowNo(), $self.gTab.getWindowNo() + "_" + headerSeqNo, headerItem.IsAlwaysExecute, null, headerItem.AD_GridLayoutItems_ID);\n                } else {\n                  iControl = VIS.VControlFactory.getReadOnlyControl(this.curTab, mField, false, false, false);\n                }\n                if (mField.getDisplayType() == VIS.DisplayType.Button) {\n                  if (iControl != null) iControl.addActionListner(this);\n                }\n                var dynamicFieldValue = this.applyCustomUIForFieldValue(headerSeqNo, startCol, startRow, mField);\n                iControl.getControl().addClass(dynamicFieldValue);\n\n                // Create object of controls and push object and Field in Array\n                // THis array is used when user navigate from one record to another.\n                controls["control"] = iControl;\n                var objctrls = {\n                  "control": controls,\n                  "field": mField,\n                  "headerStyleLogic": fieldStyleLogic\n                };\n                var $spanIcon = $(\'<span></span>\');\n                var icon = VIS.VControlFactory.getIcon(mField);\n                if (iControl == null) {\n                  continue;\n                }\n                var $lblControl = null;\n                if ($label) {\n                  $lblControl = $label.getControl().addClass(\'vis-w-p-header-data-label\');\n                }\n                var colValue = getFieldValue(mField);\n                styleArr = mField.getHeaderStyle();\n                if (styleArr && styleArr.length > 0) styleArr = styleArr.split("|");\n                if (styleArr && styleArr.length > 0) {\n                  for (var j = 0; j < styleArr.length; j++) {\n                    if (styleArr[j].indexOf("@img::") > -1 || styleArr[j].indexOf("@span::") > -1) {\n                      $div.append($divIcon);\n                      var css = "";\n                      if (styleArr[j].indexOf("@img::") > -1) {\n                        css = styleArr[j].replace("@img::", "");\n                      } else if (styleArr[j].indexOf("@span::")) {\n                        css = styleArr[j].replace("@span::", "");\n                      }\n                      $divIcon.attr(\'style\', css);\n                    } else if (styleArr[j].indexOf("@value::") > -1) {\n                      //var css = "";\n\n                      //css = styleArr[j].replace("@value::", "");\n                      //$divLabel.attr(\'style\', css);\n                      $div.append($divLabel);\n                    } else if (styleArr[j].indexOf("<br>") > -1) {\n                      $div.css("flex-direction", "column");\n                    } else {\n                      $div.append($divIcon);\n                      $div.append($divLabel);\n                    }\n                  }\n                } else {\n                  $div.append($divIcon);\n                  $div.append($divLabel);\n                }\n                var $image = $(\'<img>\');\n                var $imageSpan = $(\'<span>\');\n                objctrls["img"] = $image;\n                if (mField.lookup && mField.lookup.gethasImageIdentifier()) {\n                  objctrls["imgspan"] = $imageSpan;\n                  var img = null;\n                  var imgSpan = null;\n                  var imgStyle = null;\n                  var styleArr = null;\n                  if (VIS.DisplayType.List == mField.lookup.displayType) {\n                    img = mField.lookup.getLOVIconElement(mField.getValue(), true);\n                    //Fetch style of icon for list from image window and apply style on that icon\n                    imgStyle = mField.lookup.getLOVIconStyle(mField.getValue());\n                    if (!img && colValue) {\n                      imgSpan = colValue.substring(0, 1);\n                    }\n                    if (img && !img.contains("Images/")) {\n                      imgSpan = img; //img contains First charater of Name or Identifier text\n                      $imageSpan.text(imgSpan); //.attr(\'style\', imgStyle);\n                      $image.attr(\'src\', "");\n                      $image.hide();\n                    } else {\n                      $image.attr(\'src\', img); //.attr(\'style\', imgStyle);\n                      $image.show();\n                    }\n                  } else {\n                    colValue = VIS.Utility.Util.getIdentifierDisplayVal(colValue);\n                    img = getIdentifierImage(mField);\n                    if (img && !img.contains("Images/")) {\n                      imgSpan = img; //img contains First charater of Name or Identifier text\n                      $imageSpan.text(imgSpan);\n                      $image.attr(\'src\', "");\n                      $image.hide();\n                    } else {\n                      $image.attr(\'src\', img);\n                      $image.show();\n                    }\n                  }\n                  $divIcon.append($imageSpan);\n                  $divIcon.append($image);\n\n                  /*Set what do you want to show? Icon OR Label OR Both OR None*/\n                  if (!mField.getHeaderIconOnly() && !mField.getHeaderHeadingOnly()) {\n                    if (imgSpan != null) $image.hide();else {\n                      $imageSpan.hide();\n                    }\n                    if ($lblControl && $lblControl.length > 0) $divLabel.append($lblControl);\n                  } else if (mField.getHeaderIconOnly() && mField.getHeaderHeadingOnly()) {\n                    //$divIcon.hide();\n                    $divIcon.remove();\n                  } else if (mField.getHeaderIconOnly()) {\n                    if (imgSpan != null) $image.hide();else $imageSpan.hide();\n                    if ($lblControl && $lblControl.length > 0) $lblControl.remove();\n                  } else if (mField.getHeaderHeadingOnly()) {\n                    if ($lblControl && $lblControl.length > 0) {\n                      $divLabel.append($lblControl);\n                    }\n                    $divIcon.remove();\n                  }\n                  $divLabel.append(iControl.getControl());\n                  $containerDiv.append($div);\n                  setValue(colValue, iControl, mField);\n                } else {\n                  $spanIcon.addClass(\'vis-w-p-header-icon-fixed\');\n                  objctrls["imgspan"] = $spanIcon;\n                  /*Set what do you want to show? Icon OR Label OR Both OR None*/\n                  if (mField.getDisplayType() == VIS.DisplayType.Button) {\n                    $divIcon.remove(); // button has image with field\n                  } else if (!mField.getHeaderIconOnly() && !mField.getHeaderHeadingOnly()) {\n                    $divIcon.append($spanIcon.append(icon));\n                    if ($lblControl && $lblControl.length > 0) $divLabel.append($lblControl);\n                  } else if (mField.getHeaderIconOnly() && mField.getHeaderHeadingOnly()) {\n                    $divIcon.remove();\n                  } else if (mField.getHeaderIconOnly()) {\n                    $divIcon.append($spanIcon.append(icon));\n                    if ($lblControl && $lblControl.length > 0) $lblControl.hide();\n                  } else if (mField.getHeaderHeadingOnly()) {\n                    if ($lblControl && $lblControl.length > 0) {\n                      $divLabel.append($lblControl);\n                    }\n                    $divIcon.remove();\n                  }\n                  setValue(colValue, iControl, mField);\n                  /****END ******  Set what do you want to show? Icon OR Label OR Both OR None*/\n                }\n                $divLabel.append(iControl.getControl());\n                $containerDiv.append($div);\n                $self.controls.push(objctrls);\n              }\n            }\n          }\n        }\n      }\n    };\n    var setValue = function (colValue, iControl, mField) {\n      if (colValue) {\n        if (colValue.startsWith && colValue.startsWith("<") && colValue.endsWith(">")) {\n          colValue = colValue.replace("<", "").replace(">", "");\n        }\n        if (mField.getDisplayType() == VIS.DisplayType.Image) {\n          var oldValue = iControl.getValue();\n          iControl.getControl().show();\n          if (oldValue == colValue) {\n            iControl.refreshImage(colValue);\n          }\n        } else if (iControl.format) {\n          colValue = iControl.format.GetFormatAmount(iControl.format.GetFormatedValue(colValue), "init", VIS.Env.isDecimalPoint());\n        }\n        iControl.setValue(VIS.Utility.decodeText(colValue), false);\n      } else {\n        if (mField.getDisplayType() == VIS.DisplayType.Image) {\n          iControl.getControl().hide();\n          iControl.setValue(null, false);\n        } else if (mField.getDisplayType() == VIS.DisplayType.Button && mField.getAD_Reference_Value_ID() > 0) {\n          iControl.setText("- -");\n        } else iControl.setValue("- -", true);\n      }\n    };\n\n    /**\r\n     * Get value for current field for current field\r\n     * @param {any} mField\r\n     */\n    var getFieldValue = function (mField) {\n      var colValue = mField.getValue();\n      if ($self.pRowData) {\n        colValue = $self.pRowData[mField.getColumnName().toLower()];\n      }\n\n      //if (!mField.getIsDisplayed())\n      //    return "";\n      if (colValue) {\n        var displayType = mField.getDisplayType();\n        if (mField.lookup) {\n          colValue = mField.lookup.getDisplay(colValue, true, true);\n          if (colValue.startsWith && colValue.startsWith("<") && colValue.endsWith(">")) {\n            colValue = colValue.replace("<", "").replace(">", "");\n            var colValueTemp = mField.lookup.getDirect(colValue, true, true);\n            if (colValueTemp && colValueTemp.Name) {\n              colValue = colValueTemp.Name;\n            }\n          }\n        }\n        //\tDate\n        else if (VIS.DisplayType.IsDate(displayType)) {\n          //colValue = colValue.toString().replace(\'Z\', \'\'); //remove Universal time\n          if (displayType == VIS.DisplayType.DateTime) {\n            colValue = new Date(colValue).toLocaleString();\n          } else if (displayType == VIS.DisplayType.Date) {\n            colValue = new Date(colValue).toLocaleDateString();\n          } else {\n            colValue = new Date(colValue).toLocaleTimeString();\n          }\n        }\n        //\tYesNo\n        else if (displayType == VIS.DisplayType.YesNo) {\n          var str = colValue.toString();\n          if (mField.getIsEncryptedColumn()) str = VIS.secureEngine.decrypt(str);\n          colValue = str.equals("true"); //\tBoolean\n        }\n\n        //\tLOB \n        else colValue = colValue.toString(); //string\n\n        //\tEncrypted\n        // If field is marked encrypted, then replace all text of field with *.\n        if (mField.getIsEncryptedField()) {\n          if (colValue && colValue.length > 0) {\n            colValue = colValue.replace(/[a-zA-Z0-9-. ]/g, \'*\').replace(/[^a-zA-Z0-9-. ]/g, \'*\');\n          }\n        }\n        if (mField.getObscureType()) {\n          if (colValue && colValue.length > 0) {\n            colValue = VIS.Env.getObscureValue(mField.getObscureType(), colValue);\n          }\n        }\n      } else {\n        colValue = null;\n      }\n      return colValue;\n    };\n    var getIdentifierImage = function (mField) {\n      var value = mField.getValue();\n      value = mField.lookup.getDisplay(value, true, true);\n      if (value != null && value && value.indexOf("Images/") > -1) {\n        // Based on sequence of image in idenitifer, perform logic and display image with text\n\n        var img = value.substring(value.indexOf("Images/") + 7, value.lastIndexOf("^^"));\n        img = VIS.Application.contextUrl + "Images/Thumb140x120/" + img;\n        if (c == 0 || img.indexOf("nothing.png") > -1) {\n          value = value.replace("^^" + value.substring(value.indexOf("Images/"), value.lastIndexOf("^^") + 2), "^^^");\n          if (value.indexOf("Images/") > -1) value = value.replace(value.substring(value.indexOf("Images/"), value.lastIndexOf("^^") + 2), "^^^");\n          value = value.split("^^^");\n          var highlightChar = \'\';\n          for (var c = 0; c < value.length; c++) {\n            if (value[c].trim().length > 0) {\n              if (highlightChar.length == 0) var txt = value[c].trim().split(\' \');\n              highlightChar = txt[0].substring(0, 1).toUpper();\n              if (txt.length > 1) {\n                highlightChar += txt[txt.length - 1].substring(0, 1).toUpper();\n              } else {\n                highlightChar = txt[0].substring(0, 2).toUpper();\n              }\n              return highlightChar;\n            }\n          }\n        } else return img;\n      }\n    };\n\n    /**\r\n     * \r\n     * Return root div of header panel*/\n    this.getRoot = function () {\n      return $root;\n    };\n    this.getParent = function () {\n      return $parentRoot;\n    };\n    this.hidePanel = function () {\n      $parentRoot.hide();\n      this.isClosed = true;\n      this.evt.width = $parentRoot.width();\n      this.evt.height = $parentRoot.height();\n      this.evt.isClosed = this.isClosed;\n      this.fireSizeChanged(this.evt);\n    };\n    this.showPanel = function () {\n      $parentRoot.show();\n      this.isClosed = false;\n      this.evt.width = $parentRoot.width();\n      this.evt.height = $parentRoot.height();\n      this.evt.isClosed = this.isClosed;\n      this.fireSizeChanged(this.evt);\n    };\n    this.getIsClosed = function () {\n      return this.isClosed;\n    };\n    this.alignHorzontal = function () {\n      alignmentHorizontal = true;\n      $parentRoot.removeClass("vis-ad-w-p-header-l").addClass("vis-ad-w-p-header-t");\n      $slider.removeClass(\'fa-angle-double-left\').addClass(\'fa-angle-double-up\');\n      $slider.parent().css(\'background-color\', \'transparent\');\n      $parentRoot.css(\'flex-direction\', \'row\');\n    };\n    function eventHandling() {\n      $slider.on("click", function () {\n        var evt = $self.evt;\n        if (alignmentHorizontal) {\n          if ($parentRoot.height() == 0) {\n            $parentRoot.height($self.gTab.getHeaderHeight());\n            $root.show();\n            $parentRoot.find(\'.vis-ad-w-p-header-arrow-l\').css(\'padding\', \'\');\n            $slider.removeClass(\'fa-angle-double-down\').addClass(\'fa-angle-double-up\').removeClass(\'vis-ad-w-p-header-v\');\n            evt.height = $parentRoot.height();\n            this.isClosed = false;\n          } else {\n            $parentRoot.height(0);\n            $root.hide();\n            $parentRoot.find(\'.vis-ad-w-p-header-arrow-l\').css(\'padding\', \'0px\');\n            $slider.removeClass(\'fa-angle-double-up\').addClass(\'fa-angle-double-down\').addClass(\'vis-ad-w-p-header-v\');\n            evt.height = 0;\n            this.isClosed = true;\n          }\n        } else {\n          if ($parentRoot.width() == 0) {\n            $slider.removeClass(\'fa-angle-double-right\').addClass(\'fa-angle-double-left\').removeClass(\'vis-ad-w-p-header-h\');\n            $parentRoot.width($self.gTab.getHeaderWidth());\n            $parentRoot.find(\'.vis-ad-w-p-header-arrow-l\').css(\'padding\', \'\');\n            window.setTimeout(function () {\n              $root.show();\n            }, 50);\n            evt.width = $parentRoot.width();\n            this.isClosed = false;\n          } else {\n            $parentRoot.width(0);\n            $root.hide();\n            $parentRoot.find(\'.vis-ad-w-p-header-arrow-l\').css(\'padding\', \'0px\');\n            $slider.removeClass(\'fa-angle-double-left\').addClass(\'fa-angle-double-right\').addClass(\'vis-ad-w-p-header-h\');\n            evt.width = 0;\n            this.isClosed = true;\n          }\n        }\n        evt.isClosed = this.isClosed;\n        $self.fireSizeChanged(evt);\n      });\n    }\n    ;\n    eventHandling();\n    this.fireSizeChanged = function (evt) {\n      if (this.sizeChangedListner && this.sizeChangedListner.onSizeChanged) this.sizeChangedListner.onSizeChanged(evt);\n    };\n\n    /**\r\n     * Dispose component\r\n     * */\n    this.disposeComponent = function () {\n      $slider.remove();\n      $slider = null;\n      this.styleTag.remove();\n      this.styleTag = null;\n      this.headerItems = null;\n      $self = null;\n      this.curTab = null;\n      this.controls = null;\n      $root.remove();\n      $root = null;\n      $parentRoot.remove();\n      $parentRoot = null;\n    };\n  }\n  ;\n  HeaderPanel.prototype.init = function (gc) {\n    //Action evt listnder\n    this.aPanel = gc.getAPanel();\n    this.curTab = gc.getMTab();\n    this.curGC = gc;\n    var backColor = this.curTab.getHeaderBackColor();\n    this.setHeaderLayout(this.curTab, backColor);\n    var root = this.getRoot();\n    var $parentRoot = this.getParent();\n    var rootClass = "vis-w-p-Header-Root-v"; //Fixed Class for vertical Alignment\n    var alignmentHorizontal = this.curTab.getHeaderHorizontal();\n    var height = this.curTab.getHeaderHeight();\n    var width = this.curTab.getHeaderWidth();\n    var padding = this.curTab.getHeaderPadding();\n    var rootCustomStyle = this.headerUISettings(alignmentHorizontal, height, width, "", padding);\n    root.addClass(rootCustomStyle);\n    if (alignmentHorizontal) {\n      this.evt.isHorizontal = alignmentHorizontal;\n      this.alignHorzontal();\n      rootClass = \'vis-w-p-Header-Root-h\'; //Fixed Class for Horizontal Alignment\n    }\n    if (this.headerItems && this.headerItems.length >= 0) {\n      for (var j = 0; j < this.headerItems.length; j++) {\n        var currentItem = this.headerItems[j];\n        var rows = currentItem.HeaderTotalRow;\n        var columns = currentItem.HeaderTotalColumn;\n        var backColor = currentItem.HeaderBackColor;\n        var padding = currentItem.HeaderPadding;\n        if (!backColor) {\n          backColor = \'\';\n        }\n        if (!padding) {\n          padding = \'\';\n        }\n        var dymcClass = this.fieldGroupContainerUISettings(columns, rows, backColor, padding, j);\n        var $containerDiv = $(\'<div class="\' + rootClass + \' \' + dymcClass + \'">\');\n        root.append($containerDiv);\n\n        //Load Header Panel Items and add them to UI.\n        if (!currentItem || !currentItem.HeaderItems || currentItem.HeaderItems.length <= 0) {\n          continue;\n        }\n        this.setHeaderItems(currentItem, $containerDiv);\n      }\n    }\n    this.addStyleToDom();\n\n    // Add Header Panel to Parent Control\n    $parentRoot.append(root);\n    if (this.curTab.isHPanelNotShowInMultiRow && this.curTab.getTabLayout() != "Y") {\n      this.hidePanel();\n    }\n  };\n  HeaderPanel.prototype.addSizeChangeListner = function (lstnr) {\n    this.sizeChangedListner = lstnr;\n  };\n  HeaderPanel.prototype.evaluateStyleLogic = function (styleLogic) {\n    var arr = styleLogic.split(\',\');\n    var ret = null;\n    for (var j = 0; j < arr.length; j++) {\n      var cArr = arr[j].split("?");\n      if (cArr.length != 2) continue;\n      if (VIS.Evaluator.evaluateLogic(this, cArr[0])) {\n        ret = cArr[1];\n        break;\n      }\n    }\n    return ret;\n  };\n  HeaderPanel.prototype.getValueAsString = function (vName) {\n    var value = VIS.context.getWindowContext(this.curTab.vo.windowNo, this.curTab.vo.tabNo, vName, true);\n    if (!value) {\n      return \'\';\n    }\n    return value.toString();\n  };\n\n  /**\r\n       * Create class that include  settings to be applied on Field Group Container\r\n       * @param {any} columns\r\n       * @param {any} rows\r\n       * @param {any} backcolor\r\n       * @param {any} padding\r\n       * @param {any} itemNo\r\n       */\n  HeaderPanel.prototype.fieldGroupContainerUISettings = function (columns, rows, backcolor, padding, itemNo) {\n    var dynamicClassName = "vis-ad-w-p-fg_container_" + rows + "_" + columns + "_" + this.windowNo + "_" + itemNo;\n    this.dynamicStyle.push(" ." + dynamicClassName + " {");\n    this.dynamicStyle.push(\'grid-template-columns:repeat(\' + columns + \', 1fr);grid-template-rows:repeat(\' + rows + \', auto);padding:\' + padding + \';\' + backcolor);\n    this.dynamicStyle.push("} ");\n    return dynamicClassName;\n  };\n\n  /**\r\n       * Added dynamic style to DOM\r\n       * */\n  HeaderPanel.prototype.addStyleToDom = function () {\n    this.styleTag.type = \'text/css\';\n    this.styleTag.innerHTML = this.dynamicStyle.join(" ");\n    $($(\'head\')[0]).append(this.styleTag);\n  };\n\n  /**\r\n       * Create class that iclude  settings to create Root grid of header panel.\r\n       * @param {any} columns\r\n       * @param {any} rows\r\n       */\n  HeaderPanel.prototype.headerUISettings = function (alignmentHorizontal, height, width, backcolor, padding) {\n    var dynamicClassName = "vis-ad-w-p-header_root_" + this.windowNo;\n    this.dynamicStyle.push(" ." + dynamicClassName + " {display:flex;overflow:auto;");\n    if (alignmentHorizontal) {\n      this.dynamicStyle.push("flex:1;flex-direction:row;height: " + height + "; ");\n    } else {\n      this.dynamicStyle.push("flex-direction:column;width: " + width + ";height:calc(100vh - 94px); ");\n    }\n    this.dynamicStyle.push("padding:" + padding + ";" + backcolor);\n    this.dynamicStyle.push("} ");\n    return dynamicClassName;\n  };\n\n  /**\r\n      * Create Class that include settings that would be applied on parent of root classs.\r\n      * @param {any} width\r\n      * @param {any} backColor\r\n      * @param {any} height\r\n      * @param {any} alignment\r\n      */\n  HeaderPanel.prototype.headerParentCustomUISettings = function (backColor) {\n    var dynamicClassName = "vis-ad-w-p-header_Custom_" + this.windowNo;\n    this.dynamicStyle.push(" ." + dynamicClassName + " {flex:1;");\n    //Set background Color of Header Panel. If no color found then get color from Theme\n    //if (backColor) {\n    //    this.dynamicStyle.push(\'background: \' + backColor);\n    //}\n    //else {\n    this.dynamicStyle.push(\'background: \' + \'rgba(var(--v-c-primary));\');\n    //}\n    this.dynamicStyle.push(backColor);\n    this.dynamicStyle.push("} ");\n    return dynamicClassName;\n  };\n\n  /**\r\n  * Created CSS Class that will be applied to Field group( Parent div of ICON, label and value)\r\n  * Create row, rowspan , column, column span, and custom header style defined at field level.\r\n  * @param {any} mField\r\n  * @param {any} headerSeqNo\r\n  * @param {any} startCol\r\n  * @param {any} colSpan\r\n  * @param {any} startRow\r\n  * @param {any} rowSpan\r\n  */\n  HeaderPanel.prototype.applyCustomUISettings = function (headerSeqNo, startCol, colSpan, startRow, rowSpan, justify, alignment, backColor, fontColor, fontSize, padding) {\n    var dynamicClassName = "vis-hp-FieldGroup_" + startRow + "_" + startCol + "_" + this.windowNo + "_" + headerSeqNo;\n    this.dynamicStyle.push("." + dynamicClassName + "  {grid-column:" + startCol + " / span " + colSpan + "; grid-row: " + startRow + " / span " + rowSpan + ";");\n    this.dynamicStyle.push("justify-content:" + this.textAlignEnum[justify] + ";align-items:" + this.alignItemEnum[alignment]);\n    this.dynamicStyle.push(";font-size:" + fontSize + ";color:" + fontColor + ";padding:" + padding + ";");\n    this.dynamicStyle.push(backColor);\n    this.dynamicStyle.push("} ");\n    return dynamicClassName;\n  };\n  HeaderPanel.prototype.applyCustomUIForFieldValue = function (headerSeqNo, startCol, startRow, mField) {\n    var style = mField.getHeaderStyle();\n    var dynamicClassName = "vis-hp-FieldValue_" + startRow + "_" + startCol + "_" + this.windowNo + "_" + headerSeqNo + "_" + mField.getAD_Column_ID();\n    if (style && style.toLower().indexOf("@value::") > -1) {\n      style = getStylefromCompositeValue(style, "@value::");\n    }\n    this.dynamicStyle.push("." + dynamicClassName + "  {" + style + "} ");\n    return dynamicClassName;\n  };\n  HeaderPanel.prototype.applyCustomUIForFieldImg = function (headerSeqNo, startCol, startRow, mField) {\n    var style = mField.getHeaderStyle();\n    var dynamicClassName = "vis-hp-FieldImgValue_" + startRow + "_" + startCol + "_" + this.windowNo + "_" + headerSeqNo;\n    if (style && style.toLower().indexOf("@img::") > -1) {\n      style = getStylefromCompositeValue(style, "@img::");\n    }\n    this.dynamicStyle.push("." + dynamicClassName + "  {" + style + "} ");\n    return dynamicClassName;\n  };\n  HeaderPanel.prototype.applyCustomUIForFieldSpan = function (headerSeqNo, startCol, startRow, mField) {\n    var style = mField.getHeaderStyle();\n    var dynamicClassName = "vis-hp-FieldImgValue_" + startRow + "_" + startCol + "_" + this.windowNo + "_" + headerSeqNo;\n    if (style && style.toLower().indexOf("@span::") > -1) {\n      style = getStylefromCompositeValue(style, "@span::");\n    }\n    this.dynamicStyle.push("." + dynamicClassName + "  {" + style + "} ");\n    return dynamicClassName;\n  };\n  var getStylefromCompositeValue = function (style, requiredtype) {\n    if (style && style.toLower().indexOf(requiredtype) > -1) {\n      var styleArr = style.split("|");\n      for (var i = 0; i < styleArr.length; i++) {\n        if (styleArr[i].toLower().indexOf(requiredtype) > -1) {\n          return styleArr[i].toLower().replace(requiredtype, "").trim();\n        }\n      }\n    }\n  };\n\n  /**\r\n   * This method set justfy and alignment of Image Field\r\n   * @param {any} headerSeqNo\r\n   * @param {any} justify\r\n   * @param {any} alignItem\r\n   */\n  HeaderPanel.prototype.justifyAlignImageItems = function (headerSeqNo, justify, alignItem) {\n    var dynamicClassName = "vis-w-p-header-label-center-justify_" + headerSeqNo + "_" + this.windowNo;\n    this.dynamicStyle.push(" ." + dynamicClassName + " {justify-content:" + this.textAlignEnum[justify] + ";align-items:" + this.alignItemEnum[alignItem] + "}");\n    return dynamicClassName;\n  };\n\n  /**\r\n   * This method will be invoked on record change in window.\r\n   * */\n  HeaderPanel.prototype.navigate = function (isChild) {\n    this.isChild = isChild;\n    this.pRowData = null;\n    if (this.isChild) {\n      var self = this;\n      this.curTab.getTableModel().getRowFromDB(this.curTab.getCurrentRow(), function (data) {\n        self.pRowData = data;\n        self.setHeaderItems();\n        self.isChild = false;\n      });\n    } else {\n      this.setHeaderItems();\n      this.isChild = false;\n    }\n  };\n\n  /**\r\n   * this method will be invoked on window close.\r\n   * */\n  HeaderPanel.prototype.dispose = function () {\n    this.aPanel = null;\n    this.curTab = null;\n    this.curGC = null;\n    this.sizeChangedListner = null;\n    this.disposeComponent();\n  };\n  HeaderPanel.prototype.actionPerformed = function (action) {\n    //selfPan.actionButton(action.source);\n\n    //skip save for undo action\n    if (this.aPanel.getIsWindowAction(action.source.getField().getAD_Reference_Value_ID()) && this.aPanel.toolbarActionList.indexOf(action.source.getField().vo.DefaultValue) > -1) {\n      this.aPanel.actionPerformed(action, this);\n      return;\n    }\n\n    //skip save for undo action\n    if (!(action.source.getField().getIsAction() && action.source.getField().getAction() === "MTU")) {\n      if (this.aPanel.curTab.needSave(true, false)) {\n        this.aPanel.cmd_save(true);\n        return;\n      }\n    }\n    this.aPanel.actionPerformed(action, this);\n  };\n  HeaderPanel.prototype.cmd_save = function (manual, callback) {\n    return this.aPanel.cmd_save2(manual, this.curTab, this.curGC, this.aPanel, callback);\n  };\n  VIS.HeaderPanel = HeaderPanel;\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/aheaderpanel.js?')},"./Areas/VIS/Scripts/F20/apanel.js":()=>{eval(';\n(function (VIS, $) {\n  //****************************************************//\n  //**             APanel                             **//\n  //****************************************************//\n\n  var baseUrl = VIS.Application.contextUrl;\n  var dataSetUrl = baseUrl + "JsonData/JDataSetWithCode";\n  //executeDataSet\n  var executeDataSet = function (sql, param, callback) {\n    var async = callback ? true : false;\n    var dataIn = {\n      sql: sql,\n      page: 1,\n      pageSize: 0\n    };\n    if (param) {\n      dataIn.param = param;\n    }\n    var dataSet = null;\n    getDataSetJString(dataIn, async, function (jString) {\n      dataSet = new VIS.DB.DataSet().toJson(jString);\n      if (callback) {\n        callback(dataSet);\n      }\n    });\n    return dataSet;\n  };\n  var executeScalar = function (sql, params, callback) {\n    var async = callback ? true : false;\n    var dataIn = {\n      sql: sql,\n      page: 1,\n      pageSize: 0\n    };\n    if (params) {\n      dataIn.param = params;\n    }\n    var value = null;\n    getDataSetJString(dataIn, async, function (jString) {\n      dataSet = new VIS.DB.DataSet().toJson(jString);\n      var dataSet = new VIS.DB.DataSet().toJson(jString);\n      if (dataSet.getTable(0).getRows().length > 0) {\n        value = dataSet.getTable(0).getRow(0).getCell(0);\n      } else {\n        value = null;\n      }\n      dataSet.dispose();\n      dataSet = null;\n      if (async) {\n        callback(value);\n      }\n    });\n    return value;\n  };\n  //DataSet String\n  function getDataSetJString(data, async, callback) {\n    var result = null;\n    // data.sql = VIS.secureEngine.encrypt(data.sql);\n    $.ajax({\n      url: dataSetUrl,\n      type: "POST",\n      datatype: "json",\n      contentType: "application/json; charset=utf-8",\n      async: async,\n      data: JSON.stringify(data)\n    }).done(function (json) {\n      result = json;\n      if (callback) {\n        callback(json);\n      }\n      //return result;\n    });\n    return result;\n  }\n  ;\n  var tmpAPanel = document.querySelector(\'#vis-ad-paneltmp\').content; // $("#vis-ad-windowtmp");\n\n  /**\r\n   *\tMain Application Panel.\r\n   *  Structure:\r\n   *  HeaderPanel\r\n   *\tToolBar\r\n   *  tabPanel\r\n   *  Actionpanel\r\n   *  StatusBar\r\n   *\r\n   */\n\n  function APanel() {\n    //This variable public to Instance\n    var clsSuffix;\n    this.$parentWindow;\n    this.ctx = VIS.Env.getCtx();\n    this.curGC;\n    this.curST;\n    this.curTab;\n    this.vTabbedPane = new VIS.VTabbedPane(false);\n    this.statusBar = new VIS.StatusBar();\n    /* current Tab panel */\n    this.curWinTab = null;\n    /* Tab Index */\n    this.curTabIndex;\n    /* Sort Tab */\n    this.firstTabId = null;\n    this.DocActionVariables = {};\n    this.DocActionVariables.STATUS_COMPLETED = "CO";\n    this.DocActionVariables.STATUS_CLOSED = "CL";\n    this.DocActionVariables.STATUS_VOIDED = "VO";\n    this.DocActionVariables.STATUS_REVERSED = "RE";\n    this.toolbarCreated = false;\n    this.errorDisplayed = false;\n    this.isPersonalLock = VIS.MRole.getIsPersonalLock();\n    this.isShowSharedRecord = VIS.MRole.getIsShowSharedRecord();\n    this.log = VIS.Logging.VLogger.getVLogger("APanel");\n    this.isSummaryVisible = false;\n    this.lastView = "";\n    this.advanceWhere = "";\n    this.filterWhere = "";\n    this.advanceFlag = false;\n    this.filterFlag = false;\n    this.isAdvancesearch = false;\n    this.isFilter = false;\n    //private \n    var $divContentArea, $ulNav, $ulToobar, $divStatus, $ulTabControl, $divTabControl, $divTabNav;\n    var $txtSearch, $imgSearch, $btnClrSearch, $imgdownSearch, $btnFilter;\n    var $root, $busyDiv;\n    var $ulRightBar2; //right bar\n    var $btnlbToggle, $ulactionbar, $uldynactionbar, $divlbMain, $divlbNav; //right bar\n    var $hdrPanel = "",\n      $divIncludeTab,\n      $divHeaderNav;\n    var $fltrPanel = "";\n    var $fltrPnlBody = "";\n    var $btnFPClose = "";\n    var $tabPanel = null;\n    var $spnAdvSearch = null;\n    var $btnClose = null;\n    var $spnTitle = null;\n    var $spanSetting = null;\n    var $divRightbar = null;\n    this.excludeFromShare = [\'ad_org\', \'m_warehouse\', \'ad_sharerecordorg\'];\n    /***END Tab panel**/\n\n    var tabItems = [],\n      tabLIObj = {};\n    this.defaultSearch = true;\n    this.isAutoCompleteOpen = false;\n    this.instructionPop = {};\n    this.instructionPop[this.ACTION_NAME_NEW] = false;\n    this.tabStack = []; // Maintain tab and view change history;\n\n    this.toolbarActionList = [\'UNO\', \'NRD\', \'SAR\', \'DRD\', \'RQY\', \'RET\', \'PRT\', \'BVW\']; // ToolBar Action\n\n    function initComponenet() {\n      var clone = document.importNode(tmpAPanel, true);\n      $root = $(clone.querySelector(".vis-ad-w-p"));\n      $busyDiv = $root.find(".vis-ad-w-p-busy"); // busy indicator\n      $landingpage = $root.find(".vis-landingpage");\n      $windowpage = $root.find(".vis-windowpage");\n\n      //tolbar and search \n      $ulToobar = $root.find(".vis-ad-w-p-tb-lc"); // $("<ul class=\'vis-appsaction-ul\'>"); //toolbar item list\n      //navigation and tab control\n      $ulNav = $root.find(".vis-ad-w-p-nav-btns"); // $("<ul class=\'vis-appsaction-ul vis-apanel-nav-ul\'>"); //navigation list\n      $ulTabControl = $root.find(".vis-ad-w-p-t-c-tc");\n      ; // $("<ul class=\'vis-appsaction-ul vis-apanel-tabcontrol-ul\'>");//tab control\n      $divTabControl = $root.find(".vis-ad-w-p-t-c"); // $("<div class=\'vis-apanel-tabcontrol\'>").append($ulTabControl);\n      $divTabNav = $root.find(".vis-ad-w-p-tabs-oflow").hide(); // $("<div class=\'vis-apanel-tab-oflow\'>").hide();\n      $divHeaderNav = $root.find(".vis-ad-w-p-tabs-t");\n      $divRightbar = $root.find(".vis-ad-w-p-action").hide();\n      $btnlbToggle = $root.find(".vis-ad-w-p-tb-rc-abar").hide();\n      $ulactionbar = $root.find(\'.vis-ad-w-p-a-m-slist\'); // $ ("<ul class=\'vis-apanel-lb-ul\'>");\n      $uldynactionbar = $root.find(\'.vis-ad-w-p-a-m-dlist\'); // $ ("<ul class=\'vis-apanel-lb-ul\'>");\n\n      $divlbMain = $root.find(\'.vis-ad-w-p-a-main\'); //  ( \'<div class="vis-ad-w-p-a-main">\');\n      $divlbNav = $root.find(\'.vis-ad-w-p-a-oflow\'); // ("<div class=\'vis-ad-w-p-a-oflow\'>").hide();\n\n      $hdrPanel = $root.find(".vis-ad-w-p-header-l");\n      $divIncludeTab = $root.find(".vis-ad-w-p-center-inctab");\n      $ulRightBar2 = $root.find(".vis-ad-w-p-tb-rc-a-list");\n      $divContentArea = $root.find(".vis-ad-w-p-center-view");\n\n      //StatusBar\n      //$divStatus = $("<div class=\'vis-apanel-statusbar\'>").hide();\n      $divStatus = $root.find(".vis-ad-w-p-status");\n      $tabPanel = $root.find(\'.vis-ad-w-p-actionpanel-r\');\n      /********* END Tab Panels **************/\n\n      //Search \n      $txtSearch = $root.find(".vis-ad-w-p-tb-s-input");\n      $btnClrSearch = $root.find(".vis-ad-w-p-tb-s-icon");\n      $imgdownSearch = $root.find(".vis-ad-w-p-tb-s-icon-down");\n      // $imgFilter = $root.find(".fa-filter");\n\n      $txtSearch.attr(\'placeholder\', VIS.Msg.getMsg("Search"));\n      // Mohit - Shortcut as title.\n      $imgSearch = $root.find(".vis-ad-w-p-tb-s-btn");\n      //Advance Search \n      $spnAdvSearch = $root.find(".vis-ad-w-p-tb-advsrch");\n\n      //close \n      $btnClose = $root.find(".vis-ad-w-p-t-close");\n      $spnTitle = $root.find(\'.vis-ad-w-p-t-name h5\');\n\n      //Filter Panel\n      $btnFilter = $root.find("span.vis-ad-w-p-tb-rc-action");\n      $fltrPanel = $root.find(\'.vis-ad-w-p-filterpnl\').hide();\n      $spanSetting = $root.find(\'.vis-ad-w-p-setting\');\n      $fltrPnlBody = $fltrPanel.find(\'.vis-fp-bodywrap\');\n      $fltrPanel.find(\'.vis-fp-header h4\').text(VIS.Msg.getMsg("Filter"));\n      $btnFPClose = $fltrPanel.find(\'.vis-fp-header .vis-mark\');\n      setToolTipMessages();\n      eventHandling();\n    }\n    ;\n    var setToolTipMessages = function () {\n      $btnFilter.attr(\'title\', VIS.Msg.getMsg(\'FilterRecord\'));\n      $spanSetting.attr(\'title\', VIS.Msg.getMsg(\'Settings\'));\n    };\n    var self = this;\n    var eventHandling = function () {\n      $root.on(\'click\', function (e) {\n        $root.find(\'.vis-window-instruc-overlay-new\').remove();\n        $root.find(\'.vis-window-instruc-overlay-new-li\').removeClass(\'.vis-window-instruc-overlay-new-li\');\n        if ($(e.target).is(\':focus\')) {\n          self.compositViewChangeSave(e);\n        }\n      });\n      $landingpage.on(\'click\', function () {\n        self.showLandingPage(true);\n      });\n      $windowpage.on(\'click\', function () {\n        self.showLandingPage(false);\n      });\n    };\n    this.createSearchAutoComplete = function (text) {\n      if ($txtSearch) {\n        var $selfpanel = this;\n        $txtSearch.autocomplete({\n          select: function (ev, ui) {\n            self.defaultSearch = false;\n            if (self.isSummaryVisible) {\n              self.curTab.setShowSummaryNodes(true);\n            } else {\n              self.curTab.setShowSummaryNodes(false);\n            }\n            var query = new VIS.Query(self.curTab.getTableName(), false);\n            self.curTab.searchText = ui.item.value;\n            self.curTab.userQueryID = ui.item.id;\n            if (ui.item.code != VIS.Msg.getMsg("All")) {\n              //query.addRestriction(ui.item.code);\n              self.curGC.searchCode = ui.item.code;\n            }\n            //\tHistory\n\n            //Set Page value to 1\n            //self.curTab.getTableModel().setCurrentPage(1);\n            ////\tConfirmed query\n            //self.curTab.setQuery(query);\n            //self.curGC.query(0, 0, false);   //  autoSize\n            self.curGC.applyFilters(query);\n            $btnClrSearch.css("visibility", "visible");\n            $imgdownSearch.css("visibility", "visible").css("transform", "rotate(360deg)");\n            ev.stopPropagation();\n          },\n          minLength: 0,\n          open: function (ev, ui) {\n            $selfpanel.isAutoCompleteOpen = true;\n          },\n          close: function (event, ui) {\n            $imgdownSearch.css("transform", "rotate(360deg)");\n            window.setTimeout(function () {\n              $selfpanel.isAutoCompleteOpen = false;\n            }, 400);\n          },\n          source: []\n        });\n        $txtSearch.autocomplete().data(\'ui-autocomplete\')._renderItem = function (ul, item) {\n          var span = null;\n          if ($selfpanel.curTab.getTabLevel() == 0) {\n            if (item.defaultids && item.userid > 0) {\n              span = $("<span title=\'" + VIS.Msg.getMsg("DefaultSearch") + "\'  data-id=\'" + item.id + "\' class=\'VIS-winSearch-defaultIcon\'></span>");\n            } else {\n              span = $("<span title=\'" + VIS.Msg.getMsg("MakeDefaultSearch") + "\' data-id=\'" + item.id + "\' class=\'VIS-winSearch-NonDefaultIcon\'></span>");\n            }\n          } else {\n            span = $("<span title=\'" + VIS.Msg.getMsg("DefaultSearch") + "\'  data-id=\'" + item.id + "\'></span>");\n          }\n          var li = $("<li>").append($("<a style=\'display:block\' title=\'" + item.title + "\'>" + item.label + "</a>").append(span)).appendTo(ul);\n          span.on("click", function (e) {\n            var uQueryID = $(this).data(\'id\');\n            $.ajax({\n              url: VIS.Application.contextUrl + "JsonData/InsertUpdateDefaultSearch",\n              dataType: "json",\n              data: {\n                AD_Tab_ID: self.curTab.getAD_Tab_ID(),\n                AD_Table_ID: self.curTab.getAD_Table_ID(),\n                AD_User_ID: self.ctx.getAD_User_ID(),\n                AD_UserQuery_ID: uQueryID\n              },\n              success: function (data) {},\n              error: function (er) {\n                console.log(er);\n              }\n            });\n          });\n          return li;\n        };\n      }\n    };\n    function finishLayout() {\n      $divHeaderNav.show();\n      $divStatus.show();\n      if (VIS.Application.isMobile) {\n        $divlbNav.hide();\n        $divlbMain.addClass("vis-ad-w-p-a-main-mob");\n        $divTabControl.addClass("vis-ad-w-p-t-c-mob");\n      }\n      self.vTabbedPane.finishLayout(VIS.Application.isMobile);\n      if (self.gridWindow.getIsHideTabLinks()) {\n        $divHeaderNav.find(\'*\').css(\'visibility\', \'hidden\');\n      }\n      setToolTipMessages();\n    }\n    ;\n    /* Tool bar */\n\n    initComponenet();\n    $divStatus.append(this.statusBar.getRoot()); //Status bar\n\n    this.hideToolbar = function (hide) {\n      if (hide) $ulToobar.find(\'*\').hide();else $ulToobar.find(\'*\').show();\n    };\n    this.hideTabLinks = function (hide) {\n      if (hide) $divHeaderNav.find(\'*\').css(\'visibility\', \'hidden\');else $divHeaderNav.find(\'*\').css(\'visibility\', \'visible\');\n    };\n    this.hideActionbar = function (hide) {\n      if (hide) {\n        $btnlbToggle.hide();\n        $divRightbar.hide();\n      } else {\n        $btnlbToggle.show();\n        $divRightbar.show();\n      }\n    };\n    this.setSize = function (height, width) {\n      return;\n    };\n    /**\r\n     * Check given refrence is window action.\r\n     * @param {any} refrenceValue\r\n     */\n    this.getIsWindowAction = function (refrenceValue) {\n      if (refrenceValue == 435) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    //Action Perormed\n    var onAction = function (action) {\n      self.actionPerformed(action);\n    };\n\n    //tabAction\n    this.onTabChange = function (action) {\n      self.tabActionPerformed(action);\n    };\n    this.statusBar.onComboChange = function (index) {\n      self.setBusy(true);\n      //console.log(index);\n      setTimeout(function () {\n        self.curGC.navigatePageExact(index + 1);\n        if (!self.curGC.onDemandTree) {\n          self.setBusy(false);\n        }\n      }, 100);\n    };\n    this.createToolBar = function () {\n      //1. toolbar action\n      this.aRefresh = this.addActions(this.ACTION_NAME_REFRESH, null, true, true, false, onAction, null, "Shct_Refresh", "Refresh");\n      this.aDelete = this.addActions(this.ACTION_NAME_DELETE, null, true, true, false, onAction, null, "Shct_Delete", "Delete");\n      this.aNew = this.addActions(this.ACTION_NAME_NEW, null, true, false, false, onAction, null, "Shct_New", "New");\n      this.aIgnore = this.addActions("UNO", null, true, true, false, onAction, null, "Shct_Ignore", "Ignore");\n      this.aSave = this.addActions("SAR", null, true, true, false, onAction, null, "Shct_Save", "Save");\n      this.aFind = this.addActions("Find", null, true, true, false, onAction, null, "Shct_Find");\n      this.aInfo = this.addActions("Info", null, true, true, false, onAction, null, "Shct_Info");\n      this.aReport = this.addActions("RET", null, true, true, false, onAction, null, "Shct_Report", "Report");\n      this.aPrint = this.addActions("PRT", null, true, true, false, onAction, null, "Shct_Print", "Print");\n      // this.aBatchUpdate = this.addActions("BatchUpdate", null, true, true, false, onAction, null, "Shct_BatchUpdate");\n\n      //Ndw Back button\n      this.aBack = this.addActions("BVW", null, true, true, false, onAction, null, "Shct_Back", "back-arrow");\n      //check toolbar\n      // if (!this.gridWindow.getIsHideToolbar()) {\n      $ulToobar.append(this.aBack.getListItm());\n      $ulToobar.append(this.aIgnore.getListItm());\n      $ulToobar.append(this.aNew.getListItm());\n      $ulToobar.append(this.aDelete.getListItm());\n      $ulToobar.append(this.aSave.getListItm());\n      $ulToobar.append(this.aRefresh.getListItm());\n      $ulToobar.append(this.aReport.getListItm());\n      $ulToobar.append(this.aPrint.getListItm());\n      // $ulToobar.append(this.aBatchUpdate.getListItm());\n      // }\n\n      if (!this.gridWindow.getIsHideToolbar()) {\n        $ulToobar.find("LI").hide();\n      }\n\n      //lakhwinder\n      //$ulToobar.append(this.aInfo.getListItm());\n\n      // $ulToobar.append(new VIS.AppsAction().getSeprator(false, true));\n      //$ulToobar.append(this.aFind.getListItm());\n\n      $spnAdvSearch.append(this.aFind.getListItm());\n\n      // Mohit - Shortcut as title.\n      ////2.Navigation sub-tollbar\n      this.aPrevious = this.addActions(this.ACTION_NAME_PREV, null, true, true, true, onAction, null, "Shct_PrevRec");\n      this.aFirst = this.addActions(this.ACTION_NAME_FIRST, null, true, true, true, onAction, null, "Shct_FirstRec");\n      this.aLast = this.addActions(this.ACTION_NAME_LAST, null, true, true, true, onAction, null, "Shct_LastRec");\n      this.aNext = this.addActions(this.ACTION_NAME_NEXT, null, true, true, true, onAction, null, "Shct_NextRec");\n      this.aMulti = this.addActions("Multi", null, false, true, true, onAction, false, "Shct_MultiRow", "Multix");\n      this.aSingle = this.addActions("Single", null, false, true, true, onAction, false, "Shct_MultiRow", "Multi");\n      this.aCard = this.addActions("Card", null, false, true, true, onAction, false, "Shct_CardView", "card-o");\n      this.aMap = this.addActions("Map", null, false, true, true, onAction);\n      $ulNav\n      //.append(this.aFirst.getListItm())\n      .append(this.aPrevious.getListItm()).append(this.aNext.getListItm());\n      //.append(this.aLast.getListItm());\n      $ulNav.append(this.aMulti.getListItm());\n      $ulNav.append(this.aSingle.getListItm());\n      $ulNav.append(this.aCard.getListItm());\n      $ulNav.append(this.aMap.getListItm().hide());\n\n      // Mohit - Shortcut as title.\n      ///3. bottom toolbar \n      this.aPageUp = this.addActions(this.ACTION_NAME_PAGEUP, null, true, true, true, onAction, null, "Shct_PageUp");\n      this.aPageFirst = this.addActions("PageFirst", null, true, true, true, onAction, null, "Shct_PageFirst");\n      this.aPageLast = this.addActions("PageLast", null, true, true, true, onAction, null, "Shct_PageLast");\n      this.aPageDown = this.addActions(this.ACTION_NAME_PAGEDOWN, null, true, true, true, onAction, null, "Shct_PageDown");\n\n      //Action Bar[] \n\n      var mWindow = this.gridWindow;\n      actionItemCount_Right = 0;\n      if (!mWindow.getIsHideActionbar()) {\n        //hide action bat toggle \n        $btnlbToggle.show();\n        $divRightbar.show();\n      }\n      this.aBatchUpdate = this.addActions("BUE", null, false, false, false, onAction); //1\n      if (VIS.Env.getCtx().getContext(\'#ENABLE_BATCHUPDATE\') === \'Y\' && this.ctx.getAD_User_ID() == 100) {\n        this.aBatchUpdate.setTextDirection("r");\n        $ulactionbar.append(this.aBatchUpdate.getListItmIT());\n      }\n      if (mWindow.getIsAppointment()) {\n        this.aAppointment = this.addActions("APT", null, false, false, false, onAction); //1\n        this.aAppointment.setTextDirection("r");\n        $ulactionbar.append(this.aAppointment.getListItmIT());\n      }\n      if (mWindow.getIsTask()) {\n        this.aTask = this.addActions("TAK", null, false, false, false, onAction); //1\n        this.aTask.setTextDirection("r");\n        $ulactionbar.append(this.aTask.getListItmIT());\n      }\n      if (mWindow.getIsEmail()) {\n        this.aEmail = this.addActions("EML", null, false, false, false, onAction); //1\n        this.aEmail.setTextDirection("r");\n        $ulactionbar.append(this.aEmail.getListItmIT());\n      }\n      if (mWindow.getIsLetter()) {\n        this.aLetter = this.addActions("LER", null, false, false, false, onAction); //1\n        this.aLetter.setTextDirection("r");\n        $ulactionbar.append(this.aLetter.getListItmIT());\n      }\n      if (mWindow.getIsSms()) {\n        this.aSms = this.addActions("SMS", null, false, false, false, onAction); //1\n        this.aSms.setTextDirection("r");\n        $ulactionbar.append(this.aSms.getListItmIT());\n      }\n      if (mWindow.getIsFaxEmail()) {\n        this.aFaxEmail = this.addActions("FaxEmail", null, false, false, false, onAction); //1\n        this.aFaxEmail.setTextDirection("r");\n        $ulactionbar.append(this.aFaxEmail.getListItmIT());\n      }\n      //add\n      if (mWindow.getIsChat()) {\n        this.aChat = this.addActions(this.ACTION_NAME_CHAT, null, false, false, false, onAction, true); //1\n        this.aChat.setTextDirection("r");\n        $ulactionbar.append(this.aChat.getListItmIT());\n      }\n      if (mWindow.getIsAttachment()) {\n        this.aAttachment = this.addActions("ATT", null, false, false, false, onAction, true); //1\n        this.aAttachment.setTextDirection("r");\n        $ulactionbar.append(this.aAttachment.getListItmIT());\n      }\n      if (mWindow.getIsHistory()) {\n        this.aHistory = this.addActions("HIY", null, false, false, false, onAction); //1\n        this.aHistory.setTextDirection("r");\n        $ulactionbar.append(this.aHistory.getListItmIT());\n      }\n      if (mWindow.getIsCheckRequest()) {\n        this.aRequest = this.addActions("CRT", null, true, false, false, onAction);\n        this.aRequest.setTextDirection("r");\n        $ulactionbar.append(this.aRequest.getListItmIT());\n      }\n      if (VIS.AEnv.getIsWorkflowProcess()) {\n        this.aWorkflow = this.addActions("Workflow", null, true, false, false, onAction);\n        this.aWorkflow.setTextDirection("r");\n        $ulactionbar.append(this.aWorkflow.getListItmIT());\n      }\n      if (mWindow.getIsCopyReocrd()) {\n        this.aCopy = this.addActions("CRD", null, false, false, false, onAction);\n        this.aCopy.setTextDirection("r");\n        $ulactionbar.append(this.aCopy.getListItmIT());\n      }\n      if (mWindow.getIsSubscribedRecord()) {\n        this.aSubscribe = this.addActions("SRD", null, true, false, false, onAction, true);\n        this.aSubscribe.setTextDirection("r");\n        $ulactionbar.append(this.aSubscribe.getListItmIT());\n      }\n      if (mWindow.getIsZoomAcross()) {\n        this.aZoomAcross = this.addActions("ZAS", null, true, false, false, onAction);\n        this.aZoomAcross.setTextDirection("r");\n        $ulactionbar.append(this.aZoomAcross.getListItmIT());\n      }\n      // VIS0008 Check applied if access is there for DMS form to this Role then only display these actions for the window\n      if (VIS.MRole.getFormAccess(this.ctx.getContextAsInt("DMS_Form_ID"))) {\n        if (mWindow.getIsCreatedDocument()) {\n          this.aCreateDocument = this.addActions("CDT", null, false, false, false, onAction); //1\n          this.aCreateDocument.setTextDirection("r");\n          $ulactionbar.append(this.aCreateDocument.getListItmIT());\n        }\n        if (mWindow.getIsUploadedDocument()) {\n          this.aUploadDocument = this.addActions("UDT", null, false, false, false, onAction); //1\n          this.aUploadDocument.setTextDirection("r");\n          $ulactionbar.append(this.aUploadDocument.getListItmIT());\n        }\n        if (mWindow.getIsViewDocument()) {\n          this.aViewDocument = this.addActions("VDT", null, false, false, false, onAction, true); //1\n          this.aViewDocument.setTextDirection("r");\n          $ulactionbar.append(this.aViewDocument.getListItmIT());\n        }\n        if (mWindow.getIsAttachDocumentFrom()) {\n          this.aAttachFrom = this.addActions("ADF", null, false, false, false, onAction, true); //1\n          this.aAttachFrom.setTextDirection("r");\n          $ulactionbar.append(this.aAttachFrom.getListItmIT());\n        }\n        //Added by Anil Kumar as Discussed with Vinay Bhatt\n        if (mWindow.getIsGenerateAttachmentCode()) {\n          this.aGenerateAttachmentCode = this.addActions("CAC", null, false, false, false, onAction); //1\n          this.aGenerateAttachmentCode.setTextDirection("r");\n          $ulactionbar.append(this.aGenerateAttachmentCode.getListItmIT());\n        }\n      }\n      if (mWindow.getIsMarkToExport()) {\n        this.aMarkToExport = this.addActions("MTE", null, false, false, false, onAction, true); //1\n        this.aMarkToExport.setTextDirection("r");\n        $ulactionbar.append(this.aMarkToExport.getListItmIT());\n      }\n      if (mWindow.getIsImportMap()) {\n        this.aImportMap = this.addActions("IMP", null, false, false, false, onAction); //1\n        this.aImportMap.setTextDirection("r");\n        $ulactionbar.append(this.aImportMap.getListItmIT());\n      }\n      if (mWindow.getIsArchive()) {\n        //this.aArchive = this.addActions("Archive", null, false, false, false, onAction); //1\n        //$ulactionbar.append(this.aArchive.getListItmIT());\n      }\n      if (mWindow.getIsAttachmail()) {\n        //this.aEmailAttach = this.addActions("EmailAttach", null, false, false, false, onAction); //1\n        //$ulactionbar.append(this.aEmailAttach.getListItmIT());\n      }\n      if (mWindow.getIsRoleCenterView()) {\n        //this.aRoleCenterView = this.addActions("RoleCenterView", null, false, false, false, onAction); //1\n        //$ulactionbar.append(this.aRoleCenterView.getListItmIT());\n      }\n      if (this.isPersonalLock) {\n        this.aLock = this.addActions("Lock", null, true, false, false, onAction, true);\n        this.aLock.setTextDirection("r");\n        $ulactionbar.append(this.aLock.getListItmIT());\n        this.aRecAccess = this.addActions("RecordAccess", null, true, false, false, onAction, true);\n        this.aRecAccess.setTextDirection("r");\n        $ulactionbar.append(this.aRecAccess.getListItmIT());\n      }\n      if (this.isShowSharedRecord && mWindow.getWindowType() == \'M\') {\n        this.aSharedRecord = this.addActions(this.ACTION_NAME_SHAREDREC, null, true, false, false, onAction, true);\n        this.aSharedRecord.setTextDirection("r");\n        $ulactionbar.append(this.aSharedRecord.getListItmIT());\n      } else {\n        this.isShowSharedRecord = false;\n      }\n      this.aPreference = this.addActions("Preference", null, false, false, true, onAction); //2\n      /////5 Right bar\n      if (VIS.MRole.getDefault().getIsShowPreference()) {\n        $ulRightBar2.append(this.aPreference.getListItmIT());\n      }\n      this.aHelp = this.addActions("Help", null, true, false, true, onAction);\n      $ulRightBar2.append(this.aHelp.getListItmIT());\n      this.aCardDialog = this.addActions("CardDialog", null, true, false, true, onAction);\n      $ulRightBar2.append(this.aCardDialog.getListItmIT());\n      this.aShowSummaryLevel = this.addActions("ShowSummaryNodes", null, true, false, true, onAction, true);\n      $ulRightBar2.append(this.aShowSummaryLevel.getListItmIT());\n      mWindow = null;\n\n      //this.statusBar.setPageItem(this.aPageFirst.getListItm());\n      this.statusBar.setPageItem(this.aPageUp.getListItm());\n      this.statusBar.setComboPage();\n      this.statusBar.setPageItem(this.aPageDown.getListItm());\n      //this.statusBar.setPageItem(this.aPageLast.getListItm());\n      this.statusBar.render();\n      this.toolbarCreated = true;\n      this.setRightBarVisibility = function (hide) {\n        if (hide) $($ulRightBar2.parent()[0]).removeClass(\'show\');\n        //else\n        //    $ulRightBar2.parent().addclass(\'show\')\n      };\n      /* Set Tool Bar */\n      finishLayout();\n    };\n    this.setDynamicActions = function () {\n      if (this.curGC == null) return;\n      $uldynactionbar.css(\'display\', \'none\');\n      var index = 0;\n      var actions = [];\n      if (this.curGC.leftPaneLinkItems.length > 0) {\n        actions = this.curGC.leftPaneLinkItems;\n        for (index = 0; index < actions.length; index++) {\n          $uldynactionbar.append(actions[index].getControl());\n        }\n      }\n      index = 0;\n      if (this.curGC.rightPaneLinkItems.length > 0) {\n        actions = this.curGC.rightPaneLinkItems;\n        for (index = 0; index < actions.length; index++) {\n          $uldynactionbar.append(actions[index].getControl());\n        }\n      }\n      if (this.curGC.leftPaneLinkItems.length > 0 || this.curGC.rightPaneLinkItems.length > 0) {\n        $uldynactionbar.css(\'display\', \'flex\');\n        this.updateLabelVisbility();\n      }\n      actions = null;\n    };\n\n    //privilized function\n    this.getRoot = function () {\n      return $root;\n    };\n    this.getLayout = function () {\n      return $divContentArea;\n    };\n    this.getIncludedEmptyArea = function () {\n      return $divIncludeTab;\n    };\n    /*left bar */\n\n    this.getParentDetailPane = function () {\n      return $hdrPanel;\n    };\n    this.getFilterPane = function () {\n      return $fltrPnlBody;\n    };\n\n    /**Clear search box\r\n     * */\n    this.clearSearchBox = function () {\n      $btnClrSearch.css("visibility", "hidden");\n      self.defaultSearch = true;\n      self.clearSearchText();\n      $txtSearch.val("");\n    };\n\n    /**\r\n    *   Show OR hide tab panel depending on, if linked tab panel or not\r\n    *   @param {boolean} show - show tab panel if true\r\n    */\n    this.showTabPanel = function (show) {\n      if (show) {\n        //$tabpanel.empty();\n        var clsName = \'vis-ad-w-p-center-flow-\';\n        var cls2 = "vis-ad-w-p-actionpanel-";\n\n        //if (this.curTab.getIsTPBottomAligned()) {\n        //    clsName = "vis-ad-w-p-center-flow-b";\n        //    cls2 = "vis-ad-w-p-actionpanel-b";\n        //}\n\n        clsSuffix = this.curTab.getIsTPBottomAligned() ? \'b\' : \'r\';\n        var clsSuffixOld = this.curTab.getIsTPBottomAligned() ? \'r\' : \'b\';\n        if (!$tabPanel.hasClass(cls2 + clsSuffix)) {\n          $tabPanel.parent().removeClass(clsName + clsSuffixOld).addClass(clsName + clsSuffix);\n          $tabPanel.removeClass();\n          $tabPanel.addClass(cls2 + clsSuffix);\n        }\n        if (this.curGC) $tabPanel.append(this.curGC.getTabPanel());\n        $tabPanel.css({\n          "display": "grid"\n        });\n        //if (this.curGC.getIsSingleRow() && clsSuffix == \'b\') {\n        //    this.getLayout().removeClass(\'vis-ad-w-p-center-view-height\');\n        //    this.getLayout().find(\'.vis-ad-w-p-vc-editview\').css("position", "unset");\n        //}\n      } else {\n        $tabPanel.css({\n          "display": "none"\n        });\n      }\n    };\n    this.showFilterPanel = function (back) {\n      //$fltrPanel.empty();\n      if (this.curGC) {\n        $fltrPnlBody.append(this.curGC.getFilterPanel());\n        this.curGC.initFilterUI();\n        if (!back) {\n          this.curGC.refreshFilterPanelData();\n        }\n      } else {\n        $fltrPanel.hide();\n      }\n    };\n    this.setTabPanelclass = function (clss) {};\n\n    /* END Set Tab Panel Icons */\n\n    this.getTabControl = function () {\n      return $ulTabControl;\n    };\n    this.getLinkControl = function () {\n      return " New Link Control for header Composite";\n    };\n\n    ///*tabcontrol */\n    this.setTabControl = function (tabs) {\n      tabItems = tabs;\n      for (var i = 0; i < tabs.length; i++) {\n        var li = tabs[i].getListItm();\n        tabLIObj[tabItems[i].action] = li;\n        $ulTabControl.append(li);\n      }\n      if ($ulTabControl.width() > $divTabControl.width()) {\n        if (!VIS.Application.isMobile) $divTabNav.show();\n      }\n    };\n    this.setTabNavigation = function () {\n      if ($ulTabControl.width() > $divTabControl.width()) {\n        if (!VIS.Application.isMobile) $divTabNav.show();\n      } else {\n        $divTabNav.hide();\n      }\n    };\n    this.setSelectedTab = function (id) {\n      if (this.selectedTab) this.selectedTab.removeClass("vis-apanel-tab-selected");\n      this.selectedTab = tabLIObj[id];\n      this.selectedTab.addClass("vis-apanel-tab-selected");\n    };\n    this.navigateThroghtShortcut = function (forward) {\n      var next = null;\n      if (forward) {\n        next = $ulTabControl.find(\'.vis-apanel-tab-selected\').nextAll("[style=\'opacity: 1;\']:first");\n        if (!next || next.length <= 0) {\n          next = $ulTabControl.children().first();\n        }\n      } else {\n        next = $ulTabControl.find(\'.vis-apanel-tab-selected\').prevAll("[style=\'opacity: 1;\']:first");\n        if (!next || next.length <= 0) {\n          next = $ulTabControl.children().last();\n        }\n      }\n      //$ulTabControl.find(\'.vis-apanel-tab-selected\').removeClass(\'vis-apanel-tab-selected\');\n      //next.addClass(\'vis-current-nav-window\').focus();\n      next.trigger(\'click\');\n    };\n    this.setBusy = function (busy, focus) {\n      this.isLocked = busy;\n      if (busy) {\n        $busyDiv[0].style.visibility = \'visible\'; // .show();\n      } else {\n        //$busyDiv.hide();\n        $busyDiv[0].style.visibility = \'hidden\';\n        if (focus) {\n          //void 0;\n        }\n      }\n    };\n    this.startFilterPanel = function (hide) {\n      if (!hide) {\n        $fltrPanel.show();\n        this.refresh();\n      } else {\n        $fltrPanel.hide();\n        this.refresh();\n      }\n    };\n    this.getTabSuffix = function () {\n      return clsSuffix;\n    };\n\n    /**\r\n     * Handle Landing page hide/show and manage event\r\n     * @param {any} show\r\n     * @param {any} actionParams\r\n     */\n    this.showLandingPage = function (show, actionParams) {\n      if (show) {\n        this.landingPage.getRoot().show();\n        this.getRoot().hide();\n      } else {\n        this.landingPage.getRoot().hide();\n        this.getRoot().show();\n        //tab selection\n        this.vTabbedPane.restoreTabChange();\n        if (actionParams) this.tabActionPerformed(this.vTabbedPane.getNextTabId(actionParams.TabIndex), "", "", actionParams);else {\n          this.curTab.setQuery(null);\n          this.tabActionPerformed(this.firstTabId);\n        }\n        //this.setTabNavigation();\n      }\n    };\n    $btnFilter.on("click", function (e) {\n      self.startFilterPanel();\n    });\n    $btnFPClose.on("click", function (e) {\n      self.startFilterPanel(true);\n    });\n    $divTabNav.on("click", function (e) {\n      e.stopPropagation();\n      var dir = $(e.target).data(\'dir\');\n      if (!dir) return;\n      var dWidth = $divTabControl.width();\n      var ulWidth = $ulTabControl.width();\n      var cPos = $divTabControl.scrollLeft();\n      var offSet = Math.ceil(dWidth / 2);\n      //console.log(dWidth + "--" + ulWidth + \'---\' + cPos);\n      var s = 0;\n      if (VIS.Application.isRTL) {\n        if (dir == \'r\') {\n          dir = \'b\';\n        } else if (dir == \'rl\') {\n          dir = \'bf\';\n        } else if (dir == \'bf\') {\n          dir = \'rl\';\n        } else if (dir == \'b\') {\n          dir = \'r\';\n        }\n      }\n      if (dir == \'r\') {\n        if (cPos + offSet >= ulWidth - offSet && !VIS.Application.isRTL) return;\n        var ms = ulWidth - dWidth;\n        s = cPos + offSet;\n        $divTabControl.animate({\n          scrollLeft: s > ms ? ms : s\n        }, 1000);\n      } else if (dir == \'b\') {\n        if (VIS.Application.isRTL) {\n          s = cPos - offSet;\n          $divTabControl.animate({\n            scrollLeft: s > 0 ? 0 : s\n          }, 1000);\n        } else {\n          if (cPos == 0) return;\n          s = cPos - offSet;\n          $divTabControl.animate({\n            scrollLeft: s < 0 ? 0 : s\n          }, 1000);\n          //$divTabControl.scrollLeft(cPos - offSet);\n        }\n      }\n      if (dir == \'rl\') {\n        if (cPos + offSet >= ulWidth - offSet) return;\n        if (VIS.Application.isRTL) {\n          $divTabControl.animate({\n            scrollLeft: 0\n          }, 500);\n        } else {\n          var ms = ulWidth - dWidth;\n          //s = cPos + offSet;\n          $divTabControl.animate({\n            scrollLeft: ms\n          }, 500);\n        }\n      } else if (dir == \'bf\') {\n        if (VIS.Application.isRTL) {\n          var ms = ulWidth - dWidth;\n          //s = cPos + offSet;\n          $divTabControl.animate({\n            scrollLeft: -ms\n          }, 500);\n        } else {\n          if (cPos == 0) return;\n          s = cPos - offSet;\n          $divTabControl.animate({\n            scrollLeft: 0\n          }, 500);\n          //$divTabControl.scrollLeft(cPos - offSet);\n        }\n      }\n    });\n    $divlbNav.on("click", function (e) {\n      e.stopPropagation();\n      var dir = $(e.target).data(\'dir\');\n      if (!dir) return;\n      var dHeight = $divlbMain.height();\n      var ulheight = $ulactionbar.height() + $uldynactionbar.height();\n      var cPos = $divlbMain.scrollTop();\n      var offSet = Math.ceil(dHeight / 2);\n      var s = 0;\n      if (dir == \'d\') {\n        if (cPos + offSet >= ulheight - offSet) return;\n        var ms = ulheight - dHeight;\n        s = cPos + offSet;\n        $divlbMain.animate({\n          scrollTop: s > ms ? ms : s\n        }, 1000);\n      } else if (dir == \'u\') {\n        if (cPos == 0) return;\n        s = cPos - offSet;\n        $divlbMain.animate({\n          scrollTop: s < 0 ? 0 : s\n        }, 1000);\n      }\n    });\n\n    //Search\n    $imgSearch.on(VIS.Events.onTouchStartOrClick, function (e) {\n      self.cmd_find($txtSearch.val());\n      //self.curTab.searchText = "";\n      self.clearSearchText();\n      $txtSearch.val("");\n      e.stopPropagation();\n    });\n    if (!VIS.Application.isMobile) {\n      $txtSearch.on("keyup", function (e) {\n        self.setAdvanceWhere("");\n        self.setFilterWhere("");\n        self.setAdvanceFlag(false);\n        self.setFilterFlag(false);\n        var code = e.charCode || e.keyCode;\n        if (code == 13) {\n          if (!self.defaultSearch) {\n            return;\n          }\n          self.cmd_find($txtSearch.val());\n          $txtSearch.val("");\n        } else if (code == 8 && $btnClrSearch.css(\'visibility\') == \'visible\') {\n          e.preventDefault();\n          self.defaultSearch = true;\n          $txtSearch.val("");\n          $btnClrSearch.css(\'visibility\', \'hidden\');\n          var query = new VIS.Query();\n          query.addRestriction(" 1 = 1 ");\n          self.findRecords(query);\n        }\n      });\n    }\n    $imgdownSearch.on("click", function () {\n      if (!self.isAutoCompleteOpen) {\n        $imgdownSearch.css("transform", "rotate(180deg)");\n        self.refreshSavedASearchList(true);\n      } else {\n        $imgdownSearch.css("transform", "rotate(360deg)");\n      }\n    });\n    $btnClrSearch.on("click", function () {\n      $btnClrSearch.css("visibility", "hidden");\n      self.defaultSearch = true;\n      //self.curTab.searchText = "";\n      self.clearSearchText();\n      $txtSearch.val("");\n      var query = new VIS.Query();\n      ////query.addRestriction(" 1 = 1 ");\n      //self.findRecords(query);\n      self.findRecords(query);\n      $imgdownSearch.css("transform", "rotate(360deg)");\n    });\n    this.setAdvancedSerachText = function (hideicon, text) {\n      if (hideicon) {\n        $btnClrSearch.css("visibility", "hidden");\n      } else {\n        $btnClrSearch.css("visibility", "visible");\n        $imgdownSearch.css("visibility", "visible");\n      }\n      $txtSearch.val(text);\n    };\n    this.toggleASearchIcons = function (show, hasDefault) {\n      if (show && hasDefault) {\n        $btnClrSearch.css(\'visibility\', \'visible\');\n        $imgdownSearch.css(\'visibility\', \'visible\');\n      } else if (show && !hasDefault) {\n        $btnClrSearch.css(\'visibility\', \'hidden\');\n        $imgdownSearch.css(\'visibility\', \'visible\');\n      } else {\n        $btnClrSearch.css(\'visibility\', \'hidden\');\n        $imgdownSearch.css(\'visibility\', \'hidden\');\n      }\n    };\n    this.setSearchFocus = function (focus) {\n      if (focus) {\n        $txtSearch.focus();\n      } else {\n        $txtSearch.trigger(\'focusout\');\n      }\n    };\n    this.refreshSavedASearchList = function (showData, text) {\n      var sqlUserSearch = "VIS_116";\n      var param = [];\n      param[0] = new VIS.DB.SqlParam("@AD_Tab_ID", self.curTab.getAD_Tab_ID());\n      param[1] = new VIS.DB.SqlParam("@AD_User_ID", parseInt(self.ctx.getAD_User_ID()));\n      param[2] = new VIS.DB.SqlParam("@AD_Tab_ID1", self.curTab.getAD_Tab_ID());\n      param[3] = new VIS.DB.SqlParam("@AD_User_ID1", parseInt(self.ctx.getAD_User_ID()));\n      param[4] = new VIS.DB.SqlParam("@AD_Client_ID", parseInt(self.ctx.getAD_Client_ID()));\n      param[5] = new VIS.DB.SqlParam("@AD_Tab_ID2", self.curTab.getAD_Tab_ID());\n      param[6] = new VIS.DB.SqlParam("@AD_Table_ID", self.curTab.getAD_Table_ID());\n      var $selfpanel = this;\n      executeDataSet(sqlUserSearch, param, function (data) {\n        var userQueries = [];\n        if (data && data.tables[0].rows && data.tables[0].rows.length > 0) {\n          //$($txtSearch[1]).css("display", "inherit");\n          $imgdownSearch.css(\'visibility\', \'visible\');\n          userQueries.push({\n            \'label\': VIS.Msg.getMsg("All"),\n            \'value\': VIS.Msg.getMsg("All"),\n            \'code\': VIS.Msg.getMsg("All")\n          });\n          var hasDefaultSearch = false;\n          for (var i = 0; i < data.tables[0].rows.length; i++) {\n            if (data.tables[0].rows[i].cells["ad_defaultuserquery_id"] > 0) {\n              userQueries.push({\n                \'title\': data.tables[0].rows[i].cells["title"],\n                \'label\': data.tables[0].rows[i].cells["name"],\n                \'value\': data.tables[0].rows[i].cells["name"],\n                \'code\': data.tables[0].rows[i].cells["code"],\n                \'id\': data.tables[0].rows[i].cells["ad_userquery_id"],\n                \'defaultids\': data.tables[0].rows[i].cells["ad_defaultuserquery_id"],\n                \'userid\': data.tables[0].rows[i].cells["ad_defaultuserquery_id"]\n              });\n              hasDefaultSearch = true;\n            } else {\n              userQueries.push({\n                \'title\': data.tables[0].rows[i].cells["title"],\n                \'label\': data.tables[0].rows[i].cells["name"],\n                \'value\': data.tables[0].rows[i].cells["name"],\n                \'code\': data.tables[0].rows[i].cells["code"],\n                \'id\': data.tables[0].rows[i].cells["ad_userquery_id"]\n              });\n            }\n          }\n        } else {\n          $selfpanel.toggleASearchIcons(false, false);\n        }\n        if (!text) {\n          text = $txtSearch.val();\n        }\n        if (text && text.length > 0) {\n          if (text.length > 25) {\n            $txtSearch.val(text.substr(0, 25) + \'...\');\n          } else {\n            $txtSearch.val(text);\n          }\n          $btnClrSearch.css(\'visibility\', \'visible\');\n          $selfpanel.defaultSearch = false;\n        } else {\n          $btnClrSearch.css(\'visibility\', \'hidden\');\n        }\n        $txtSearch.autocomplete(\'option\', \'source\', userQueries);\n        if (showData) {\n          $txtSearch.autocomplete("search", "");\n          $txtSearch.trigger("focus");\n        }\n      });\n    };\n    this.findRecords = function (query) {\n      var onlyCurrentDays = 0;\n      var created = false;\n      this.curTab.getTableModel().setCurrentPage(1);\n      if (this.isSummaryVisible) {\n        this.curTab.setShowSummaryNodes(true);\n      } else {\n        this.curTab.setShowSummaryNodes(false);\n      }\n      this.curGC.skipRowInserting(true); // do - not insert row \n      if (!query) query = new VIS.Query();\n      //if (query != null && query.getIsActive()) {\n      this.curGC.applyFilters(query);\n      //, this.curGC.treeNodeID, this.treeID\n      //}\n      //else {\n      //    //var maxRows = VIS.MRole.getMaxQueryRecords();\n      //    var maxRows = 0;\n      //    //log.config("OnlyCurrentDays=" + onlyCurrentDays + ", MaxRows=" + maxRows);\n      //    this.curTab.setQuery(null);\t//\treset previous queries\n      //    this.curGC.query(onlyCurrentDays, maxRows, created);   //  autoSize\n      //}\n    };\n    this.setTitle = function (title) {\n      $spnTitle.text(title);\n    };\n\n    /**\r\n     * If window don\'t have any record, then show instruction for new record\r\n     * @param {any} highlight\r\n     */\n    this.highlightButton = function (highlight, button) {\n      var $bLi = button.$li;\n      var $root = this.getRoot();\n      if (button.getAction() == this.ACTION_NAME_NEW) {\n        if (!highlight || $txtSearch.val().length > 0) {\n          this.instructionPop[this.ACTION_NAME_NEW] = true;\n        }\n        if (this.instructionPop[this.ACTION_NAME_NEW]) {\n          if ($root.find(\'.vis-window-instruc-overlay-new\').length > 0) {\n            $root.find(\'.vis-window-instruc-overlay-new\').remove();\n            $bLi.removeClass(\'vis-window-instruc-overlay-new-li\');\n          }\n          return;\n        }\n        if ($root.find(\'.vis-window-instruc-overlay-new\').length <= 0) {\n          $root.prepend(\'<div class="vis-window-instruc-overlay-new"><div class="vis-window-instruc-overlay-new-inn">\' + \'<p>\' + VIS.Msg.getMsg(\'CreateNewRec\') + \'</p></div></div>\');\n          $bLi.addClass(\'vis-window-instruc-overlay-new-li\');\n          this.instructionPop[this.ACTION_NAME_NEW] = true;\n        }\n      }\n    };\n\n    //End\n\n    $btnClose.on(\'click\', function (e) {\n      self.$parentWindow.dispose(); //dispose\n    });\n\n    /* left bar toggle */\n    this.updateLabelVisbility = function () {\n      var w = parseInt($divlbMain.width());\n      if (w > 50) {\n        $ulactionbar.find(\'span\').show();\n        $uldynactionbar.find(\'span\').show();\n      } else {\n        $ulactionbar.find(\'span\').hide();\n        $uldynactionbar.find(\'span\').hide();\n      }\n    };\n    $btnlbToggle.on(VIS.Events.onTouchStartOrClick, function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var w = parseInt($divlbMain.width());\n      if (w > 50) {\n        $ulactionbar.find(\'span\').hide();\n        $uldynactionbar.find(\'span\').hide();\n      } else $divlbMain.css({\n        "position": "absolute"\n      });\n      $divlbMain.animate({\n        "width": w > 50 ? "30" : "220"\n      }, 300, \'swing\', function () {\n        if (w < 50) {\n          $ulactionbar.find(\'span\').show();\n          $uldynactionbar.find(\'span\').show();\n        } else {\n          $divlbMain.css({\n            "position": ""\n          });\n          $divlbMain.css({\n            "width": ""\n          });\n        }\n        if (self.curGC) {\n          self.curGC.multiRowResize();\n        }\n        //self.setWidth(-1, true);\n        self.setTabNavigation();\n      });\n    });\n    this.disposeComponent = function () {\n      //Search\n      $imgSearch.off(VIS.Events.onTouchStartOrClick);\n      $txtSearch.remove();\n      $txtSearch = null;\n\n      //left bar\n      $btnlbToggle.off(VIS.onTouchStartOrClick);\n      $divlbNav.off("click");\n      $divTabNav.off("click");\n      $root.remove();\n      $busyDiv.remove();\n      $root = $busyDiv = $divContentArea = $ulNav = $ulToobar = $divStatus = null;\n      self = null;\n      onAction = null;\n      //\n      if (this.toolbarCreated) {\n        this.aRefresh.dispose();\n        this.aDelete.dispose();\n        this.aNew.dispose();\n        this.aSave.dispose();\n        this.aPrevious.dispose();\n        this.aFirst.dispose();\n        this.aLast.dispose();\n        this.aNext.dispose();\n        this.aPageUp.dispose();\n        this.aPageFirst.dispose();\n        this.aPageLast.dispose();\n        this.aPageDown.dispose();\n        this.aCard.dispose();\n        this.aCardDialog.dispose();\n        if (this.aShowSummaryLevel) {\n          this.aShowSummaryLevel.dispose();\n        }\n        if (this.aChat) {\n          this.aChat.dispose();\n        }\n        if (this.aAppointment) {\n          this.aAppointment.dispose();\n        }\n        if (this.aBatchUpdate) {\n          this.aBatchUpdate.dispose();\n        }\n        this.aHelp.dispose();\n        if (this.aSubscribe) {\n          this.aSubscribe.dispose();\n        }\n        if (this.aAttachment) {\n          this.aAttachment.dispose();\n        }\n        if (this.aHistory) {\n          this.aHistory.dispose();\n        }\n        if (this.aZoomAcross) {\n          this.aZoomAcross.dispose();\n        }\n        if (this.aRequest) {\n          this.aRequest.dispose();\n        }\n        if (this.aMarkToExport) {\n          this.aMarkToExport.dispose();\n        }\n        if (this.aWorkflow) {\n          this.aWorkflow.dispose();\n        }\n        if (this.aRecAccess) {\n          this.aRecAccess.dispose();\n        }\n        if (this.aImportMap) {\n          this.aImportMap.dispose();\n        }\n        this.aRefresh = this.aDelete = this.aNew = this.aPrevious = this.aFirst = this.aLast = this.aNext = null;\n        this.aChat = this.aPageUp = this.aPageFirst = this.aPageLast = this.aPageDown = null;\n        this.aHelp = this.aSubscribe = this.aAttachment = null, this.toolbarCreated = null;\n        this.aZoomAcross = this.aRequest = this.aMark = this.aWorkflow = this.aHistory = null;\n        this.aAppointment = null;\n        this.aBatchUpdate = null;\n        this.aRecAccess = this.aImportMap = this.aCard = this.aCardDialog = this.aShowSummaryLevel = null;\n      }\n      this.statusBar.dispose();\n      this.statusBar.onComboChange = null;\n      this.statusBar = null;\n      this.getRoot = null;\n      this.getLayout = null;\n      this.setBusy = null;\n      this.createToolBar = null;\n      this.$parentWindow = null;\n      this.ctx = null;\n      //this.tabPages = {};\n      this.curGC = null;\n      this.curST = null;\n      this.curTab = null;\n      this.vTabbedPane = null;\n      /* current Tab panel */\n      this.curWinTab = null;\n      /* Tab Index */\n      this.curTabIndex = null;\n      /* Sort Tab */\n      this.firstTabId = null;\n      $hdrPanel.remove();\n      $hdrPanel = null;\n      this.getParentDetailPane = null;\n      if (tabItems) {\n        for (var i = 0; i < tabItems.length; i++) {\n          tabItems[i].dispose();\n        }\n      }\n      tabItems = null;\n      tabLIObj = null;\n      $ulTabControl.remove();\n    };\n  }\n  ;\n  /** Shared action names*/\n  APanel.prototype.ACTION_NAME_FIRST = "First";\n  APanel.prototype.ACTION_NAME_LAST = "Last";\n  APanel.prototype.ACTION_NAME_PREV = "Previous"; // "Previous";\n  APanel.prototype.ACTION_NAME_NEXT = "Next"; // "Next";\n  APanel.prototype.ACTION_NAME_PAGEDOWN = "PageDown"; // "Previous";\n  APanel.prototype.ACTION_NAME_PAGEUP = "PageUp"; // "Next";\n\n  APanel.prototype.ACTION_NAME_NEW = "NRD";\n  APanel.prototype.ACTION_NAME_DELETE = "DRD";\n  APanel.prototype.ACTION_NAME_REFRESH = "RQY";\n  APanel.prototype.ACTION_NAME_FIND = "Find";\n  APanel.prototype.ACTION_NAME_CHAT = "CHT";\n  APanel.prototype.ACTION_NAME_APPOINTMENT = "Appointment";\n  APanel.prototype.ACTION_NAME_ARCHIVE = "Archive";\n  APanel.prototype.ACTION_NAME_SHAREDREC = "RSD";\n  var currentFocusClass = null;\n  APanel.prototype.keyDown = function (evt) {\n    if (!evt.ctrlKey && evt.altKey && this.curGC) {\n      var en = this.aNew.getIsEnabled();\n      switch (evt.keyCode) {\n        case 78:\n          //N for ADD\n          if (en) this.actionPerformed(this.aNew.getAction());\n          break;\n        case 83:\n          //S for save\n          //if (!en) {\n          //this.setSearchFocus(true);\n          //var selfPanel = this;\n          //window.setTimeout(function () {\n          //selfPanel.actionPerformed(selfPanel.aSave.getAction());\n          this.ShortcutNavigation(this.aSave.getAction());\n          //selfPanel.setSearchFocus(false);\n          //}, 100);\n          //}\n          break;\n        case 66:\n          // B for Back to Multiview\n          if (en) {\n            if (this.aBack.getIsEnabled()) this.actionPerformed(this.aBack.getAction());\n          }\n          break;\n        case 68:\n          // D for Delete\n          if (en) this.actionPerformed(this.aDelete.getAction());\n          break;\n        case 90:\n          // Z for undo\n          if (!en) this.actionPerformed(this.aIgnore.getAction());\n          break;\n        case 80:\n          // P for print\n          if (en) this.actionPerformed(this.aPrint.getAction());\n          break;\n        case 82:\n          // R for GridReport\n          if (en) this.actionPerformed(this.aReport.getAction());\n          break;\n        case 81:\n          // Q for Refresh\n          if (en) this.actionPerformed(this.aRefresh.getAction());\n          break;\n        case 65:\n          // A for Advanced Search\n          this.actionPerformed(this.aFind.getAction());\n          break;\n        case 70:\n          // F for Find\n          this.setSearchFocus(true);\n          break;\n        case 37:\n          // Left Arrow for First Record\n          // this.actionPerformed(this.aFirst.getAction());\n          this.ShortcutNavigation(this.aFirst.getAction());\n          break;\n        case 39:\n          // Right Arrow for Last record\n          //this.actionPerformed(this.aLast.getAction());\n          this.ShortcutNavigation(this.aLast.getAction());\n          break;\n        case 38:\n          // ArrowUP for preivious Record\n\n          this.ShortcutNavigation(this.aPrevious.getAction());\n          break;\n        case 40:\n          // Arrow Down for next record\n          //this.actionPerformed(this.aNext.getAction());\n          this.ShortcutNavigation(this.aNext.getAction());\n          break;\n        case 84:\n          // Arrow Multi/single  Alt+T\n          if (this.curGC && this.curGC.getIsSingleRow()) {\n            this.actionPerformed(this.aMulti.getAction());\n          } else {\n            this.actionPerformed(this.aSingle.getAction());\n          }\n          break;\n        case 86:\n          // Arrow Down for next record\n          this.actionPerformed(this.aCard.getAction());\n          break;\n        case 88:\n          // X for close\n          this.$parentWindow.dispose();\n          break;\n        case 79:\n          this.startFilterPanel();\n          break;\n        case 33:\n          if (evt.ctrlKey) {\n            if (this.aPageFirst.isEnabled) {\n              //this.actionPerformed(this.aPageFirst.getAction());\n              this.ShortcutNavigation(this.aPageFirst.getAction());\n            }\n            break;\n          } else {\n            if (this.aPageUp.isEnabled)\n              // move to previous Page\n              //this.actionPerformed(this.aPageUp.getAction());\n              this.ShortcutNavigation(this.aPageUp.getAction());\n            break;\n          }\n        case 34:\n          if (evt.ctrlKey) {\n            if (this.aPageLast.isEnabled) {\n              // move to Last Page\n              //this.actionPerformed(this.aPageLast.getAction());\n              this.ShortcutNavigation(this.aPageLast.getAction());\n            }\n            break;\n          } else {\n            if (this.aPageDown.isEnabled) {\n              // move to Next Page\n              //this.actionPerformed(this.aPageDown.getAction());\n              this.ShortcutNavigation(this.aPageDown.getAction());\n            }\n            break;\n          }\n      }\n      evt.preventDefault();\n      evt.stopPropagation();\n    } else if (evt.keyCode == 112) {\n      this.actionPerformed(this.aHelp.getAction());\n      evt.preventDefault();\n      evt.stopPropagation();\n    } else if (evt.altKey && evt.keyCode == 33) {\n      if (evt.ctrlKey) {\n        if (this.aPageFirst.isEnabled) {\n          //this.actionPerformed(this.aPageFirst.getAction());\n          this.ShortcutNavigation(this.aPageFirst.getAction());\n        }\n      } else {\n        if (this.aPageUp.isEnabled)\n          // move to previous Page\n          //this.actionPerformed(this.aPageUp.getAction());\n          this.ShortcutNavigation(this.aPageUp.getAction());\n      }\n    } else if (evt.altKey && evt.keyCode == 34) {\n      if (evt.ctrlKey) {\n        if (this.aPageLast.isEnabled) {\n          // move to Last Page\n          //this.actionPerformed(this.aPageLast.getAction());\n          this.ShortcutNavigation(this.aPageLast.getAction());\n        }\n      } else {\n        if (this.aPageDown.isEnabled) {\n          // move to Next Page\n          //this.actionPerformed(this.aPageDown.getAction());\n          this.ShortcutNavigation(this.aPageDown.getAction());\n        }\n      }\n    } else {\n      if (this.vTabbedPane && this.vTabbedPane.keyDown) this.vTabbedPane.keyDown(evt);\n    }\n    if (evt.keyCode === 9) {\n      this.compositViewChangeSave(evt);\n    }\n  };\n  APanel.prototype.ShortcutNavigation = function (action) {\n    var tis = this;\n    var fEle = $(document.activeElement);\n    if (fEle && fEle.length > 0) fEle.trigger("change");\n    window.setTimeout(function () {\n      tis.actionPerformed(action);\n    }, 200);\n  };\n  APanel.prototype.sizeChanged = function (height, width) {\n    this.setTabNavigation();\n    this.vTabbedPane.sizeChanged();\n    return;\n  };\n  APanel.prototype.refresh = function () {\n    if (this.curGC) {\n      this.curGC.onSizeChanged(true);\n    }\n    this.vTabbedPane.refresh();\n  };\n  APanel.prototype.refreshData = function () {\n    var ssel = this;\n    window.setTimeout(function () {\n      if (ssel.curTab.getAD_Tab_ID() == ssel.firstTabId.split(\'_\')[1]) {\n        ssel.curGC.dataRefreshAll();\n      } else {\n        ssel.selectFirstTab(false, function () {\n          ssel.curGC.dataRefreshAll();\n        });\n      }\n      ssel.setBusy(false);\n    }, 100);\n    this.setBusy(true);\n  };\n  APanel.prototype.addActions = function (action, parent, disableIcon, imageOnly, isSmall, onAction, toggle, toolTipText, iconName) {\n    var obj = {\n      action: action,\n      parent: parent,\n      enableDisable: disableIcon,\n      toggle: toggle,\n      imageOnly: imageOnly,\n      isSmall: isSmall,\n      onAction: onAction,\n      toolTipText: toolTipText\n    };\n    if (iconName) {\n      obj.iconName = iconName;\n    }\n    var action = new VIS.AppsAction(obj); //Create Apps Action\n    return action;\n  };\n\n  //Handle Composite view Change focus Save\n  APanel.prototype.compositViewChangeSave = function (e) {\n    var $ths = this;\n    if ($(e.target).closest(\'.vis-ad-w-p-center-inctab\').length > 0 || $(e.target).closest(\'.vis-ad-w-p-vc\').length > 0) {\n      var activeElement = $(document.activeElement);\n      setTimeout(function () {\n        var newFocusClass = $(document.activeElement).closest(\'.vis-ad-w-p-center-inctab\').length > 0 ? \'vis-ad-w-p-center-inctab\' : \'vis-ad-w-p-vc\';\n        if (!currentFocusClass) {\n          currentFocusClass = newFocusClass;\n        }\n        if (currentFocusClass !== newFocusClass && currentFocusClass !== \'\') {\n          if (currentFocusClass == \'vis-ad-w-p-vc\') {\n            var lf = $ths.vTabbedPane.contentPane.curTab.getLastFocus();\n            $ths.vTabbedPane.contentPane.curTab.setLastFocus(null);\n            if (lf) {\n              $ths.curTab.setLastFocus(lf);\n            }\n            //$ths.curTab.setLastFocus(activeElement);\n          }\n          //lastFocus.focus();\n          if (currentFocusClass == \'vis-ad-w-p-center-inctab\') {\n            var lf = $ths.curTab.getLastFocus();\n            $ths.curTab.setLastFocus(null);\n            $ths = $ths.vTabbedPane.contentPane;\n            if (lf) {\n              $ths.curTab.setLastFocus(lf);\n            }\n            //$ths.curTab.setLastFocus(activeElement);\n            //$ths.lastFocus = activeElement;\n          }\n          if ($ths.curGC != null) {\n            if ($ths.curTab.needSave(true, false)) {\n              //  do we have real change\n              if ($ths.curTab.needSave(true, true)) {\n                if (VIS.Env.getCtx().isAutoCommit($ths.curWindowNo)) {\n                  if (currentFocusClass == \'vis-ad-w-p-vc\') {\n                    var isCheckListRequire = $ths.curGC.IsCheckListRequire();\n                    if (!isCheckListRequire) {\n                      //$ths.lastFocus.focus();\n                      $ths.curTab.getLastFocus().focus();\n                      return false;\n                    }\n                  }\n                  if (!$ths.curTab.dataSave(true)) {\n                    //  there is a problem, so we go back\n                    //$ths.lastFocus.focus();\n                    //$ths.curTab.getLastFocus().focus();\n                    return false;\n                  } else {\n                    $ths.curTab.setLastFocus(activeElement);\n                  }\n                } else {\n                  canExecute = false;\n                  VIS.ADialog.confirm("SaveChanges?", true, $ths.curTab.getCommitWarning(), \'Confirm\', function (results) {\n                    if (results) {\n                      if (!$ths.curTab.dataSave(true)) {\n                        //$ths.lastFocus.focus();\n                        //$ths.curTab.getLastFocus().focus();\n                        return false;\n                      } else {\n                        $ths.curTab.setLastFocus(activeElement);\n                      }\n                    }\n                  });\n                }\n              } else {\n                $ths.curTab.setLastFocus(activeElement);\n              }\n            } else {\n              $ths.curTab.setLastFocus(activeElement);\n            }\n          } else {\n            $ths.curTab.setLastFocus(activeElement);\n          }\n        } else {\n          $ths.curTab.setLastFocus(activeElement);\n        }\n        currentFocusClass = newFocusClass;\n      }, 100);\n    }\n  };\n  APanel.prototype.showHideViewIcon = function (action) {\n    if (this.curTab != null && this.curGC != null) {\n      if (this.actionParams.IsHideGridToggle != null) {\n        if (this.actionParams.IsHideGridToggle) this.aMulti.hide();else this.aMulti.show();\n      } else if (!this.curTab.getIsHideGridToggle()) {\n        this.aMulti.show();\n      } else {\n        this.aMulti.hide();\n      }\n      if (this.actionParams.IsHideSingleToggle != null) {\n        if (this.actionParams.IsHideSingleToggle) this.aSingle.hide();else this.aSingle.show();\n      } else if (!this.curTab.getIsHideSingleToggle()) {\n        this.aSingle.show();\n      } else {\n        this.aSingle.hide();\n      }\n      if (this.actionParams.IsHideCardToggle != null) {\n        if (this.actionParams.IsHideCardToggle) this.aCard.hide();else this.aCard.show();\n      } else if (!this.curTab.getIsHideCardToggle()) {\n        this.aCard.show();\n      } else {\n        this.aCard.hide();\n      }\n      action.hide();\n    } else {\n      this.aMulti.hide();\n      this.aSingle.hide();\n      this.aCard.hide();\n    }\n  };\n\n  /** ************************************************************************\r\n   *\tDynamic Panel Initialization -  single window .\r\n   *  <pre>\r\n   *  - Workbench tabPanel    (VTabbedPane)\r\n   *      - Tab               (GridController)\r\n     - Tab           (GridController)\r\n   *  </pre>\r\n   *  tabPanel\r\n   *  @param jsonData  window properties\r\n   *  @param query\t\t\tif not a Workbench, Zoom Query - additional SQL where clause\r\n   *  @return true if Panel is initialized successfully\r\n   */\n\n  APanel.prototype.initPanel = function (jsonData, query, $parent, goSingleRow, sel) {\n    this.$parentWindow = $parent;\n    var gridWindow = new VIS.GridWindow(jsonData, this);\n    this.gridWindow = gridWindow; //ref to call dispose\n    //this.setWidth(gridWindow.getWindowWidth());\n\n    this.createToolBar(); // Init ToolBar\n\n    var curWindowNo = $parent.getWindowNo();\n    var autoNew = this.ctx.isAutoNew();\n    var tabs = gridWindow.getTabs(); //Tabs VO\n\n    this.ctx.setAutoCommit(curWindowNo, this.ctx.isAutoCommit());\n    this.ctx.setAutoNew(curWindowNo, autoNew);\n\n    //\tSet SO/AutoNew for Window\n    this.ctx.setIsSOTrx(curWindowNo, gridWindow.getIsSOTrx());\n    if (!autoNew && gridWindow.getIsTransaction()) this.ctx.setAutoNew(curWindowNo, true);\n    this.ctx.setContext(curWindowNo, "WindowName", gridWindow.getName());\n    var multiTabview = gridWindow.getIsCompositeView();\n    this.vTabbedPane.init(this, multiTabview);\n\n    /* Select Record */\n    if (!query && sel) {\n      query = new VIS.Query();\n      //\tCurrent row\n      var link = tabs[0].getKeyColumnName();\n      //\tLink for detail records\n      if (link.length == 0) link = tabs[0].getLinkColumnName();\n      if (link.length != 0) {\n        if (link.endsWith(\'_ID\')) query.addRestriction(link, VIS.Query.prototype.EQUAL, sel);else query.addRestriction(link, VIS.Query.prototype.EQUAL, sel);\n      }\n    }\n    var gTab;\n    var tabActions = []; //Tabs Apps Action\n\n    var includedMap = {};\n    var setCurrent = false;\n    var isCheckCurrentTab = true;\n    for (var i = 0; i < tabs.length; i++) {\n      var id = curWindowNo + "_" + tabs[i].getAD_Tab_ID(); //uniqueID\n      var tObj = {\n        action: id,\n        text: tabs[i].getName(),\n        toolTipText: tabs[i].getDescription(),\n        textOnly: true,\n        iconName: \'\',\n        isHideTab: tabs[i].getIsHideTabName()\n      };\n      if (tabs[i].getTabLevel() > 0) {\n        tObj.textOnly = false;\n        if (tabs[i].getTabLevel() > 3) tObj.iconName = \'tl-4\';else tObj.iconName = \'tl-\' + tabs[i].getTabLevel();\n      }\n      tabActions[i] = new VIS.AppsAction(tObj); //Create Apps Action\n\n      gTab = tabs[i];\n      //if (i === 0) {\n      //    this.curTab = gTab;\n      //    if (query != null) {\n\n      //        gTab.setQuery(query);\n      //    }\n      //}\t//\tquery on first tab\n      //ZoomChildTab\n      if (isCheckCurrentTab) {\n        if (i === 0 && (query == null || query.list != null && query.list.length == 0 || query.list[0].code == -10)) {\n          this.curTab = gTab;\n          this.firstTabId = id;\n          setCurrent = true;\n          isCheckCurrentTab = false;\n          if (query != null) {\n            gTab.setQuery(query);\n          }\n        } else {\n          //if (i === 0)\n          //    this.curTab = gTab;\n          if (query != null && query.list != null && query.list.length > 0) {\n            if (query.list[0].columnName && gTab.getKeyColumnName().toUpperCase() == query.list[0].columnName.toUpperCase()) {\n              this.firstTabId = id;\n              gTab.setQuery(query);\n              this.curTab = gTab;\n              setCurrent = true;\n              isCheckCurrentTab = false;\n              if (i > 0) {\n                this.setParentsContext(tabs, i);\n              }\n            }\n          }\n        } //\tquery on first tab\n      }\n      var tabElement = null;\n      //        //  GridController\n      if (gTab.getIsSortTab())\n        //     .IsSortTab())\n        {\n          //var st = new VIS.VSortTab(curWindowNo, id);\n          var st = new VIS.VSortTab(curWindowNo, gTab.getAD_Table_ID(), gTab.getAD_ColumnSortOrder_ID(), gTab.getAD_ColumnSortYesNo_ID(), gTab.getIsReadOnly(), id);\n          //st.setTabLevel(gTab.getTabLevel());\n          tabElement = st;\n          if (i == 0) {\n            firstTabId = id;\n          }\n        } else\n        //\tnormal tab\n        {\n          var gc = new VIS.GridController(true, true, id, multiTabview);\n          gc.initGrid(false, curWindowNo, this, gTab);\n\n          //if (i === 0 && !setCurrent) {\n          //    if (query != null) {\n          //        gTab.setQuery(query);\n          //    }\n          //}\n\n          //ZoomChildTab\n\n          // set current grid  controller\n          if (setCurrent) {\n            this.curGC = gc;\n            setCurrent = false;\n          }\n\n          // Set first tab as current tab in case not marked aby tab as current tab.\n          if (i === 0 && !setCurrent) {\n            this.curTab = gTab;\n            this.curGC = gc;\n            this.firstTabId = id;\n            if (gTab.getIsHeaderPanel()) {\n              gc.initHeaderPanel(this.getParentDetailPane());\n              this.vHeaderPanel = gc.vHeaderPanel; // set in parent class , so it is accessible in all GC\n            }\n          }\n          gc.initFilterPanel(curWindowNo, this.getFilterPane());\n          tabElement = gc;\n          if (i === 0 && goSingleRow) {\n            this.showHideViewIcon(this.aSingle);\n            gc.switchSingleRow();\n          }\n          //\tStore GC if it has a included Tab\n          if (gTab.getIncluded_Tab_ID() != 0) {\n            includedMap[gTab.getIncluded_Tab_ID()] = gc;\n          }\n          if (gTab.getHasPanel()) {\n            gc.initTabPanel(gridWindow.getWindowWidth(), curWindowNo);\n          }\n\n          //\tIs this tab included?\n          if (!multiTabview && !$.isEmptyObject(includedMap)) {\n            var parent = includedMap[gTab.getAD_Tab_ID()];\n            if (parent != null) {\n              var included = parent.includeTab(gc);\n            }\n          }\n        } //\tnormal tab\n\n      this.vTabbedPane.addTab(id, gTab, tabElement, tabActions[i]);\n\n      //TabChange Action Callback\n      tabActions[i].onAction = this.onTabChange; //Perform tab Change\n    }\n    if (isCheckCurrentTab && query != null && query.list != null && query.list.length > 0) {\n      this.curTab.setQuery(query);\n    }\n    this.vTabbedPane.setTabControl(tabActions);\n    tabActions = null;\n    this.ctx.setWindowContext(curWindowNo, "WindowName", jsonData._vo.DisplayName);\n    $parent.setTitle(VIS.Env.getHeader(this.ctx, curWindowNo));\n    this.setTitle(VIS.Env.getHeader(this.ctx, curWindowNo));\n    $parent.setName(jsonData._vo.DisplayName);\n    this.curWindowNo = curWindowNo;\n    if (multiTabview) {\n      this.getLayout().removeClass(\'vis-ad-w-p-center-view-height\');\n      this.getLayout().find(\'.vis-ad-w-p-vc-editview\').css("position", "unset");\n      this.getLayout().find(\'.vis-ad-w-p-center-inctab\').css("background", "rgba(var(--v-c-common), 1)");\n    }\n    jsonData = null;\n    $parent = null;\n\n    /**\r\n     * Handle Landing Page\r\n     */\n\n    if (gridWindow.getIsLandingPage()) {\n      this.getRoot().hide();\n      var landingPage = new VIS.VLandingPage(this, curWindowNo);\n      this.landingPage = landingPage;\n      this.getRoot().parent().append(landingPage.getRoot());\n      //$landingpage.show();\n      //$windowpage.show();\n      this.getRoot().find(\'.vis-ad-w-p-t-toolbar\').css(\'visibility\', \'visible\');\n    } else {\n      this.getRoot().show();\n      //$landingpage.hide();\n      //$windowpage.hide();\n      this.getRoot().find(\'.vis-ad-w-p-t-toolbar\').css(\'visibility\', \'hidden\');\n    }\n\n    // this.curGC.setVisible(true);\n  };\n\n  /**\r\n   * make Include tab Resizable \r\n   * */\n  APanel.prototype.setIncTabReziable = function () {\n    var incTab = this.getIncludedEmptyArea();\n    var aPanel = this;\n    if (!incTab.is(\'.ui-resizable\')) {\n      incTab.resizable({\n        handles: \'n\',\n        ghost: true,\n        minHeight: 40,\n        maxHeight: 500,\n        //width: \'auto\',\n\n        resize: function (event, ui) {\n          //self.panelWidth = ui.size.width;\n          //incTab.css({ \'position\': \'absolute\', "left": "", "z-index": "99" });\n          incTab.css(\'flex-basis\', ui.size.height + \'px\');\n        },\n        start: function (event, ui) {\n          // incTab.css({ \'position\': \'absolute\', "z-index": "99" });\n          //windowWidth=\n        },\n        stop: function (event, ui) {\n          incTab.css({\n            \'flex-basis\': ui.size.height + \'px\',\n            \'top\': \'\',\n            \'width\': \'\'\n          });\n          aPanel.refresh();\n        }\n      });\n    }\n  };\n\n  /**\r\n   * make Include tab Resizable \r\n   * */\n  APanel.prototype.setIncTabReziable = function () {\n    var incTab = this.getIncludedEmptyArea();\n    var aPanel = this;\n    if (!incTab.is(\'.ui-resizable\')) {\n      incTab.resizable({\n        handles: \'n\',\n        ghost: true,\n        minHeight: 40,\n        maxHeight: 500,\n        //width: \'auto\',\n\n        resize: function (event, ui) {\n          //self.panelWidth = ui.size.width;\n          //incTab.css({ \'position\': \'absolute\', "left": "", "z-index": "99" });\n          incTab.css(\'flex-basis\', ui.size.height + \'px\');\n        },\n        start: function (event, ui) {\n          // incTab.css({ \'position\': \'absolute\', "z-index": "99" });\n          //windowWidth=\n        },\n        stop: function (event, ui) {\n          incTab.css({\n            \'flex-basis\': ui.size.height + \'px\',\n            \'top\': \'\',\n            \'width\': \'\'\n          });\n          aPanel.refresh();\n        }\n      });\n    }\n  };\n\n  //ZoomChildTab\n  // if zoomed to any child tab - find all the parents and set the values in context and set the query on parent tab.\n  APanel.prototype.setParentsContext = function (gTabs, index) {\n    var parentDict = [];\n    var parentRecID = gTabs[index].query.list[0].code;\n    for (var i = index - 1; i >= 0; i--) {\n      if (gTabs[i].getTabLevel() != gTabs[index].getTabLevel() && gTabs[i].getTabLevel() < gTabs[index].getTabLevel()) {\n        parentDict.push({\n          "TabNo": gTabs[i].getTabNo(),\n          "columnName": gTabs[i].getKeyColumnName(),\n          "childTableKeyColumn": gTabs[index].getKeyColumnName(),\n          "index": i\n        });\n        index = i;\n      }\n    }\n    if (parentDict) {\n      var windowNo = gTabs[index].getWindowNo();\n      for (var i = 0; i < parentDict.length; i++) {\n        if (parentRecID) {\n          gTabs[parentDict[i].index].query.addRestriction(parentDict[i].childTableKeyColumn, VIS.Query.prototype.EQUAL, parentRecID);\n          gTabs[parentDict[i].index].setIsZoomAction(true);\n        }\n        var data = {\n          SelectColumn: parentDict[i].columnName,\n          SelectTable: parentDict[i].childTableKeyColumn.substr(0, parentDict[i].childTableKeyColumn.length - 3),\n          WhereColumn: parentDict[i].childTableKeyColumn,\n          WhereValue: parentRecID\n        };\n        parentRecID = VIS.dataContext.getJSONData(VIS.Application.contextUrl + "JsonData/GetZoomParentRec", data);\n        if (parentRecID) {\n          VIS.context.setWindowContext(windowNo, parentDict[i].columnName, parentRecID.toString());\n        }\n      }\n    }\n  };\n\n  //Updated by raghu \n  //date:19-01-2016\n  //Change/Update for:Zoom from workflow on home page\n  APanel.prototype.selectFirstTab = function (isSelect) {\n    //this.curGC.isZoomAction = isSelect;\n    this.curTab.setIsZoomAction(isSelect);\n    setTimeout(function (that) {\n      //that.curGC.isZoomAction = isSelect;\n      that.tabActionPerformed(that.firstTabId);\n      that.setTabNavigation();\n      that = null;\n    }, 10, this);\n  };\n\n  /**\r\n   *  Is the UI locked (Internal method)\r\n   *  @return true, if UI is locked\r\n   */\n  APanel.prototype.getIsUILocked = function () {\n    return this.isLocked;\n  }; //  isLoacked\n\n  /**\r\n   *  Lock User Interface.\r\n   *  Called from the Worker before processing\r\n   *  @param pi process info\r\n   */\n  APanel.prototype.lockUI = function (pi) {\n    //\tlog.fine("" + pi);\n    this.setBusy(true, false);\n  }; //  lockUI\n\n  /**\r\n   *  Unlock User Interface.\r\n   *  Called from the Worker when processing is done\r\n   *  @param pi of execute ASync call\r\n   */\n  APanel.prototype.unlockUI = function (pi) {\n    //\tlog.fine("" + pi);\n    var notPrint = pi != null && pi.getAD_Process_ID() != this.curTab.getAD_Process_ID();\n    //  Process Result\n    if (notPrint)\n      //\trefresh if not print\n      {\n        //\tRefresh data\n        this.curTab.dataRefresh();\n        //\tTimeout\n        if (pi.getIsTimeout())\n          //\tset temporarily to R/O\n          VIS.context.setWindowContext(this.curWindowNo, "Processed", "Y");\n        this.curGC.dynamicDisplay(-1);\n        //\tUpdate Status Line\n        this.setStatusLine(pi.getSummary(), pi.getIsError());\n\n        // 1 Change Lokesh Chauhan\n        if (pi.customHTML && pi.customHTML != "") {\n          this.displayDialog($(pi.customHTML));\n        } else {\n          //\tGet Log Info\n          VIS.ProcessInfoUtil.setLogFromDB(pi);\n          var logInfo = pi.getLogInfo();\n          if (logInfo.length > 0) {\n            VIS.ADialog.info(pi.getTitle(), true, logInfo, "");\n            this.setStatusLine(pi.getSummary(), pi.getIsError());\n          }\n        }\n        //ADialog.info(m_curWindowNo, this, Env.getHeader(m_ctx, m_curWindowNo),\n        //      pi.getTitle(), logInfo);\t//\t clear text\n      }\n    this.setBusy(false, notPrint);\n  }; //  unlockUI\n\n  // 1 Change Lokesh Chauhan\n  APanel.prototype.displayDialog = function (message) {\n    var chDia = new VIS.ChildDialog();\n    chDia.setTitle("");\n    var wdth = window.innerWidth - 150;\n    var hgt = window.innerHeight - 120;\n    var diaCtr = $(\'<div style="max-height: \' + hgt + \'px; max-width: \' + wdth + \'px; min-width: 150px; min-height: 60px;"></div>\');\n    diaCtr.append(message);\n    chDia.setContent(diaCtr);\n    chDia.close = function () {\n      chDia.dispose();\n    };\n    chDia.show();\n    chDia.hidebuttons();\n  };\n\n  /**\r\n   *\tAction Listener\r\n   *  @param action string or object\r\n   *  Controller object called fron header panel\r\n   */\n  APanel.prototype.actionPerformed = function (action, controller) {\n    if (this.getIsUILocked()) return;\n    if (action.source instanceof VIS.Controls.VButton) {\n      var btnField = action.source.getField();\n      //exempt window action button, and field Button actions from Readonly state of tab and field\n      if (!this.getIsWindowAction(btnField.getAD_Reference_Value_ID()) && !btnField.getIsAction() && (!btnField.getIsEditable(true) || this.curTab.getIsReadOnly())) {\n        return;\n      }\n    }\n    //\tDo Screenrt w/o busy\n    this.setBusy(true);\n    var selfPan = this;\n    setTimeout(function () {\n      //  Command Buttons\n\n      if (action.source instanceof VIS.Controls.VButton) {\n        var btnactionName = action.source.getField().vo.DefaultValue;\n        if (selfPan.getIsWindowAction(action.source.mField.getAD_Reference_Value_ID()) && selfPan.toolbarActionList.indexOf(btnactionName) > -1) {\n          // handle Toolbar action by Button\n          selfPan.actionPerformedCallback(selfPan, btnactionName);\n          return;\n        } else {\n          if (!selfPan.actionButton(action.source, controller)) {\n            selfPan.setBusy(false, true);\n          }\n          if (action.source.mField.getIsAction()) {\n            selfPan.setBusy(false, true);\n          }\n          return;\n        }\n      }\n      selfPan.actionPerformedCallback(selfPan, action);\n    }, 10);\n  };\n  APanel.prototype.actionPerformedCallback = function (tis, action) {\n    /*Handle view change for back button */\n    if (action === "Multi" || action === "Card" || action === "Single") {\n      var view = "Y";\n      if (action === "Multi") {\n        view = "N";\n        //if (tis.curGC.getIsSingleRow()) {\n        //    view = "N";\n        //} else {\n        //    view = "Y";\n        //}\n      } else if (action === "Single") {\n        view = "Y";\n      } else if (action === "Card") {\n        view = "C";\n        //if (tis.curGC.getIsCardRow()) {\n        //    view = "N";\n        //}\n        //else {\n        //    view = "C";\n        //}\n      }\n\n      //Maintain stack for view change\n      if (this.tabStack.length > 0) {\n        var currentTabSeq = this.curWinTab.getSelectedIndex();\n        var currentTab = this.tabStack.find(function (tab) {\n          return tab.tabSeq === currentTabSeq;\n        });\n        if (currentTab.tabView.includes(view)) {\n          currentTab.tabView = [];\n        }\n        currentTab.tabView.push(view);\n      }\n      this.setBackEnable();\n    }\n\n    /*Naviagtion */\n    if (tis.aFirst.getAction() === action) {\n      tis.isDefaultFocusSet = false;\n      tis.curGC.navigate(0);\n    } else if (tis.aPrevious.getAction() === action) {\n      tis.isDefaultFocusSet = false;\n      tis.curGC.navigateRelative(-1);\n    } else if (tis.aLast.getAction() === action) {\n      tis.isDefaultFocusSet = false;\n      tis.curGC.navigate(tis.curTab.getRowCount() - 1);\n    } else if (tis.aNext.getAction() === action) {\n      tis.isDefaultFocusSet = false;\n      tis.curGC.navigateRelative(+1);\n    } else if (tis.aSingle.getAction() === action) {\n      tis.showHideViewIcon(tis.aSingle);\n      tis.curGC.switchSingleRow(true);\n    } else if (tis.aMulti.getAction() === action) {\n      tis.showHideViewIcon(tis.aMulti);\n      tis.curGC.switchMultiRow();\n    } else if (tis.aCard.getAction() === action) {\n      tis.showHideViewIcon(tis.aCard);\n      tis.curGC.switchCardRow();\n      // tis.aBack.setEnabled(!tis.curGC.getIsCardRow());\n    } else if (tis.aMap.getAction() === action) {\n      //tis.aMulti.setPressed(true);\n      //tis.aCard.setPressed(false);\n      tis.curGC.switchMapRow();\n    } else if (tis.aBack.getAction() === action) {\n      tis.cmd_back();\n    } else if (tis.aPageUp.getAction() === action) {\n      tis.isDefaultFocusSet = false;\n      tis.curGC.navigatePage(-1);\n    } else if (tis.aPageFirst.getAction() === action) {\n      tis.isDefaultFocusSet = false;\n      tis.curGC.navigatePage(0);\n    } else if (tis.aPageDown.getAction() === action) {\n      tis.isDefaultFocusSet = false;\n      tis.curGC.navigatePage(1);\n    } else if (tis.aPageLast.getAction() === action) {\n      tis.isDefaultFocusSet = false;\n      tis.curGC.navigatePage(\'last\');\n    }\n    /*MainToolBar */else if (tis.aRefresh.getAction() === action) {\n      tis.cmd_refresh();\n    } else if (tis.aIgnore.getAction() === action) {\n      tis.cmd_ignore();\n    } else if (tis.aSave.getAction() === action) {\n      tis.cmd_save(true);\n    } else if (tis.aNew.getAction() === action) {\n      tis.cmd_new(false);\n    } else if (tis.aCopy && tis.aCopy.getAction() === action) {\n      tis.cmd_new(true);\n    } else if (tis.aDelete.getAction() === action) {\n      tis.cmd_delete();\n    } else if (tis.aFind.getAction() === action) {\n      tis.cmd_finddialog();\n    } else if (tis.aBatchUpdate && tis.aBatchUpdate.getAction() === action) {\n      tis.cmd_batchUpdatedialog();\n    } else if (tis.aChat && tis.aChat.getAction() === action) {\n      tis.cmd_chat();\n    } else if (tis.aAttachment && tis.aAttachment.getAction() === action) {\n      tis.cmd_attachment();\n    } else if (tis.aHistory && tis.aHistory.getAction() == action) {\n      tis.cmd_history();\n    } else if (tis.aPreference.getAction() === action) {\n      tis.cmd_preference();\n    } else if (tis.aHelp.getAction() === action) {\n      tis.cmd_help();\n    } else if (tis.aCardDialog.getAction() === action) {\n      tis.cmd_cardDialog();\n    } else if (tis.aAppointment && tis.aAppointment.getAction() === action) {\n      tis.cmd_appointment();\n    } else if (tis.aTask && tis.aTask.getAction() === action) {\n      tis.cmd_task();\n    } else if (tis.aSubscribe && tis.aSubscribe.getAction() === action) {\n      tis.cmd_subscribe();\n    } else if (tis.aImportMap && tis.aImportMap.getAction() === action) {\n      tis.cmd_ImportMap();\n    } else if (tis.aEmail && tis.aEmail.getAction() === action) {\n      tis.cmd_email();\n    } else if (tis.aLetter && tis.aLetter.getAction() === action) {\n      tis.cmd_letter();\n    } else if (tis.aSms && tis.aSms.getAction() === action) {\n      tis.cmd_sms();\n    }\n    //lakhwinder\n    else if (tis.aInfo.getAction() === action) {\n      tis.cmd_infoWindow();\n    } else if (tis.aZoomAcross && tis.aZoomAcross.getAction() === action) {\n      tis.cmd_zoomAcross();\n    } else if (tis.aRequest && tis.aRequest.getAction() === action) {\n      tis.cmd_request();\n    } else if (tis.aReport.getAction() === action) {\n      tis.cmd_report();\n    } else if (tis.isPersonalLock && tis.aLock.getAction() === action) tis.cmd_lock();else if (tis.isPersonalLock && tis.aRecAccess.getAction() === action) {\n      tis.cmd_recAccess();\n    } else if (tis.isShowSharedRecord && tis.aSharedRecord.getAction() === action) {\n      tis.cmd_RecordShared();\n    }\n\n    //\tTools\n    else if (tis.aWorkflow != null && action === tis.aWorkflow.getAction()) {\n      if (tis.curTab.getRecord_ID() > 0) {\n        VIS.AEnv.startWorkflowProcess(tis.curTab.getAD_Table_ID(), tis.curTab.getRecord_ID());\n      }\n    } else if (tis.aPrint.getAction() === action) {\n      tis.cmd_print();\n    } else if (tis.aCreateDocument && tis.aCreateDocument.getAction() === action) {\n      actionVADMSDocument(tis, action);\n    } else if (tis.aUploadDocument && tis.aUploadDocument.getAction() === action) {\n      actionVADMSDocument(tis, action);\n    } else if (tis.aViewDocument && tis.aViewDocument.getAction() === action) {\n      actionVADMSDocument(tis, action);\n    } else if (tis.aAttachFrom && tis.aAttachFrom.getAction() === action) {\n      actionVADMSDocument(tis, action);\n    } else if (tis.aGenerateAttachmentCode && tis.aGenerateAttachmentCode.getAction() === action) {\n      actionVADMSDocument(tis, action);\n    } else if (tis.aMarkToExport && tis.aMarkToExport.getAction() === action) {\n      tis.cmd_markToExport();\n    } else if (tis.aShowSummaryLevel.getAction() == action) {\n      tis.ShowSummaryNodes();\n    }\n\n    //else if (tis.aCall && tis.aCall.getAction() === action) {\n    //    tis.cmd_call();\n    //}\n    tis.setRightBarVisibility(true);\n    tis.setBusy(false);\n    tis = null;\n  };\n\n  /**\r\n   *\tStart Button Process\r\n   *  @param vButton button\r\n   *  @retrun true to hide busy indicator\r\n   */\n  APanel.prototype.actionButton = function (vButton, curCtrller) {\n    var startWOasking = false;\n    var batch = false;\n    var dateScheduledStart = null;\n    var columnName = vButton.getColumnName();\n    var ctx = VIS.context;\n    if (!curCtrller) curCtrller = this;\n    var aPanel = this;\n    // self.curWindowNo = this.curWindowNo;\n\n    var curTabNo = 0;\n    var AD_Table_ID = 0;\n    var Record_ID = 0;\n    if (curCtrller.curTab) {\n      curTabNo = curCtrller.curTab.getTabNo();\n      // resolved issue for zoom from notification button\n      AD_Table_ID = ctx.getTabRecordContext(aPanel.curWindowNo, curTabNo, "AD_Table_ID", false);\n      Record_ID = ctx.getTabRecordContext(aPanel.curWindowNo, curTabNo, "Record_ID", false);\n\n      //AD_Table_ID = ctx.getContextAsInt(aPanel.curWindowNo, curTabNo, "AD_Table_ID");\n      //Record_ID = ctx.getContextAsInt(aPanel.curWindowNo, curTabNo, "Record_ID");\n    }\n    if (AD_Table_ID < 0) AD_Table_ID = ctx.getContextAsInt(aPanel.curWindowNo, "AD_Table_ID");\n    if (Record_ID < 0) Record_ID = ctx.getContextAsInt(aPanel.curWindowNo, "Record_ID");\n\n    //  Zoom Button\n    if (columnName.equals("Record_ID")) {\n      VIS.AEnv.zoom(AD_Table_ID, Record_ID);\n      return;\n    } //  Zoom\n\n    //  save first\t---------------\n\n    var needExecute = true;\n\n    //check action type\n\n    //Undo  and tab change   \n    if (vButton.getField().getIsAction() && vButton.getField().getAction() === "MTU") {\n      aPanel.cmd_ignore();\n      aPanel.tabActionPerformed(aPanel.vTabbedPane.getNextTabId(vButton.getField().getTabSeqNo()), vButton.getField().getAction(), "", vButton.getField().getActionParams());\n      needExecute = false;\n    } else if (curCtrller.curTab.needSave(true, false)) {\n      needExecute = false;\n      curCtrller.cmd_save(true, function (result) {\n        if (result) {\n          aPanel.actionButtonCallBack(vButton, startWOasking, batch, dateScheduledStart, columnName, ctx, curCtrller);\n        }\n      });\n    }\n\n    /**\r\n     *  Start Process ----\r\n     */\n    if (needExecute) {\n      return aPanel.actionButtonCallBack(vButton, startWOasking, batch, dateScheduledStart, columnName, ctx, curCtrller);\n    }\n  };\n  APanel.prototype.actionButtonCallBack = function (vButton, startWOasking, batch, dateScheduledStart, columnName, ctx, self) {\n    var table_ID = self.curTab.getAD_Table_ID();\n    //\tRecord_ID\n    var record_ID = self.curTab.getRecord_ID();\n    var curTab = self.curTab;\n    var curGC = self.curGC;\n    var aPanel = this;\n    var curWindowNo = this.curWindowNo;\n    var mField = vButton.getField();\n\n    //\tRecord_ID - Language Handling\n    if (record_ID == -1 && curTab.getKeyColumnName().equals("AD_Language")) record_ID = ctx.getContextAsInt(curWindowNo, "AD_Language_ID");\n    //\tRecord_ID - Change Log ID\n    if (record_ID == -1 && (vButton.getProcess_ID() == 306 || vButton.getProcess_ID() == 307)) {\n      var id = curTab.getValue("AD_ChangeLog_ID");\n      record_ID = id;\n    }\n    //\tRecord_ID - EntityType\n    if (record_ID == -1 && curTab.getKeyColumnName().equals("EntityType")) {\n      record_ID = curTab.getValue("AD_EntityType_ID");\n    }\n    //\tEnsure it\'s saved\n    if (record_ID == -1 && curTab.getKeyColumnName().toUpperCase().endsWith("_ID")) {\n      VIS.ADialog.error("SaveErrorRowNotFound", true, "");\n      return;\n    }\n\n    /*Special handling\r\n      Move to next tab */\n    if (mField.getIsAction()) {\n      this.tabActionPerformed(this.vTabbedPane.getNextTabId(mField.getTabSeqNo()), mField.getAction(), mField.getActionName(), mField.getActionParams());\n      return true;\n    }\n\n    //\tPop up Payment Rules\n    if (columnName.equals("PaymentRule")) {\n      var vp = new VIS.VPayment(curWindowNo, curTab, vButton);\n      vp.show();\n      vp.init();\n      vp.onClose = function () {\n        if (vp.isInitOK()) {\n          curGC.dynamicDisplay(vButton.getName());\n          curGC.cmd_save(false);\n          this.checkAndCallProcess(vButton, table_ID, record_ID, ctx, self, startWOasking, batch);\n        }\n      };\n      return;\n    } //\tPaymentRule\n\n    //\tPop up Document Action (Workflow)\n    else if (columnName.equals("DocAction")) {\n      var vda = new VIS.VDocAction(curWindowNo, curTab, record_ID);\n      vda.show();\n      vda.onClose = function () {\n        //\tSomething to select from?\n        if (vda.getNumberOfOptions() == 0) {\n          vda.dispose();\n          aPanel.log.info("DocAction - No Options");\n          return;\n        } else {\n          // vda.setVisible(true);\n          if (!vda.isStartProcess()) {\n            vda.dispose();\n            return;\n          }\n          batch = vda.isBatch();\n          //  dateScheduledStart = vda.getDateScheduledStart();\n          startWOasking = true;\n          aPanel.checkAndCallProcess(vButton, table_ID, record_ID, ctx, self, startWOasking, batch);\n          vda.dispose();\n          self = null;\n        }\n      };\n      return;\n    } //\tDocAction\n\n    //  Pop up Create From\n    else if (columnName.equals("CreateFrom")) {\n      //  m_curWindowNo\n      // Change by Lokesh Chauhan 18/05/2015\n      var chkModule = false;\n      if (curTab.getAD_Window_ID() == 341 || curTab.getAD_Window_ID() == 170) {\n        if (window.MMPM) {\n          var vvcf = MMPM.Requisition.prototype.create(curTab.getAD_Window_ID(), curTab.getRecord_ID());\n          chkModule = true;\n        } else if (window.DTD001) {\n          var vvcf = DTD001.Requisition.prototype.create(curTab.getAD_Window_ID(), curTab.getRecord_ID());\n          chkModule = true;\n        }\n      }\n      if (chkModule) {\n        return;\n      }\n      var vcf = VIS.VCreateFrom.prototype.create(curTab);\n      if (vcf != null) {\n        if (vcf.isInitOK()) {\n          vcf.showDialog();\n          vcf.onClose = function (value) {\n            vcf.dispose();\n            curTab.dataRefresh(); //DataRefreshRow\n          };\n          vcf = null;\n        } else {\n          vcf.dispose();\n        }\n        return;\n      }\n\n      //\telse may start process\n    } //\tCreateFrom\n    else if (columnName.equals("GenerateSticker")) {\n      if (window.DTD001) {\n        var vvcf = DTD001.StickerProduct.prototype.create(curTab.getAD_Window_ID(), curTab.getRecord_ID());\n      }\n      return;\n    } else if (columnName.equals("DTD001_GenerateSticker")) {\n      if (window.DTD001) {\n        var vvcf = DTD001.MRProductSticker.create(curTab.getAD_Window_ID(), curTab.getRecord_ID(), curTab.getTabLevel());\n      }\n      return;\n    }\n    //Lakhwinder\n    //requested by Mohit ,Mukesh Arora\n    else if (columnName.equals("BGT01_CreateLinePo")) {\n      if (window.BGT01) {\n        BGT01.CreateLineMovement(curTab.getAD_Window_ID(), curTab.getAD_Tab_ID(), curTab.getRecord_ID());\n      }\n      return;\n    }\n\n    //  Posting -----\n    else if (columnName == "Posted" && VIS.MRole.getDefault().getIsShowAcct()) {\n      //  Check Doc Status\n      var processed = VIS.context.getWindowContext(curWindowNo, "Processed"); //\n      if (processed != "Y") {\n        var docStatus = VIS.context.getWindowContext(curWindowNo, "DocStatus");\n        if (this.DocActionVariables.STATUS_COMPLETED == docStatus || this.DocActionVariables.STATUS_CLOSED == docStatus || this.DocActionVariables.STATUS_REVERSED == docStatus || this.DocActionVariables.STATUS_VOIDED == docStatus) ;else {\n          //ADialog.error(m_curWindowNo, this, "PostDocNotComplete");\n          VIS.ADialog.info(VIS.Msg.getMsg("PostDocNotComplete"));\n          return;\n        }\n      }\n\n      //  Check Post Status\n      var ps = curTab.getValue("Posted");\n      if (ps != null && ps == "Y") {\n        //get Current record orgID by window no\n        var obj = new VIS.AcctViewer(VIS.context.getAD_Client_ID(), curTab.getAD_Table_ID(), curTab.getRecord_ID(), curWindowNo, curTab.getAD_Window_ID());\n        if (obj != null) {\n          aPanel.setBusy(false);\n          obj.showDialog();\n        }\n        obj = null;\n      } else {\n        //  if (VIS.ADialog.ask("PostImmediate?")) {\n        VIS.ADialog.confirm("PostImmediate?", true, "", "Confirm", function (results) {\n          if (results) {\n            aPanel.setBusy(true, true);\n            var force = ps != null && ps != "N"; //\tforce when problems\n            //check for old and new posting logic\n            checkPostingByNewLogic(function (result) {\n              var postingByNewLogic = false;\n              if (result == "Yes") {\n                postingByNewLogic = true;\n              }\n              if (window.FRPT && postingByNewLogic) {\n                var orgID = Number(VIS.context.getWindowTabContext(curWindowNo, 0, "AD_Org_ID"));\n                var winID = curTab.getAD_Window_ID();\n                var docTypeID = Number(VIS.context.getWindowTabContext(curWindowNo, 0, "C_DocType_ID"));\n                var postObj = FRPT.PostingLogic(curWindowNo, curTab.getAD_Table_ID(), curTab.getRecord_ID(), force, orgID, winID, docTypeID, function () {\n                  curGC.dataRefresh();\n                  aPanel.setBusy(false, true);\n                  return;\n                });\n              } else {\n                $.ajax({\n                  url: VIS.Application.contextUrl + "Posting/PostImmediate",\n                  dataType: "json",\n                  data: {\n                    AD_Client_ID: VIS.context.getAD_Client_ID(),\n                    AD_Table_ID: curTab.getAD_Table_ID(),\n                    Record_ID: curTab.getRecord_ID(),\n                    force: force\n                  },\n                  error: function (e) {\n                    aPanel.setBusy(false, true);\n                    VIS.ADialog.info(\'ERRORGettingPostingServer\');\n                    //bsyDiv[0].style.visibility = "hidden";\n                  },\n                  success: function (data) {\n                    if (data.result != "OK") {\n                      aPanel.setBusy(false, true);\n                      VIS.ADialog.info(data.result);\n                    } else {\n                      aPanel.setBusy(false, true);\n                      curGC.dataRefresh();\n                      //refresh Row\n                    }\n                  }\n                });\n              }\n            });\n          } else {\n            aPanel.setBusy(false, true);\n            return false;\n          }\n        });\n        //}\n        // else return false;\n      }\n      return false;\n    } //  Posted\n\n    //\tSend Email -----\n    else if (columnName.equals("SendNewEMail")) {\n      // AD_Process_ID = vButton.getProcess_ID();\n      //if (AD_Process_ID != 0)\n      //{\n      //}\n      ////\tMail Defaults\n      //String title = getTitle();\n      //String to = null;\n      //Object oo = m_curTab.getValue("AD_User_ID");\n      //if (oo instanceof Integer)\n      //{\n      //    MUser user = new MUser(Env.getCtx (), ((Integer)oo).intValue (), null);\n      //    to = user.getEMail();\n      //}\n      //if (to == null)\n      //    to = (String)m_curTab.getValue("EMail");\n      //String subject = (String)m_curTab.getValue("Name");;\n      //String message = "";\n      //new EMailDialog (Env.getFrame(this), title,\n      //\t\tMUser.get(Env.getCtx()),\n      //\t\tto,\tsubject, message,\n      //\t\tnull);\n      return;\n    } else if (columnName.equals("OpenCardDialog")) {\n      aPanel.cmd_cardDialog(true);\n    }\n    if (vButton.AD_Process_ID > 0) {\n      var ret = this.checkAndCallProcess(vButton, table_ID, record_ID, ctx, self);\n      self = null;\n      return ret;\n    } else if (vButton.AD_Form_ID > 0) {\n      if (VIS.MRole.getFormAccess(vButton.AD_Form_ID)) {\n        var wForm = new VIS.WForm(VIS.Env.getScreenHeight(), vButton.AD_Form_ID, curGC, curWindowNo);\n      } else {\n        VIS.ADialog.warn("AccessTableNoView");\n      }\n    }\n    if (aPanel.getIsWindowAction(vButton.mField.getAD_Reference_Value_ID())) {\n      switch (vButton.mField.vo.DefaultValue) {\n        case \'APT\':\n          aPanel.cmd_appointment();\n          break;\n        case \'BUE\':\n          aPanel.cmd_batchUpdatedialog();\n          break;\n        case \'EML\':\n          aPanel.cmd_email();\n          break;\n        case \'SMS\':\n          aPanel.cmd_sms();\n          break;\n        case \'LER\':\n          aPanel.cmd_letter();\n          break;\n        case \'TAK\':\n          aPanel.cmd_task();\n          break;\n        case \'CHT\':\n          aPanel.cmd_chat();\n          break;\n        case \'ATT\':\n          aPanel.cmd_attachment(vButton.getField().evaluateLogicsOnly());\n          break;\n        case \'HIY\':\n          aPanel.cmd_history();\n          break;\n        case \'CRT\':\n          aPanel.cmd_request();\n          break;\n        case \'CRD\':\n          aPanel.cmd_new(true);\n          break;\n        case \'SRD\':\n          aPanel.cmd_subscribe();\n          break;\n        case \'ZAS\':\n          aPanel.cmd_zoomAcross();\n          break;\n        case \'MTE\':\n          aPanel.cmd_markToExport();\n          break;\n        case \'IMP\':\n          aPanel.cmd_ImportMap();\n          break;\n        case \'RSD\':\n          aPanel.cmd_RecordShared();\n          break;\n        case \'NRD\':\n          aPanel.cmd_new();\n          break;\n        case \'SAR\':\n          aPanel.cmd_save(false);\n          break;\n        case \'DRD\':\n          aPanel.cmd_delete();\n          break;\n        case \'RQY\':\n          aPanel.cmd_refresh();\n          break;\n        case \'BVW\':\n          aPanel.cmd_back();\n          break;\n        case \'UNO\':\n          aPanel.cmd_ignore();\n          break;\n        case \'RET\':\n          aPanel.cmd_report();\n          break;\n        case \'PRT\':\n          aPanel.cmd_print();\n          break;\n        default:\n          actionVADMSDocument(aPanel, vButton.value);\n      }\n      curTab = curGC = aPanel = null;\n    }\n    ;\n  };\n\n  /**\r\n   * Handle widget Action\r\n   * @param {any} actionParams\r\n   */\n  APanel.prototype.landingPageActionPerformed = function (actionParams) {\n    this.vTabbedPane.restoreTabChange();\n    this.showLandingPage(false);\n    this.tabActionPerformed(this.vTabbedPane.getNextTabId(actionParams.TabIndex), "", actionParams);\n  };\n  function checkPostingByNewLogic(callback) {\n    $.ajax({\n      url: VIS.Application.contextUrl + "Posting/PostByNewLogic",\n      dataType: "json",\n      async: true,\n      data: {\n        AD_Client_ID: VIS.context.getAD_Client_ID()\n      },\n      error: function (e) {\n        VIS.ADialog.info(VIS.Msg.getMsg(\'ERRORGettingPostingServer\'));\n      },\n      success: function (data) {\n        if (callback) {\n          callback(data.result);\n        }\n      }\n    });\n  }\n  APanel.prototype.checkAndCallProcess = function (vButton, table_ID, record_ID, ctx, curCtrler, startWOasking, batch) {\n    if (vButton.getProcess_ID() == 0) return;\n    //\tSave item changed\n\n    var canExecute = true;\n    var aPanel = this;\n    if (curCtrler.curTab.needSave(true, false)) {\n      canExecute = false;\n      curCtrler.cmd_save(true, function (result) {\n        if (!result) return;else {\n          return btnClickAfterSave2(vButton, table_ID, record_ID, ctx, aPanel, startWOasking, batch);\n        }\n      });\n    }\n    if (canExecute) {\n      return btnClickAfterSave2(vButton, table_ID, record_ID, ctx, aPanel, startWOasking, batch);\n    }\n  };\n  function btnClickAfterSave2(vButton, table_ID, record_ID, ctx, aPanel, startWOasking, batch) {\n    var columnName = vButton.getName();\n    var ret = false;\n    var needExecute = true;\n    try {\n      // If admin wants user to set background option\n      // If background checkbox is checked, then user can see the setting throguh dialog but cannot change\n      // if this checkbox is unchecked, then user will not be asked about setting, but process execute according to settings in DB.\n      if (vButton.getAskUserBGProcess() == true || vButton.getIsBackgroundProcess() == true) {\n        // Create Custom UI and pass root div as parameter to confirmCustomUI.\n        var $customDIv = $(\'<div class="vis-confirm-popup-check"><label>\' + VIS.Msg.translate(VIS.context, \'IsBackgroundProcess\') + \'</label></div>\');\n        var $chkBG = $(\'<input type="checkbox">\');\n        var isChecked = vButton.getIsBackgroundProcess();\n        // Set (Disable or enable) and (checked or unchecked) based on DB setting\n        $chkBG.prop(\'checked\', isChecked);\n        $chkBG.prop(\'disabled\', isChecked);\n        $customDIv.prepend($chkBG);\n        VIS.ADialog.confirmCustomUI("StartProcess?", true, vButton.getDescription() + "\\n" + vButton.getHelp(), "Confirm", $customDIv, function (result) {\n          if (result) {\n            isBg = $chkBG.is(\':checked\');\n            return btnClickAfterSave2New(vButton, table_ID, record_ID, ctx, batch, aPanel, ret, columnName, isBg);\n          }\n        });\n      } else {\n        var isbg = vButton.getIsBackgroundProcess();\n        //\tAsk user to start process, if Description and Help is not empty\n        if (!startWOasking && !(vButton.getDescription().equals("") && vButton.getHelp().equals(""))) {\n          needExecute = false;\n          VIS.ADialog.confirm("StartProcess?", true, vButton.getDescription() + "\\n" + vButton.getHelp(), "Confirm", function (result) {\n            if (result) {\n              return btnClickAfterSave2New(vButton, table_ID, record_ID, ctx, batch, aPanel, ret, columnName, isbg);\n            }\n          });\n        }\n        if (needExecute) {\n          return btnClickAfterSave2New(vButton, table_ID, record_ID, ctx, batch, aPanel, ret, columnName, isbg);\n        }\n      }\n\n      // }\n\n      //if (needExecute) {\n      //    return btnClickAfterSave2New(vButton, table_ID, record_ID, ctx, batch, aPanel, ret, columnName);\n      //}\n    } catch (ex) {\n      VIS.ADialog.error("Error?", true, "error in process : " + ex.message);\n      ret = false;\n    }\n    return false;\n  }\n  ;\n  function btnClickAfterSave2New(vButton, table_ID, record_ID, ctx, batch, aPanel, ret, columnName, isbackground) {\n    var title = vButton.getDescription();\n    if (title == null || title.length == 0) title = columnName;\n    var pi = new VIS.ProcessInfo(title, vButton.getProcess_ID(), table_ID, record_ID);\n    pi.setAD_User_ID(ctx.getAD_User_ID());\n    pi.setAD_Client_ID(ctx.getAD_Client_ID());\n    pi.setAD_Window_ID(aPanel.$parentWindow === undefined ? 0 : aPanel.$parentWindow.AD_Window_ID); // vinay bhatt window id\n    pi.setUseCrystalReportViewer(ctx.getIsUseCrystalReportViewer());\n    pi.setIsBatch(batch);\n    pi.setIsBackground(isbackground);\n    //start process\n\n    var pCtl = new VIS.ProcessCtl(aPanel, pi, null);\n    //pCtl.setIsPdf(vButton.isPdf);\n    //pCtl.setIsCsv(vButton.isCsv);\n    if (vButton.isPdf) {\n      pi.setFileType(VIS.ProcessCtl.prototype.REPORT_TYPE_PDF);\n    } else if (vButton.isCsv) {\n      pi.setFileType(VIS.ProcessCtl.prototype.REPORT_TYPE_CSV);\n    }\n    pCtl.process(aPanel.curWindowNo); //  calls lockUI, unlockUI\n    ret = true;\n    aPanel = null;\n    vButton = null;\n    batch = false;\n    startWOasking = false;\n    actionProcessAfterSave = null;\n    return ret;\n  }\n  ;\n  function actionVADMSDocument(aPanel, action) {\n    if (window.VADMS) {\n      if (action == \'CDT\') {\n        var frame = new VIS.CFrame();\n        var editDoc = new window.VADMS.editDocument(0, "", 0, "", 0, null, "", aPanel.curTab.getAD_Window_ID(), aPanel.curTab.getAD_Table_ID(), aPanel.curTab.getRecord_ID());\n        frame.setName(VIS.Msg.getMsg("VADMS_CreateDocument"));\n        frame.setTitle(VIS.Msg.getMsg("VADMS_CreateDocument"));\n        frame.hideHeader(true);\n        frame.setContent(editDoc);\n        editDoc.initialize();\n        frame.show();\n      } else if (action == \'ADF\') {\n        var documentID = VIS.context.getContext("VADMS_Document_ID");\n        if (documentID.length > 0) {\n          var dataIn = {\n            docID: documentID,\n            winID: aPanel.curTab.getAD_Window_ID(),\n            tableID: aPanel.curTab.getAD_Table_ID(),\n            recID: aPanel.curTab.getRecord_ID()\n          };\n          $.ajax({\n            url: VIS.Application.contextUrl + "JsonData/AttachFrom",\n            dataType: "json",\n            data: dataIn,\n            success: function (data) {\n              if (JSON.parse(data) == "OK") {\n                aPanel.curTab.loadDocuments();\n                aPanel.aViewDocument.setPressed(aPanel.curTab.hasDocument());\n                //if (!VIS.ADialog.ask("AttachWithOther")) {\n                //    VIS.context.setContext("VADMS_Document_ID", 0);\n                //}\n\n                VIS.ADialog.confirm("AttachWithOther", true, "", "Confirm", function (result) {\n                  if (!result) {\n                    VIS.context.setContext("VADMS_Document_ID", 0);\n                  }\n                });\n                aPanel = null;\n              } else {\n                VIS.ADialog.error(\'NotAttached\', true, "");\n              }\n            }\n          });\n        }\n      } else if (action == \'VDT\') {\n        var frame = new VIS.CFrame();\n        var doc = new window.VADMS.DocumentManagementSystem();\n        frame.setName(VIS.Msg.getMsg("VADMS_Document"));\n        frame.setTitle(VIS.Msg.getMsg("VADMS_Document"));\n        frame.hideHeader(true);\n        doc.setWindowNo(VIS.Env.getWindowNo());\n        doc.setWindowID(aPanel.curTab.getAD_Window_ID());\n        doc.setTableID(aPanel.curTab.getAD_Table_ID());\n        doc.setRecordID(aPanel.curTab.getRecord_ID());\n        doc.setWindowName(aPanel.gridWindow.getName());\n        frame.setContent(doc);\n        doc.initialize();\n        frame.show();\n      } else if (action == \'UDT\') {\n        window.VADMS.uploaddocument(0, aPanel.curTab.getAD_Window_ID(), aPanel.curTab.getAD_Table_ID(), aPanel.curTab.getRecord_ID(), aPanel.$parentWindow.name, aPanel.curTab.getName());\n      } else if (action == \'CAC\') {\n        var wtrid = aPanel.curTab.getAD_Window_ID() + "|" + aPanel.curTab.getAD_Table_ID() + "|" + aPanel.curTab.getRecord_ID() + "|" + aPanel.$parentWindow.name + "|" + aPanel.curTab.getName();\n        VIS.context.setContext("VADMS_WinTableRecID", wtrid);\n        VIS.ADialog.info(\'VADMS_CodeSetIntoContext\', true, "");\n      }\n    } else {\n      VIS.ADialog.error(\'PleaseInstallDMSModule\', true, "");\n    }\n  }\n\n  /**\r\n   *\ttab change\r\n   *  @param action tab item\'s id\r\n   */\n  APanel.prototype.tabActionPerformed = function (action, actionType, actionName, actionParams) {\n    /* Check for any window or form added in action*/\n    if ((actionType == \'WIW\' || actionType == \'FOM\') && actionName != "") {\n      var obj = {\n        tableID: this.curTab.getAD_Table_ID(),\n        actionType: actionType,\n        actionName: actionName\n      };\n      var $this = this;\n      $this.setBusy(true);\n      $.ajax({\n        url: baseUrl + "JsonData/CheckTableMapWithAction",\n        type: "POST",\n        datatype: "json",\n        contentType: "application/json; charset=utf-8",\n        data: JSON.stringify(obj)\n      }).done(function (json) {\n        $this.setBusy(false);\n        list = JSON.parse(json);\n        var popover = $("<div>");\n        var ul = $(\'<ul class=vis-apanel-rb-ul>\');\n        popover.append(ul);\n        if (list.length > 1) {\n          for (var i in list) {\n            var li = $("<li data-id=\'" + list[i].ID + "\' data-action=\'" + list[i].ActionType + "\'>");\n            li.append(list[i].Name);\n            li.on(\'click\', function (e) {\n              e.stopImmediatePropagation();\n              var ID = $(this).data(\'id\');\n              var atype = $(this).data(\'action\');\n              VIS.viewManager.startAction(atype, ID);\n              var overlay = $(\'#w2ui-overlay-main\');\n              overlay.hide();\n              overlay = null;\n            });\n            ul.append(li);\n          }\n          $(document.activeElement).w2overlay(popover.clone(true), {\n            align: "right",\n            css: {\n              height: \'200px\'\n            }\n          });\n        } else if (list.length == 1) {\n          VIS.viewManager.startAction(list[0].ActionType, list[0].ID);\n        }\n      }).error(function () {\n        $this.setBusy(false);\n      });\n      return;\n    }\n    if (!this.vTabbedPane.getIsTabChanged(action)) {\n      console.log("tabNotChange");\n      this.setBusy(false, true);\n      return false;\n    }\n    var back = false;\n    var isAPanelTab = false;\n    var tabEle = this.vTabbedPane.getTabElement(action);\n    var curEle = this.curST || this.curGC;\n    var oldGC = null;\n\n    //Handle Open Tab in Dialog\n    if (actionType == \'OTD\') {\n      VIS.TabMngr.show(tabEle, curEle.gTab.keyColumnName, curEle.gTab.getRecord_ID());\n      this.vTabbedPane.restoreTabChange();\n      return;\n    }\n\n    //// To Clear SearchText Box on Tab Change\n    this.toggleASearchIcons(false, false);\n    this.setAdvancedSerachText(true, "");\n    //// END\n\n    var selfPanel = this;\n    //  Workbench Tab Change\n    if (this.vTabbedPane.getIsWorkbench()) {\n      //\n    } else {\n      //  Just a Tab Change\n      //log.Info("Tab=" + tp);\n      this.curWinTab = this.vTabbedPane;\n      var tpIndex = this.curWinTab.getSelectedIndex();\n      back = tpIndex < this.curTabIndex;\n      var gc = null,\n        st = null;\n      if (tabEle instanceof VIS.VSortTab) {\n        st = tabEle;\n        isAPanelTab = true;\n      } else {\n        gc = tabEle;\n      }\n      var canExecute = true;\n      if (this.curGC != null) {\n        //  has anything changed?\n        if (this.curTab.needSave(true, false)) {\n          //  do we have real change\n          if (this.curTab.needSave(true, true)) {\n            //\tAutomatic Save\n            if (this.ctx.isAutoCommit(this.curWindowNo)) {\n              var isCheckListRequire = this.curGC.IsCheckListRequire();\n              if (!isCheckListRequire) {\n                this.vTabbedPane.restoreTabChange(); //m_curWinTab.setSelectedIndex(m_curTabIndex);\n                this.setBusy(false, true);\n                VIS.ADialog.error("CheckListRequired");\n                return false;\n              }\n              if (!this.curTab.dataSave(true)) {\n                //  there is a problem, so we go back\t\n                this.vTabbedPane.restoreTabChange(); //m_curWinTab.setSelectedIndex(m_curTabIndex);\n                this.setBusy(false, true);\n                return false;\n              }\n            }\n            //    //  explicitly ask when changing tabs\n            //else if (VIS.ADialog.ask("SaveChanges?", true, this.curTab.getCommitWarning(), \'\')) {//  yes we want to save\n            //    if (!this.curTab.dataSave(true)) {   //  there is a problem, so we go back\n            //        //m_curWinTab.setSelectedIndex(m_curTabIndex);\n            //        this.vTabbedPane.restoreTabChange();\n            //        this.setBusy(false, true);\n            //        return false;\n            //    }\n            //}\n            //else    //  Don\'t save\n            //    this.curTab.dataIgnore();\n            else {\n              canExecute = false;\n              VIS.ADialog.confirm("SaveChanges?", true, this.curTab.getCommitWarning(), \'Confirm\', function (results) {\n                if (results) {\n                  if (!selfPanel.curTab.dataSave(true)) {\n                    //  there is a problem, so we go back\n                    //m_curWinTab.setSelectedIndex(m_curTabIndex);\n                    selfPanel.vTabbedPane.restoreTabChange();\n                    selfPanel.setBusy(false, true);\n                    return false;\n                  }\n                } else {\n                  selfPanel.curTab.dataIgnore();\n                }\n                curEle = selfPanel.curGC;\n                oldGC = selfPanel.curGC;\n                selfPanel.curGC = null;\n                //selfPanel.tabActionPerformedCallback3(curEle, isAPanelTab, gc, tpIndex);\n\n                if (selfPanel.curST != null) {\n                  selfPanel.curST.saveData();\n                  selfPanel.curST.unRegisterAPanel();\n                  curEle = selfPanel.curST;\n                  selfPanel.curST = null;\n                }\n                selfPanel.curTabIndex = tpIndex;\n                if (!isAPanelTab) selfPanel.curGC = gc;\n                selfPanel.tabActionPerformedCallback(action, back, isAPanelTab, tabEle, curEle, oldGC, gc, st);\n              });\n            }\n          } else\n            //  new record, but nothing changed\n            selfPanel.curTab.dataIgnore();\n        }\n        if (canExecute) {\n          curEle = this.curGC;\n          oldGC = this.curGC;\n          this.curGC = null;\n        }\n      }\n      if (canExecute) {\n        if (this.curST != null) {\n          this.curST.saveData();\n          this.curST.unRegisterAPanel();\n          curEle = this.curST;\n          this.curST = null;\n        }\n        this.curTabIndex = tpIndex;\n        if (!isAPanelTab) this.curGC = gc;\n      }\n\n      //assign action params\n      if (actionParams) this.actionParams = actionParams;else this.actionParams = {};\n      var clickedTabSeq = tpIndex; //Get Tab index\n      var clickedTabID = action; // Get the tab ID\n      var winNo = this.curWindowNo;\n\n      //Remove tab which sequence ias higher then ccurrent selected tab\n      this.tabStack = this.tabStack.filter(function (tab) {\n        return tab.tabSeq <= clickedTabSeq;\n      });\n\n      //Check Selected tab is exist or not\n      var clickedTab = undefined;\n      if (this.tabStack.length > 0) {\n        clickedTab = this.tabStack.find(function (tab) {\n          return tab.tabSeq === clickedTabSeq;\n        });\n      }\n      if (!clickedTab) {\n        // if selected tab not exist then add.\n        this.tabStack.push({\n          tabSeq: clickedTabSeq,\n          tabID: clickedTabID,\n          tabView: [isAPanelTab ? \'\' : gc.getMTab().getTabLayout()]\n        });\n      }\n    }\n    if (canExecute) {\n      selfPanel.tabActionPerformedCallback(action, back, isAPanelTab, tabEle, curEle, oldGC, gc, st);\n    }\n    return true;\n  };\n  APanel.prototype.tabActionPerformedCallback = function (action, back, isAPanelTab, tabEle, curEle, oldGC, gc, st) {\n    curEle.setVisible(false);\n    curEle.getRoot().detach();\n    this.getLayout().prepend(tabEle.getRoot());\n    this.vTabbedPane.setSelectedTab(action); //set Seleted tab\n    var keepFilters = back;\n    if (isAPanelTab) {\n      tabEle.setVisible(true);\n      this.curST = st;\n      st.registerAPanel(this);\n      st.loadData();\n    } else {\n      var mTab = gc.getMTab();\n      tabEle.setVisible(true);\n      gc.activate(oldGC, this.actionParams);\n      if (oldGC) oldGC.detachDynamicAction();\n      this.curTab = gc.getMTab();\n      this.setDynamicActions();\n      //PopulateSerachCombo(false);\n      /*\tRefresh only current row when tab is current(parent)*/\n      if (!this.curTab.getIsZoomAction() && this.curTab.getTabLevel() > 0) {\n        //if (!gc.isZoomAction && this.curTab.getTabLevel() > 0) {\n        var queryy = new VIS.Query();\n        this.curTab.query = queryy;\n        keepFilters = false;\n      }\n      var defaultTabLayout = mTab.getTabLayout();\n      if (back && this.curTab.getIsCurrent()) {\n        if (this.curTab.getTabLevel() == 0) {\n          if (this.curTab.searchText) {\n            this.setAdvancedSerachText(false, this.curTab.searchText);\n          } else if (this.curTab.hasSavedAdvancedSearch) {\n            this.toggleASearchIcons(true, false);\n          }\n        } else {\n          if (this.curTab.searchText) {\n            this.setAdvancedSerachText(false, this.curTab.searchText);\n          } else if (this.curTab.hasSavedAdvancedSearch) {\n            this.toggleASearchIcons(true, false);\n          }\n        }\n        gc.dataRefresh();\n        if (this.tabStack.length > 0) {\n          var currentTabSeq = this.curWinTab.getSelectedIndex();\n          var currentTab = this.tabStack.find(function (tab) {\n            return tab.tabSeq === currentTabSeq;\n          });\n          if (currentTab.tabView.length > 0) {\n            defaultTabLayout = currentTab.tabView[currentTab.tabView.length - 1];\n          }\n        }\n      } else\n        //\tRequery and bind\n        {\n          var resetLayout = mTab.getIsResetLayout();\n          if (this.actionParams.TabLayout && [\'N\', \'Y\', \'C\'].indexOf(this.actionParams.TabLayout) > -1) {\n            defaultTabLayout = this.actionParams.TabLayout;\n            resetLayout = true;\n          }\n          /* if reset tab is true then set default view which is set on tab */\n          if (resetLayout) {\n            if (defaultTabLayout == \'N\') {\n              gc.switchMultiRow();\n            } else if (defaultTabLayout == \'Y\') {\n              gc.switchSingleRow(true);\n            } else if (defaultTabLayout == \'C\') {\n              gc.switchCardRow(true);\n            }\n          } else {\n            if (gc.getIsSingleRow()) {\n              defaultTabLayout = \'Y\';\n            } else if (gc.getIsCardRow()) {\n              defaultTabLayout = \'C\';\n            } else if (!gc.getIsMapRow()) {\n              defaultTabLayout = \'N\';\n            }\n          }\n          this.curTab.getTableModel().setCurrentPage(1);\n          if (!this.curGC.onDemandTree || gc.isZoomAction) {\n            this.clearSearchText();\n            this.setDefaultSearch(gc);\n            if ((this.actionParams.TabWhereClause || \'\') != \'\') {\n              // check if param has where clause or not\n              var query = new VIS.Query(this.curTab.getTableName(), false);\n              query.addRestriction(this.actionParams.TabWhereClause);\n              this.curTab.setQuery(query, true);\n            }\n            gc.query(this.curTab.getOnlyCurrentDays(), 0, false); //\tupdated\n          } else {\n            this.setDefaultSearch(gc);\n          }\n        }\n\n      //Change Icon\n      if (defaultTabLayout == \'N\') {\n        this.showHideViewIcon(this.aMulti);\n      } else if (defaultTabLayout == \'Y\') {\n        this.showHideViewIcon(this.aSingle);\n      } else if (defaultTabLayout == \'C\') {\n        this.showHideViewIcon(this.aCard);\n      }\n      if (this.curGC.onDemandTree) {\n        this.aShowSummaryLevel.show();\n      } else {\n        this.aShowSummaryLevel.hide();\n      }\n    }\n    var gPanel = null;\n    if (this.curGC) {\n      gPanel = this.curGC.vGridPanel;\n    } else {\n      gPanel = {};\n      gPanel.setEnabled = function (action, enable) {\n        ;\n      };\n    }\n    //\tOrder Tab\n    if (isAPanelTab) {\n      this.showHideViewIcon(null);\n      //this.aMulti.setPressed(false);\n      //this.aMulti.setEnabled(false);\n      //this.aCard.setEnabled(false);\n      this.aCardDialog.setEnabled(false);\n      this.aNew.setEnabled(false);\n      //gPanel.setEnabled("NRD", false);\n\n      this.aDelete.setEnabled(false);\n      // gPanel.setEnabled("DRD", false);\n\n      this.aFind.setEnabled(false);\n      this.aBatchUpdate.setEnabled(false);\n      this.aRefresh.setEnabled(false);\n      //gPanel.setEnabled("RQY", false);\n\n      this.aNext.setEnabled(false);\n      this.aLast.setEnabled(false);\n      this.aFirst.setEnabled(false);\n      this.aPrevious.setEnabled(false);\n      this.aPageFirst.setEnabled(false);\n      this.aPageUp.setEnabled(false);\n      this.aPageLast.setEnabled(false);\n      this.aPageDown.setEnabled(false);\n      //aAttachment.setEnabled(false);\n      //aChat.setEnabled(false);\n    } else\n      //\tGrid Tab\n      {\n        //this.aMulti.setEnabled(true);\n        //this.aMulti.setPressed(this.curGC.getIsSingleRow() || this.curGC.getIsMapRow());\n        //this.aCard.setEnabled(true);\n        this.aCardDialog.setEnabled(true);\n        this.aFind.setEnabled(true);\n        this.aBatchUpdate ? this.aBatchUpdate : \'\';\n        this.aRefresh.setEnabled(true);\n        gPanel.setEnabled("RQY", true);\n        //aAttachment.setEnabled(true);\n        //aChat.setEnabled(true);\n      }\n    this.showTabPanel(!this.actionParams.IsHideTabPanel && this.curTab.getHasPanel());\n    this.showFilterPanel(keepFilters);\n    if (this.actionParams.IsShowFilterPanel != null) {\n      //set\n      this.startFilterPanel(!this.actionParams.IsShowFilterPanel);\n    }\n    //}\n\n    this.refresh();\n    this.setTabNavigation();\n\n    /*******    END Tab Panels     ******/\n\n    if (this.aParentDetail) this.aParentDetail.evaluate(tabEle);\n    curEle = tabEle = null;\n    if (this.curTab.getAD_Process_ID() == 0) {\n      this.aPrint.setEnabled(false);\n      gPanel.setEnabled("PRT", false);\n    } else {\n      this.aPrint.setEnabled(true);\n      gPanel.setEnabled("PRT", true);\n    }\n    if (!this.actionParams.IsHideMapToggle && this.curTab.getIsMapView()) {\n      this.aMap.show();\n    } else {\n      this.aMap.hide();\n    }\n    if (this.actionParams.IsHideRecordNav || this.curTab.getIsHideRecordNav()) {\n      this.aNext.hide();\n      this.aPrevious.hide();\n    } else {\n      this.aNext.show();\n      this.aPrevious.show();\n    }\n\n    //Hide tool bar\n    if (this.actionParams.IsHideToolbar || this.gridWindow.getIsHideToolbar()) {\n      this.hideToolbar(true);\n    } else {\n      this.hideToolbar(false);\n    }\n    ;\n\n    //hide Tab Links\n    if (this.actionParams.IsHideTabLinks || this.gridWindow.getIsHideTabLinks()) {\n      this.hideTabLinks(true);\n    } else {\n      this.hideTabLinks(false);\n    }\n    ;\n\n    //hide action bar Links\n    if (this.actionParams.IsHideTabLinks || this.gridWindow.getIsHideTabLinks()) {\n      this.hideTabLinks(true);\n    } else {\n      this.hideTabLinks(false);\n    }\n    ;\n\n    //hide action bar Links\n    if (this.actionParams.IsHideActionbar || this.gridWindow.getIsHideActionbar()) {\n      this.hideActionbar(true);\n    } else {\n      this.hideActionbar(false);\n    }\n    ;\n    var selff = this;\n    //if (this.isShowSharedRecord && this.aSharedRecord) {\n    //    window.setTimeout(function () {\n    //        selff.aSharedRecord.setEnabled(true);\n    //        selff.aSharedRecord.setPressed(selff.curTab.hasShared(true));\n    //    }, 200);\n    //}\n  };\n  APanel.prototype.onQueryCompleted = function () {};\n  APanel.prototype.setDefaultSearch = function (gc) {\n    var $selfpanel = this;\n    var sqlUserSearch = "VIS_117";\n    var param = [];\n    param[0] = new VIS.DB.SqlParam("@AD_Tab_ID", this.curTab.getAD_Tab_ID());\n    param[1] = new VIS.DB.SqlParam("@AD_User_ID", parseInt(this.ctx.getAD_User_ID()));\n    param[2] = new VIS.DB.SqlParam("@AD_Tab_ID1", this.curTab.getAD_Tab_ID());\n    param[3] = new VIS.DB.SqlParam("@AD_User_ID1", parseInt(this.ctx.getAD_User_ID()));\n    param[4] = new VIS.DB.SqlParam("@AD_Client_ID", parseInt(this.ctx.getAD_Client_ID()));\n    param[5] = new VIS.DB.SqlParam("@AD_Tab_ID2", this.curTab.getAD_Tab_ID());\n    param[6] = new VIS.DB.SqlParam("@AD_Table_ID", this.curTab.getAD_Table_ID());\n    var data = executeDataSet(sqlUserSearch, param);\n    if (data && data.tables[0].rows && data.tables[0].rows.length > 0) {\n      $selfpanel.curTab.hasSavedAdvancedSearch = true;\n      if ($selfpanel.curTab.getTabLevel() == 0 && !gc.gTab.getIsZoomAction()) {\n        var hasDefaultSearch = false;\n        for (var i = 0; i < data.tables[0].rows.length; i++) {\n          if (data.tables[0].rows[i].cells["ad_defaultuserquery_id"] > 0) {\n            hasDefaultSearch = true;\n            $selfpanel.setAdvancedSerachText(false, data.tables[0].rows[i].cells["name"]);\n            var query = new VIS.Query($selfpanel.curTab.getTableName(), false);\n            query.addRestriction(data.tables[0].rows[i].cells["code"]);\n            $selfpanel.curTab.setQuery(query);\n            $selfpanel.defaultSearch = false;\n            $selfpanel.curTab.searchText = data.tables[0].rows[i].cells["name"];\n            toastr.success(VIS.Msg.getMsg("DefaultSerachExist"), \'\', {\n              timeOut: 4000,\n              "positionClass": "toast-top-center",\n              "closeButton": true\n            });\n          }\n        }\n        if (!$selfpanel.curTab.hasSavedAdvancedSearch) {\n          //var query = new VIS.Query($selfpanel.curTab.getTableName(), true);\n          //$selfpanel.curTab.setQuery(query);\n        }\n        $selfpanel.toggleASearchIcons(true, hasDefaultSearch);\n      } else {\n        //var query = new VIS.Query($selfpanel.curTab.getTableName(), true);\n        //$selfpanel.curTab.setQuery(query);\n        $selfpanel.toggleASearchIcons(true, false);\n      }\n    } else {\n      //var query = new VIS.Query($selfpanel.curTab.getTableName(), true);\n      //$selfpanel.curTab.setQuery(query);\n      $selfpanel.toggleASearchIcons(false, false);\n      $selfpanel.setAdvancedSerachText(true, "");\n    }\n\n    ///});\n  };\n\n  /**\r\n   *\tData Status Listener (row change)\t\t\t^ | v\r\n   *  @param e event \r\n   */\n  APanel.prototype.dataStatusChanged = function (e) {\n    var gPanel = null;\n    if (this.curGC) {\n      gPanel = this.curGC.vGridPanel;\n    } else {\n      gPanel = {};\n      gPanel.setEnabled = function (action, enable) {};\n    }\n    var dbInfo = e.getMessage();\n    var findPressed = this.curTab.getIsQueryActive() || this.curTab.getOnlyCurrentDays() > 0;\n    if (findPressed) dbInfo = "[ " + dbInfo + " ]";\n    this.statusBar.setStatusDB(dbInfo, e);\n    var $ths = this;\n    //\tSet Message / Info\n    if (e.getAD_Message() != null || e.getInfo() != null) {\n      var sb = new StringBuilder();\n      var msg = e.getAD_Message();\n      if (msg != null && msg.length > 0) sb.append(VIS.Msg.getMsg(e.getAD_Message()));\n      var info = e.getInfo();\n      if (info != null && info.length > 0) {\n        if (sb.length() > 0 && !sb.endsWith(":")) sb.append(": ");\n        sb.append(info);\n      }\n      if (sb.length() > 0) {\n        var pos = sb.indexOf("\\n");\n        if (pos != -1)\n          // replace \n          sb.replace("\\n", " - ");\n        this.setStatusLine(sb.toString(), e.getIsError());\n      }\n    }\n\n    //  Confirm Error with CallBack\n    if (e.getIsError() && !e.getIsConfirmed()) {\n      VIS.ADialogCallback.error(e.getAD_Message(), e.getInfo(), null, function () {\n        var lf = $ths.curTab.getLastFocus();\n        if (lf) {\n          lf.focus();\n          $ths.curTab.setLastFocus(null);\n        }\n      });\n      e.setConfirmed(true); //  show just once - if MTable.setCurrentRow is involved the status event is re-issued\n      this.errorDisplayed = true;\n    }\n    //  Confirm Warning with Call back\n    else if (e.getIsWarning() && !e.getIsConfirmed()) {\n      VIS.ADialogCallback.warn(e.getAD_Message(), e.getInfo(), null, function () {\n        var lf = $ths.curTab.getLastFocus();\n        if (lf) {\n          lf.focus();\n          $ths.curTab.setLastFocus(null);\n        }\n      });\n      e.setConfirmed(true); //  show just once - if MTable.setCurrentRow is involved the status event is re-issued\n    }\n\n    //\tupdate Navigation\n    var firstRow = e.getIsFirstRow();\n    this.aFirst.setEnabled(!firstRow);\n    this.aPrevious.setEnabled(!firstRow);\n    var lastRow = e.getIsLastRow();\n    this.aNext.setEnabled(!lastRow);\n    this.aLast.setEnabled(!lastRow);\n    var firstPage = e.getIsFirstPage();\n    this.aPageFirst.setEnabled(!firstPage);\n    this.aPageUp.setEnabled(!firstPage);\n    var lastPage = e.getIsLastPage();\n    this.aPageLast.setEnabled(!lastPage);\n    this.aPageDown.setEnabled(!lastPage);\n\n    //\tupdate Change\n    var changed = e.getIsChanged() || e.getIsInserting();\n    var readOnly = this.curTab.getIsReadOnly();\n    var insertRecord = !readOnly;\n    if (insertRecord) insertRecord = this.curTab.getIsInsertRecord();\n    this.aNew.setEnabled(!changed && insertRecord);\n    gPanel.setEnabled("NRD", !changed && insertRecord);\n    if (this.aCopy) {\n      this.aCopy.setEnabled(!changed && insertRecord);\n    }\n    this.aRefresh.setEnabled(!changed);\n    gPanel.setEnabled("RQY", !changed);\n    this.aDelete.setEnabled(!changed && !readOnly && e.getCurrentRow() > -1 && !this.actionParams.IsDeleteDisabled);\n    gPanel.setEnabled("DRD", !changed && !readOnly && e.getCurrentRow() > -1 && !this.actionParams.IsDeleteDisabled);\n    //\n    if (readOnly && this.curTab.getIsAlwaysUpdateField()) readOnly = false;\n    this.aIgnore.setEnabled(changed && !readOnly);\n    gPanel.setEnabled("UNO", changed && !readOnly);\n    this.aSave.setEnabled(changed && !readOnly);\n    gPanel.setEnabled("SAR", changed && !readOnly);\n    this.aCardDialog.setEnabled(!changed);\n\n    //\n    //\tNo Rows\n    if (e.getTotalRows() == 0 && insertRecord) {\n      this.aNew.setEnabled(true);\n      gPanel.setEnabled("NRD", true);\n      this.aDelete.setEnabled(false);\n      gPanel.setEnabled("DRD", true);\n      if (!this.curGC.isZoomAction) {\n        this.highlightButton(true, this.aNew);\n      }\n    } else {\n      this.highlightButton(false, this.aNew);\n    }\n\n    //\tSingle-Multi\n    //this.aMulti.setPressed(this.curGC.getIsSingleRow() || this.curGC.getIsMapRow());\n    //this.aCard.setPressed(this.curGC.getIsCardRow());\n    this.setBackEnable();\n    if (this.aChat) {\n      this.aChat.setPressed(this.curTab.hasChat());\n    }\n    if (this.aAttachment) {\n      this.aAttachment.setPressed(this.curTab.hasAttachment());\n    }\n    if (this.aMarkToExport) {\n      this.aMarkToExport.setPressed(this.curTab.hasMarked());\n    }\n    if (this.aSubscribe) {\n      this.aSubscribe.setPressed(this.curTab.HasSubscribed());\n    }\n\n    //  this.aChat.setEnabled(true);\n\n    if (this.isPersonalLock) {\n      this.aLock.setEnabled(true);\n      gPanel.setEnabled(this.aLock.getAction(), true);\n      this.aLock.setPressed(this.curTab.getIsLocked());\n      this.aRecAccess.setEnabled(true);\n      gPanel.setEnabled(this.aRecAccess.getAction(), true);\n    }\n    if (this.isShowSharedRecord && this.aSharedRecord) {\n      if (this.curTab.getValue(\'AD_Org_ID\') > 0 && this.excludeFromShare.indexOf(this.curTab.getTableName().toLowerCase()) == -1) {\n        this.aSharedRecord.setEnabled(true);\n        gPanel.setEnabled(this.aSharedRecord.getAction(), true);\n        this.aSharedRecord.setPressed(this.curTab.hasShared());\n      } else {\n        this.aSharedRecord.setEnabled(false);\n        gPanel.setEnabled(this.aSharedRecord.getAction(), false);\n      }\n    }\n    if (this.curTab.getRecord_ID() == -1) {\n      //this.aMulti.setEnabled(false);\n      if (this.aChat) {\n        this.aChat.setEnabled(false);\n        gPanel.setEnabled(this.aChat.getAction(), false);\n      }\n      if (this.aAttachment) {\n        this.aAttachment.setEnabled(false);\n        gPanel.setEnabled(this.aAttachment.getAction(), false);\n      }\n      if (this.aSubscribe) {\n        this.aSubscribe.setEnabled(false);\n        gPanel.setEnabled(this.aSubscribe.getAction(), false);\n      }\n      //if (this.aImportMap) {\n      //    this.aImportMap.setEnabled(false);\n      //}\n      if (this.aHistory) {\n        this.aHistory.setEnabled(false);\n        gPanel.setEnabled(this.aHistory.getAction(), false);\n      }\n      if (this.aEmail) {\n        this.aEmail.setEnabled(false);\n        gPanel.setEnabled(this.aEmail.getAction(), false);\n      }\n      if (this.aLetter) {\n        this.aLetter.setEnabled(false);\n        gPanel.setEnabled(this.aLetter.getAction(), false);\n      }\n      if (this.aSms) {\n        this.aSms.setEnabled(false);\n        gPanel.setEnabled(this.aSms.getAction(), false);\n      }\n      if (this.aFaxEmail) {\n        this.aFaxEmail.setEnabled(false);\n        gPanel.setEnabled(this.aFaxEmail.getAction(), false);\n      }\n      if (this.aCreateDocument) {\n        this.aCreateDocument.setEnabled(false);\n        gPanel.setEnabled(this.aCreateDocument.getAction(), false);\n      }\n      if (this.aUploadDocument) {\n        this.aUploadDocument.setEnabled(false);\n        gPanel.setEnabled(this.aUploadDocument.getAction(), false);\n      }\n      if (this.aViewDocument) {\n        this.aViewDocument.setEnabled(false);\n        gPanel.setEnabled(this.aViewDocument.getAction(), false);\n      }\n      if (this.aAttachFrom) {\n        this.aAttachFrom.setEnabled(false);\n        gPanel.setEnabled(this.aAttachment.getAction(), false);\n      }\n      if (this.aZoomAcross) {\n        this.aZoomAcross.setEnabled(false);\n        gPanel.setEnabled(this.aZoomAcross.getAction(), false);\n      }\n      if (this.aMarkToExport) {\n        this.aMarkToExport.setEnabled(false);\n        gPanel.setEnabled(this.aMarkToExport.getAction(), false);\n      }\n      if (this.aArchive) {\n        this.aArchive.setEnabled(false);\n        gPanel.setEnabled(this.aArchive.getAction(), false);\n      }\n      if (this.aEmailAttach) {\n        this.aEmailAttach.setEnabled(false);\n        gPanel.setEnabled(this.aEmailAttach.getAction(), false);\n      }\n      if (this.aAppointment) {\n        this.aAppointment.setEnabled(false);\n        gPanel.setEnabled(this.aAppointment.getAction(), false);\n      }\n      if (this.aTask) {\n        this.aTask.setEnabled(false);\n        gPanel.setEnabled(this.aTask.getAction(), false);\n      }\n      if (this.aRequest) {\n        this.aRequest.setEnabled(false);\n        gPanel.setEnabled(this.aRequest.getAction(), false);\n      }\n      if (this.aWorkflow) {\n        this.aWorkflow.setEnabled(false);\n        gPanel.setEnabled(this.aWorkflow.getAction(), false);\n      }\n      if (this.aCopy) {\n        this.aCopy.setEnabled(false);\n        gPanel.setEnabled(this.aCopy.getAction(), false);\n      }\n      if (this.aLock) {\n        this.aLock.setEnabled(false);\n        gPanel.setEnabled(this.aLock.getAction(), false);\n      }\n      if (this.aRecAccess) {\n        this.aRecAccess.setEnabled(false);\n        gPanel.setEnabled(this.aRecAccess.getAction(), false);\n      }\n      if (this.aSharedRecord) {\n        this.aSharedRecord.setEnabled(false);\n        gPanel.setEnabled(this.aSharedRecord.getAction(), false);\n      }\n      if (this.aBatchUpdate) {\n        this.aBatchUpdate.setEnabled(false);\n        gPanel.setEnabled(this.aBatchUpdate.getAction(), false);\n      }\n\n      //if (this.aCall) {\n      //    this.aCall.setEnabled(false);\n      //}\n    } else {\n      if (this.aChat) {\n        this.aChat.setEnabled(true);\n        gPanel.setEnabled(this.aChat.getAction(), true);\n      }\n      if (this.aAttachment) {\n        this.aAttachment.setEnabled(true);\n        gPanel.setEnabled(this.aAttachment.getAction(), true);\n      }\n      if (this.aSubscribe) {\n        this.aSubscribe.setEnabled(true);\n        gPanel.setEnabled(this.aSubscribe.getAction(), true);\n      }\n      if (this.aHistory) {\n        this.aHistory.setEnabled(true);\n        gPanel.setEnabled(this.aHistory.getAction(), true);\n      }\n      if (this.aEmail) {\n        this.aEmail.setEnabled(true);\n        gPanel.setEnabled(this.aEmail.getAction(), true);\n      }\n      if (this.aLetter) {\n        this.aLetter.setEnabled(true);\n        gPanel.setEnabled(this.aLetter.getAction(), true);\n      }\n      if (this.aSms) {\n        this.aSms.setEnabled(true);\n        gPanel.setEnabled(this.aSms.getAction(), true);\n      }\n      if (this.aFaxEmail) {\n        this.aFaxEmail.setEnabled(true);\n        gPanel.setEnabled(this.aFaxEmail.getAction(), true);\n      }\n      if (this.aImportMap) {\n        this.aImportMap.setEnabled(true);\n        gPanel.setEnabled(this.aImportMap.getAction(), true);\n      }\n      if (this.aCreateDocument) {\n        this.aCreateDocument.setEnabled(true);\n        gPanel.setEnabled(this.aCreateDocument.getAction(), true);\n      }\n      if (this.aUploadDocument) {\n        this.aUploadDocument.setEnabled(true);\n        gPanel.setEnabled(this.aUploadDocument.getAction(), true);\n      }\n      if (this.aViewDocument) {\n        this.aViewDocument.setEnabled(true);\n        gPanel.setEnabled(this.aViewDocument.getAction(), true);\n      }\n      if (this.aAttachFrom) {\n        this.aAttachFrom.setEnabled(true);\n        gPanel.setEnabled(this.aAttachFrom.getAction(), true);\n      }\n      if (this.aZoomAcross) {\n        this.aZoomAcross.setEnabled(true);\n        gPanel.setEnabled(this.aZoomAcross.getAction(), true);\n      }\n      if (this.aMarkToExport) {\n        this.aMarkToExport.setEnabled(true);\n        gPanel.setEnabled(this.aMarkToExport.getAction(), true);\n      }\n      if (this.aArchive) {\n        this.aArchive.setEnabled(true);\n        gPanel.setEnabled(this.aArchive.getAction(), true);\n      }\n      if (this.aEmailAttach) {\n        this.aEmailAttach.setEnabled(true);\n        gPanel.setEnabled(this.aEmailAttach.getAction(), true);\n      }\n      if (this.aAppointment) {\n        this.aAppointment.setEnabled(true);\n        gPanel.setEnabled(this.aAppointment.getAction(), true);\n      }\n      if (this.aTask) {\n        this.aTask.setEnabled(true);\n        gPanel.setEnabled(this.aTask.getAction(), true);\n      }\n      if (this.aRequest) {\n        this.aRequest.setEnabled(true);\n        gPanel.setEnabled(this.aRequest.getAction(), true);\n      }\n      if (this.aWorkflow) {\n        this.aWorkflow.setEnabled(true);\n        gPanel.setEnabled(this.aWorkflow.getAction(), true);\n      }\n      if (this.aCopy) {\n        this.aCopy.setEnabled(true);\n        gPanel.setEnabled(this.aCopy.getAction(), true);\n      }\n      if (this.aLock) {\n        this.aLock.setEnabled(true);\n        gPanel.setEnabled(this.aLock.getAction(), true);\n      }\n      if (this.aBatchUpdate) {\n        this.aBatchUpdate.setEnabled(true);\n        gPanel.setEnabled(this.aBatchUpdate.getAction(), true);\n      }\n      //if (this.aCall) {\n      //    this.aCall.setEnabled(true);\n      //}\n\n      //this.aMulti.setEnabled(true);\n      //this.aChat.setEnabled(true);\n      //this.aAttachment.setEnabled(true);\n      //this.aSubscribe.setEnabled(true);\n      //this.aHistory.setEnabled(true);\n      //this.aEmail.setEnabled(true);\n      //this.aLetter.setEnabled(true);\n      //this.aSms.setEnabled(true);\n      //this.aFaxEmail.setEnabled(true);\n      //this.aSubscribe.setEnabled(true);\n      //this.aCreateDocument.setEnabled(true);\n      //this.aUploadDocument.setEnabled(true);\n      //this.aViewDocument.setEnabled(true);\n      //this.aAttachFrom.setEnabled(true);\n      //this.aZoomAcross.setEnabled(true);\n      //this.aMarkToExport.setEnabled(true);\n      //this.aArchive.setEnabled(true);\n      //this.aEmailAttach.setEnabled(true);\n      //this.aAppointment.setEnabled(true);\n      //this.aTask.setEnabled(true);\n      //this.aRequest.setEnabled(true);\n      //this.aWorkflow.setEnabled(true);\n    }\n\n    //\tTransaction info\n\n    if (!e.getIsInserting()) {\n      //var trxInfo = VIS.GridTab.prototype.getTrxInfo(this.curTab.getTableName(), VIS.context, this.curTab.getWindowNo(), this.curTab.getTabNo());\n      this.setStatusInfo(e.getRecord_ID());\n\n      //if (trxInfo != null)\n      //    this.statusBar.setInfo(trxInfo);\n    } else {\n      this.statusBar.setInfo(null);\n    }\n    if (this.curWinTab == this.vTabbedPane) {\n      VIS.context.setContext(this.curWindowNo, "tb_Index", this.curTabIndex);\n      this.curWinTab.evaluate(null);\n      this.curWinTab.notifyDataChanged(e);\n    }\n    if (this.curTab.getParentTab() && this.aSharedRecord) {\n      this.curTab.loadShared();\n      this.aSharedRecord.setPressed(this.curTab.hasShared());\n    }\n\n    /******End Header Panel******/\n  }; //\n\n  // Common function for set footer\n  APanel.prototype.setStatusInfo = function (record_ID) {\n    if (!record_ID && this.curTab) {\n      record_ID = this.curTab.getRecord_ID();\n    }\n    var tht = this;\n    VIS.GridTab.prototype.getFooterInfo(this.curTab.getTableName(), VIS.context, this.curTab.getWindowNo(), this.curTab.getTabNo(), record_ID).then(function (info) {\n      if (tht && tht.statusBar) tht.statusBar.setInfo(info);\n    }, function (err) {\n      if (tht && tht.statusBar) tht.statusBar.setInfo(err);\n    });\n  };\n\n  /**\r\n   *\tSet Status Line to text\r\n   *  @param text clear text\r\n   *  @param error error flag\r\n   */\n  APanel.prototype.setStatusLine = function (text, error) {\n    this.statusBar.setStatusLine(text, error);\n  };\n\n  //Cmd_Actions\n\n  APanel.prototype.cmd_refresh = function () {\n    //this.cmd_save(false); // Comment As discused with Harwinder Sir\n    this.curGC.dataRefreshAll();\n  }; //Refresh\n\n  APanel.prototype.cmd_ignore = function () {\n    //m_curGC.stopEditor(false);\n    this.curGC.dataIgnore();\n  }; //Undo\n\n  APanel.prototype.cmd_help = function ()\n  //sarab\n  {\n    var help = new VIS.Apps.help(this.gridWindow);\n  };\n  APanel.prototype.cmd_cardDialog = function (fromCardDialogBtn) {\n    var card = new VIS.CVDialog(this, fromCardDialogBtn);\n    card.show();\n  };\n  APanel.prototype.cmd_save = function (manual, callback) {\n    //cmd_save(false);\n    //this.curGC.dataRefreshAll();\n    if (this.curST != null) manual = false;\n    this.errorDisplayed = false;\n    //this.curGC.stopEditor(true);\n\n    if (this.curST != null) {\n      this.curST.saveData();\n      this.aSave.setEnabled(false); //\tset explicitly\n      if (this.curGC) {\n        this.curGC.vGridPanel.setEnabled("SAR", false);\n      }\n      return;\n    }\n    var $this = this;\n\n    // Check valid condition for checklist\n    //this.curGC.IsCheckListRequire(function (isCheckListRequire) {\n    //    if (!isCheckListRequire) {\n    //        VIS.ADialog.error("CheckListRequired");\n    //        return false;\n    //    }\n\n    //});\n\n    return $this.cmd_save2(manual, $this.curTab, $this.curGC, $this, callback);\n  };\n  APanel.prototype.cmd_save2 = function (manual, curTab, curGC, selfPanel, callback) {\n    var needExecute = true;\n    if (curTab.getCommitWarning().length > 0 && curTab.needSave(true, false)) {\n      needExecute = false;\n\n      //var selfPanel = this;\n\n      VIS.ADialog.confirm("SaveChanges?", true, curTab.getCommitWarning(), "Confirm", function (result) {\n        if (!result) {\n          return;\n        }\n        var retValue = curGC.dataSave(manual);\n        if (manual && !retValue && !selfPanel.errorDisplayed) {}\n        curGC.refreshTabPanelData(selfPanel.curTab.getRecord_ID());\n        if (manual) curGC.dynamicDisplay(-1);\n        if (callback) {\n          callback(retValue);\n        }\n      });\n    }\n    if (needExecute) {\n      var retValue = curGC.dataSave(manual);\n      if (manual && !retValue && !selfPanel.errorDisplayed) {}\n      if (manual) curGC.dynamicDisplay(-1);\n      if (callback) {\n        callback(retValue);\n      }\n      curGC.refreshTabPanelData(curTab.getRecord_ID());\n      this.curTab.loadShared();\n      if (this.aSharedRecord) {\n        this.aSharedRecord.setPressed(this.curTab.hasShared());\n      }\n      return retValue;\n    }\n  }; //Save\n\n  APanel.prototype.cmd_new = function (copy) {\n    //Create New Record\n\n    //If the record is shared, then copying the record is not allowed.\n    if (this.curTab.isCurrentRecordShare && copy) {\n      VIS.ADialog.info(\'ActionNotAllowedHere\');\n      return;\n    }\n    if (!this.curTab.getIsInsertRecord()) {\n      //log.warning("Insert Record disabled for Tab");\n      return;\n    }\n\n    //if (this.curTab.getParentTab() && this.curTab.getParentTab().IsSharedReadOnly) {\n    //    VIS.ADialog.error("AccessCannotInsert", true, "");\n    //    return;\n    //}\n\n    this.curGC.setNewRecordLayout();\n    this.curGC.dataNew(copy);\n  }; // New\n\n  APanel.prototype.cmd_batchUpdatedialog = function () {\n    if (this.curTab.getIsReadOnly()) return;\n    var bUpdate = new VIS.BatchUpdate(this.curWindowNo, this.curTab, this.curGC.getSelectedRows());\n    bUpdate.onClose = function () {};\n    bUpdate.show();\n  };\n  APanel.prototype.cmd_delete = function () {\n    if (this.curTab.getIsReadOnly()) return;\n    //var keyID = this.curTab.getRecord_ID();\n    //prevent deletion if client access for Read Write does not exist for this Role.\n\n    if (this.curTab.IsSharedReadOnly) {\n      VIS.ADialog.error("CannotDelete", true, "");\n      return;\n    }\n    var ids = this.curGC.canDeleteRecords();\n\n    // if (!VIS.MRole.getDefault().getIsClientAccess(this.curTab.getAD_Client_ID(), true))\n    if (ids.length > 0) {\n      VIS.ADialog.error("CannotDelete", true, " [ " + ids.join(",") + "]");\n      return;\n    }\n\n    //if (VIS.ADialog.ask("DeleteRecord?")) {\n    //    this.curGC.dataDelete();\n    //}\n\n    var thisPanel = this;\n    VIS.ADialog.confirm("DeleteRecord?", true, "", "Confirm", function (result) {\n      if (result) {\n        thisPanel.curGC.dataDeleteAsync();\n      }\n    });\n  };\n  APanel.prototype.cmd_back = function () {\n    var tis = this;\n    if (this.tabStack.length > 0) {\n      var currentTab = this.tabStack[this.tabStack.length - 1];\n      if (currentTab.tabView.length > 0) {\n        this.tabStack[this.tabStack.length - 1].tabView.pop();\n        var defaultTabLayout = currentTab.tabView[currentTab.tabView.length - 1];\n        if (defaultTabLayout == \'N\') {\n          tis.showHideViewIcon(tis.aMulti);\n          tis.curGC.switchMultiRow();\n        } else if (defaultTabLayout == \'Y\') {\n          tis.showHideViewIcon(tis.aSingle);\n          tis.curGC.switchSingleRow(true);\n        } else if (defaultTabLayout == \'C\') {\n          tis.showHideViewIcon(tis.aCard);\n          tis.curGC.switchCardRow(true);\n        }\n      }\n    }\n    this.setBackEnable();\n    if (this.tabStack.length > 1 && this.tabStack[this.tabStack.length - 1].tabView.length === 0) {\n      this.tabStack.pop();\n      currentTab = this.tabStack[this.tabStack.length - 1];\n      if (currentTab && Object.keys(currentTab).length > 0) {\n        if (this.curTab.needSave(true, false) && this.curTab.needSave(true, true)) {\n          this.cmd_ignore();\n        }\n        this.onTabChange(currentTab.tabID);\n      } else {\n        this.setBackEnable();\n      }\n    }\n\n    //if (tis.getLastView() == "Multi") {\n    //    tis.aMulti.setPressed(!tis.curGC.getIsSingleRow());\n    //    tis.aCard.setPressed(false);\n    //    tis.curGC.switchMultiRow(true);\n    //}\n    //else if (tis.getLastView() == "Card") {\n    //    tis.curGC.switchCardRow(true);\n    //    tis.aMulti.setPressed(false);\n    //    tis.aCard.setPressed(true);\n    //}\n    //tis.setLastView("");\n  };\n  /* \r\n   -Quick Search \r\n   @param val text to search\r\n   */\n\n  APanel.prototype.cmd_find = function (val) {\n    if (!this.curTab) return;\n    if (!this.defaultSearch) {\n      this.defaultSearch = true;\n      return;\n    }\n    this.setBusy(true);\n    var query = null;\n    if (val && val.trim() !== "") {\n      val = "%" + val + "%";\n      query = this.curTab.getSearchQuery(val);\n    }\n    this.findRecords(query);\n  };\n  APanel.prototype.cmd_chat = function () {\n    var record_ID = this.curTab.getRecord_ID();\n    if (record_ID == -1)\n      //\tNo Key\n      {\n        this.aChat.setEnabled(false);\n        if (this.curGC) {\n          this.curGC.vGridPanel.setEnabled(this.aChat.getAction(), false);\n        }\n        return;\n      }\n\n    //\tFind display\n    var infoName = null;\n    var infoDisplay = null;\n    for (var i = 0; i < this.curTab.getFieldCount(); i++) {\n      var field = this.curTab.getField(i);\n      if (field.getIsKey()) infoName = field.getHeader();\n      if ((field.getColumnName().toString() == "Name" || field.getColumnName().toString() == "DocumentNo") && field.getValue() != null && field.getValue() != "") infoDisplay = field.getValue();\n      if (infoName != null && infoDisplay != null) break;\n    }\n    var self = this;\n    //var onchatClose = function () { self.curTab.loadChats(); self.aChat.setPressed(self.curTab.hasChat()); };\n\n    var chat = new VIS.Chat(record_ID, this.curTab.getCM_ChatID(), this.curTab.getAD_Table_ID(), infoName + ": " + infoDisplay, this.curWindowNo);\n    chat.onClose = function () {\n      self.curTab.loadChats();\n      self.aChat.setPressed(self.curTab.hasChat());\n      self = null;\n    };\n    chat.show();\n  };\n  APanel.prototype.cmd_appointment = function () {\n    var record_ID = this.curTab.getRecord_ID();\n    ///Check table has Email column\n\n    var AD_Table_ID = this.curTab.getAD_Table_ID();\n    //log.Info("Record_ID=" + record_ID);\n    if (record_ID == -1)\n      //\tNo Key\n      {\n        return;\n      }\n    VIS.AppointmentsForm.init(AD_Table_ID, record_ID, 0, 0, false, true);\n  };\n  APanel.prototype.cmd_task = function () {\n    var record_ID = this.curTab.getRecord_ID();\n    ///Check table has Email column\n\n    var AD_Table_ID = this.curTab.getAD_Table_ID();\n    //log.Info("Record_ID=" + record_ID);\n    if (record_ID == -1)\n      //\tNo Key\n      {\n        return;\n      }\n    VIS.AppointmentsForm.init(AD_Table_ID, record_ID, 0, 0, true);\n  };\n  APanel.prototype.cmd_letter = function () {\n    var record_ID = this.curTab.getRecord_ID();\n    if (record_ID == -1)\n      //\tNo Key\n      {\n        this.aLetter.setEnabled(false);\n        if (this.curGC) {\n          this.curGC.vGridPanel.setEnabled(this.aLetter.getAction(), false);\n        }\n        return;\n      }\n    var email = new VIS.Email("", this.curTab, this.curGC, record_ID, false);\n    var c = new VIS.CFrame();\n    c.setName(VIS.Msg.getMsg("Letter"));\n    c.setTitle(VIS.Msg.getMsg("Letter"));\n    c.hideHeader(true);\n    c.setContent(email);\n    c.show();\n    email.initializeComponent();\n  };\n  APanel.prototype.cmd_email = function () {\n    var record_ID = this.curTab.getRecord_ID();\n    //List<DataGridRow> Rows = new List<DataGridRow>();\n    //IList rowsource = _curGC.GetSelectedRows();\n    // log.Info("Record_ID=" + record_ID);\n    if (record_ID == -1)\n      //\tNo Key\n      {\n        this.aEmail.setEnabled(false);\n        if (this.curGC) {\n          this.curGC.vGridPanel.setEnabled(this.aEmail.getAction(), false);\n        }\n        return;\n      }\n\n    //string to = "";\n    //if (((DataUtil.DataObject)rowsource[0]).GetFieldValue("EMAIL") != null)\n    //{\n    //    if (_curGC.IsSingleRow())\n    //    {\n    //        object a = _curTab.GetValue("Email");\n    //        if (a != null)\n    //        {\n    //            to = a.ToString();\n    //        }\n    //    }\n\n    //    else//multi row selected\n    //    {\n    //        //_curGC.ge\n    //        int count = rowsource.Count;\n    //        if (count == 1)\n    //        {\n    //            object a = _curTab.GetValue("Email");\n    //            if (a != null)\n    //            {\n    //                to = a.ToString();\n    //            }\n    //        }\n    //        else\n    //        {\n    //            for (int i = 0; i < rowsource.Count; i++)\n    //            {\n    //                if (((DataUtil.DataObject)rowsource[i]).GetFieldValue("EMAIL") != null)\n    //                {\n    //                    to += ((DataUtil.DataObject)rowsource[i]).GetFieldValue("EMAIL").ToString().Trim() + ",";\n    //                }\n    //            }\n    //            while (to.EndsWith(","))\n    //            {\n    //                to = to.Substring(0, to.Length - 1);\n    //            }\n    //        }\n    //    }\n    //}\n    //else\n    //{\n\n    //}\n    var email = new VIS.Email("", this.curTab, this.curGC, record_ID, true);\n    var c = new VIS.CFrame();\n    c.setName(VIS.Msg.getMsg("EMail"));\n    c.setTitle(VIS.Msg.getMsg("EMail"));\n    c.hideHeader(true);\n    c.setContent(email);\n    c.show();\n    email.initializeComponent();\n\n    //email.show();\n  };\n  APanel.prototype.cmd_report = function () {\n    if (!VIS.MRole.getDefault().getIsCanReport(this.curTab.getAD_Table_ID())) {\n      VIS.ADialog.warn("AccessCannotReport");\n      return;\n    }\n    if (this.curTab.needSave(true, false)) {\n      this.cmd_save(true);\n      return;\n    }\n    //var rquery = this.curTab.query; //new VIS.Query(this.curTab.getTableName());\n    var rquery = null;\n    if (this.curTab.query && this.curTab.query.list.length > 0) rquery = this.curTab.query;else rquery = new VIS.Query(this.curTab.getTableName());\n    rquery.tableName = this.curTab.getTableName();\n    var queryColumn = this.curTab.getLinkColumnName();\n    if (queryColumn.length == 0) queryColumn = this.curTab.getKeyColumnName();\n    var infoName = null;\n    var infoDisplay = null;\n    for (var i = 0, j = this.curTab.getFieldCount(); i < j; i++) {\n      var field = this.curTab.getField(i);\n      if (field.getIsKey()) infoName = field.getHeader();\n      if ((field.getColumnName() == "Name" || field.getColumnName() == "DocumentNo") && field.getValue() != null) infoDisplay = field.getValue();\n      if (infoName != null && infoDisplay != null) break;\n    }\n    var isParent = this.curTab.getParentColumnNames().length == 0;\n    if (queryColumn.length != 0) {\n      if (!isParent || this.curTab.getLinkColumnName() != null && this.curTab.getLinkColumnName() != "")\n        //only selected record to be printed\n        {\n          if (queryColumn.endsWith("_ID")) {\n            if (infoName == null && infoDisplay == null) {\n              rquery.addRestriction(queryColumn, VIS.Query.prototype.EQUAL, VIS.context.getContextAsInt(this.curWindowNo, queryColumn));\n            } else {\n              rquery.addRestriction(queryColumn, VIS.Query.prototype.EQUAL, VIS.context.getContextAsInt(this.curWindowNo, queryColumn), infoName, infoDisplay);\n            }\n          } else {\n            if (infoName == null && infoDisplay == null) {\n              rquery.addRestriction(queryColumn, VIS.Query.prototype.EQUAL, VIS.context.getContext(this.curWindowNo, queryColumn));\n            } else {\n              rquery.addRestriction(queryColumn, VIS.Query.prototype.EQUAL, VIS.context.getContext(this.curWindowNo, queryColumn), infoName, infoDisplay);\n            }\n          }\n        }\n    }\n    if (this.curGC.onDemandTree) {\n      if (!this.isSummaryVisible) {\n        var report = new VIS.AReport(this.curTab.getAD_Table_ID(), rquery, this.curTab.getAD_Tab_ID(), this.curWindowNo, this.curTab, this.curGC.treeID, this.curGC.treeNodeID, false);\n      } else {\n        var report = new VIS.AReport(this.curTab.getAD_Table_ID(), rquery, this.curTab.getAD_Tab_ID(), this.curWindowNo, this.curTab, this.curGC.treeID, this.curGC.treeNodeID, true);\n      }\n    } else {\n      var report = new VIS.AReport(this.curTab.getAD_Table_ID(), rquery, this.curTab.getAD_Tab_ID(), this.curWindowNo, this.curTab, 0, 0, false);\n    }\n  };\n  APanel.prototype.cmd_print = function () {\n    var rowsSource = this.curGC.getSelectedRows();\n    if (rowsSource.length == 0) {\n      VIS.ADialog.info(\'SelectRecord\');\n      return;\n    }\n    var AD_Process_ID = this.curTab.getAD_Process_ID();\n    if (AD_Process_ID == 0) {\n      return;\n    }\n    var sql = "VIS_118";\n    var param = [];\n    param[0] = new VIS.DB.SqlParam("@AD_Process_ID", AD_Process_ID);\n    var AD_ReportFormat_ID = executeScalar(sql, param);\n    sql = "VIS_119";\n    var InstalledVersion = executeScalar(sql);\n    if (rowsSource.length > 1 && AD_ReportFormat_ID > 0 && InstalledVersion && InstalledVersion.toString() > \'1.0.0.3\') {\n      if (this.curTab.needSave(true, false)) {\n        this.cmd_save(true);\n        return;\n      }\n      var recIds = \'\';\n      for (var i = 0; i < rowsSource.length; i++) {\n        if (i == 0) {\n          recIds = rowsSource[i][this.curTab.getKeyColumnName().toLower()];\n        } else {\n          recIds += \',\' + rowsSource[i][this.curTab.getKeyColumnName().toLower()];\n        }\n      }\n      var print = new VIS.APrint(AD_Process_ID, this.curTab.getAD_Table_ID(), 0, this.curWindowNo, recIds, this.curTab, true);\n      print.start(this.aPrint.getListItmIT());\n    } else {\n      var recID = this.curTab.getRecord_ID();\n      if (recID == -1) {\n        VIS.ADialog.info(VIS.Msg.getMsg(\'SelectRecord\'));\n        return;\n      }\n      if (this.curTab.needSave(true, false)) {\n        this.cmd_save(true);\n        return;\n      }\n      var print = new VIS.APrint(AD_Process_ID, this.curTab.getAD_Table_ID(), recID, this.curWindowNo, null, this.curTab);\n      print.start(this.aPrint.getListItmIT());\n    }\n    //var table_ID = this.curTab.getAD_Table_ID();\n    //var record_ID = this.curTab.getRecord_ID();\n    //var pi = new VIS.ProcessInfo(\'Print\', AD_Process_ID, table_ID, record_ID);        \n    //pi.setAD_User_ID(VIS.context.getAD_User_ID());\n    //pi.setAD_Client_ID(VIS.context.getAD_Client_ID());\n\n    //pctrl.process(this.curWindowNo);\n  };\n  APanel.prototype.cmd_sms = function () {\n    var record_ID = this.curTab.getRecord_ID();\n    //List<DataGridRow> Rows = new List<DataGridRow>();\n    //IList rowsource = _curGC.GetSelectedRows();\n    // log.Info("Record_ID=" + record_ID);\n    if (record_ID == -1)\n      //\tNo Key\n      {\n        this.aSms.setEnabled(false);\n        if (this.curGC) {\n          this.curGC.vGridPanel.setEnabled(this.aSms.getAction(), false);\n        }\n        return;\n      }\n\n    //string to = "";\n    //if (((DataUtil.DataObject)rowsource[0]).GetFieldValue("EMAIL") != null)\n    //{\n    //    if (_curGC.IsSingleRow())\n    //    {\n    //        object a = _curTab.GetValue("Email");\n    //        if (a != null)\n    //        {\n    //            to = a.ToString();\n    //        }\n    //    }\n\n    //    else//multi row selected\n    //    {\n    //        //_curGC.ge\n    //        int count = rowsource.Count;\n    //        if (count == 1)\n    //        {\n    //            object a = _curTab.GetValue("Email");\n    //            if (a != null)\n    //            {\n    //                to = a.ToString();\n    //            }\n    //        }\n    //        else\n    //        {\n    //            for (int i = 0; i < rowsource.Count; i++)\n    //            {\n    //                if (((DataUtil.DataObject)rowsource[i]).GetFieldValue("EMAIL") != null)\n    //                {\n    //                    to += ((DataUtil.DataObject)rowsource[i]).GetFieldValue("EMAIL").ToString().Trim() + ",";\n    //                }\n    //            }\n    //            while (to.EndsWith(","))\n    //            {\n    //                to = to.Substring(0, to.Length - 1);\n    //            }\n    //        }\n    //    }\n    //}\n    //else\n    //{\n\n    //}\n    var sms = new VIS.Sms(this.curTab, this.curGC, record_ID, false);\n    var c = new VIS.CFrame();\n    c.setName(VIS.Msg.getMsg("Sms"));\n    c.setTitle(VIS.Msg.getMsg("Sms"));\n    c.hideHeader(true);\n    c.setContent(sms);\n    c.show();\n    sms.initializeComponent();\n  };\n  APanel.prototype.cmd_subscribe = function () {\n    var record_ID = this.curTab.getRecord_ID();\n    if (record_ID == -1)\n      //\tNo Key\n      {\n        this.aSubscribe.setEnabled(false);\n        if (this.curGC) {\n          this.curGC.vGridPanel.setEnabled(this.aSubscribe.getAction(), false);\n        }\n        return;\n      }\n    var self = this;\n    var reloadSubscribe = function () {\n      self.curTab.loadSubscribe();\n      self.aSubscribe.setPressed(self.curTab.HasSubscribed());\n    };\n    VIS.dataContext.subscribeUnsubscribeRecords(this.curTab.getCM_SubScribedID(), this.curTab.getAD_Window_ID(), record_ID, this.curTab.getAD_Table_ID(), reloadSubscribe);\n  };\n  APanel.prototype.cmd_ImportMap = function () {\n    if (window.VDIU) {\n      if (this.curTab.getIsReadOnly()) {\n        VIS.ADialog.warn("ReadOnly");\n        return;\n      }\n      var excel = new VDIU.ImportExcel(this.curTab.getAD_Window_ID(), this.gridWindow.getName());\n      var c = new VIS.CFrame();\n      c.setName(VIS.Msg.getMsg("Import"));\n      c.setTitle(VIS.Msg.getMsg("Import"));\n      //c.hideHeader(true);\n      c.setContent(excel);\n      c.show();\n      excel.initialize();\n    } else {\n      VIS.ADialog.error("PleaseInstallExcelImportModule");\n    }\n  };\n  APanel.prototype.cmd_attachment = function (isViewOnly) {\n    //alert("attachment");\n    if (this.curTab.getRecord_ID() < 1) {\n      this.aAttachment.setEnabled(false);\n      if (this.curGC) {\n        this.curGC.vGridPanel.setEnabled(this.aAttachment.getAction(), false);\n      }\n      return;\n    }\n    var self = this;\n    var att = new VIS.attachmentForm(this.curTab.getWindowNo(), 0, this.curTab.getAD_Table_ID(), this.curTab.getRecord_ID(), \'\', null, null, null, isViewOnly);\n    att.setIsWindowAction(true);\n    att.show();\n    att.onClose = function () {\n      self.curTab.loadAttachments();\n      if (self.aAttachment) self.aAttachment.setPressed(self.curTab.hasAttachment());\n      self = null;\n    };\n\n    //att.on(\'close\', function () {\n    //    self.curTab.loadAttachments();\n    //    self.aChat.setPressed(self.curTab.hasAttachment());\n    //    self = null;\n    //    //this.aAttachment.setPressed(this.curTab.hasAttachment());\n    //});\n  };\n  APanel.prototype.cmd_history = function () {\n    var atHistory = null;\n    var c_Bpartner_ID = 0;\n    var AD_User_ID = 0;\n    if (Object.keys(this.curGC.getColumnNames()).indexOf("C_BPartner_ID") > 0 || this.curTab.getField("C_BPartner_ID") != null && this.curTab.getField("C_BPartner_ID").getValue() > 0) {\n      c_Bpartner_ID = this.curTab.getField("C_BPartner_ID").getValue();\n      //atHistory = new VIS.AttachmentHistory(this.curTab.getAD_Table_ID(), this.curTab.getRecord_ID(), this.curTab.getField("C_BPartner_ID").getValue());\n    }\n    if (Object.keys(this.curGC.getColumnNames()).indexOf("AD_User_ID") > 0 || this.curTab.getField("AD_User_ID") != null && this.curTab.getField("AD_User_ID").getValue() > 0) {\n      AD_User_ID = this.curTab.getField("AD_User_ID").getValue();\n    }\n    atHistory = new VIS.AttachmentHistory(this.curTab.getAD_Table_ID(), this.curTab.getRecord_ID(), c_Bpartner_ID, AD_User_ID, this.curTab.getKeyColumnName());\n    atHistory.show();\n  };\n  APanel.prototype.cmd_RecordShared = function () {\n    if (this.curTab.getRecord_ID() < 1) {\n      this.aSharedRecord.setEnabled(false);\n      if (this.curGC) {\n        this.curGC.vGridPanel.setEnabled(this.aSharedRecord.getAction(), false);\n      }\n      return;\n    }\n    if (this.curTab.isCurrentRecordShare) {\n      VIS.ADialog.info(\'ActionNotAllowedHere\');\n      return;\n    }\n    if (this.curGC.getSelectedRows().length > 1) {\n      VIS.ADialog.info(\'ShareOneRecordOnly\');\n      return;\n    }\n    var isAccess = \'Y\';\n    $.ajax({\n      url: VIS.Application.contextUrl + "JsonData/CheckAccessForAction",\n      dataType: "json",\n      async: false,\n      data: {\n        columnName: \'ShowSharedRecords\',\n        roleID: VIS.context.getAD_Role_ID()\n      },\n      error: function (e) {\n        //VIS.ADialog.info(VIS.Msg.getMsg(\'ERRORGettingPostingServer\'));\n      },\n      success: function (result) {\n        isAccess = JSON.parse(result);\n      }\n    });\n    if (isAccess != \'Y\') {\n      VIS.ADialog.info(\'ActionNotAllowedHere\');\n      return false;\n    }\n    var self = this;\n    var parentTableID = 0;\n    if (this.curTab.getParentTab()) {\n      parentTableID = this.curTab.getParentTab().getAD_Table_ID();\n      if (!this.curTab.getParentTab().hasShared() && this.curTab.getParentTab().getValue(\'AD_Org_ID\') != 0) {\n        VIS.ADialog.info("ShareParentFirst", true, "", "");\n        this.aSharedRecord.setPressed(false);\n        return;\n        ;\n      }\n    }\n    var atRecordShared = new VIS.RecordShared(this.curTab.getRecord_ID(), this.curTab.getAD_Table_ID(), this.curTab.getAD_Tab_ID(), this.curTab.getAD_Window_ID(), this.curWindowNo, this.curTab.linkValue, parentTableID, this.curTab);\n    atRecordShared.onClose = function () {\n      self.curTab.loadShared();\n      self.aSharedRecord.setPressed(self.curTab.hasShared());\n      self = null;\n    };\n    atRecordShared.show();\n  };\n  APanel.prototype.clearSearchText = function () {\n    if (this.curGC) {\n      this.curGC.searchCode = "";\n      this.curTab.searchText = "";\n    }\n  };\n  APanel.prototype.cmd_finddialog = function () {\n    var find = new VIS.Find(this.curWindowNo, this.curTab, 0, this);\n    var self = this;\n    var savedSearchName = "";\n    find.onClose = function () {\n      if (find.getIsOKPressed() || find.needRefresh()) {\n        //if (find.getIsOKPressed()) {\n\n        self.setAdvancedSerachText(true, "");\n        self.clearSearchText();\n        if (self.isSummaryVisible) {\n          self.curTab.setShowSummaryNodes(true);\n        } else {\n          self.curTab.setShowSummaryNodes(false);\n        }\n        var query = find.getQuery();\n        //\tHistory\n        var onlyCurrentDays = find.getCurrentDays();\n        var created = find.getIsCreated();\n        savedSearchName = find.getSavedQueryName();\n        self.curTab.userQueryID = find.getSavedID(); //find.getID();\n        find.dispose();\n        find = null;\n\n        //Set Page value to 1\n        self.curTab.getTableModel().setCurrentPage(1);\n        //\tConfirmed query\n        if (query != null && query.getIsActive()) {\n          //log.config(query.toString());\n          self.curTab.setQuery(query);\n          self.curGC.query(0, 0, created); //  autoSize\n        } else if (query != null) {\n          var maxRows = VIS.MRole.getDefault().getMaxQueryRecords();\n          //self.log.config("OnlyCurrentDays=" + onlyCurrentDays\n          //        + ", MaxRows=" + maxRows);\n          self.curTab.setQuery(null); //\treset previous queries\n          self.curGC.query(onlyCurrentDays, maxRows, created); //  autoSize\n        }\n        var findPressed = self.curTab.getIsQueryActive() || self.curTab.getOnlyCurrentDays() > 0;\n        self.aFind.setPressed(findPressed);\n      }\n      ////Refresh everytime bcoz smtimes user create an ASearch and save it, \n      ////but this search has no data for now. but search will be saved, so we have to refresh list everytime\n      self.refreshSavedASearchList(false, savedSearchName);\n      self = null;\n    };\n    find.show();\n  };\n  APanel.prototype.cmd_preference = function () {\n    var uf = new VIS.Framework.UserPreference();\n    uf.load();\n    uf.showDialog();\n    uf = null;\n  };\n\n  //lakhwinder\n  APanel.prototype.cmd_infoWindow = function () {\n    VIS.InfoMenu.show(this.aInfo.getItem());\n  };\n  APanel.prototype.cmd_zoomAcross = function () {\n    var Record_ID = this.curTab.getRecord_ID();\n    if (Record_ID > 0) {\n      //alert(\'ZoomAcross\');\n      //\tQuery\n      var query = new VIS.Query();\n      //\tCurrent row\n      var link = this.curTab.getKeyColumnName();\n      //\tLink for detail records\n      if (link.length == 0) link = this.curTab.getLinkColumnName();\n      if (link.length != 0) {\n        if (link.endsWith(\'_ID\')) query.addRestriction(link, VIS.Query.prototype.EQUAL, VIS.context.getContextAsInt(this.curWindowNo, link));else query.addRestriction(link, VIS.Query.prototype.EQUAL, VIS.context.getContext(this.curWindowNo, link));\n      }\n      //AZoomAcross zoom = new AZoomAcross(aZoomAcross.GetDropDownButton(), _curTab.GetTableName(), query, _curTab.GetAD_Window_ID());\n      var zoom = new VIS.AZoomAcross(this.aZoomAcross, this.curTab.getTableName(), query, this.curTab.getAD_Window_ID(), this, this.aZoomAcross.getListItmIT(), link, Record_ID);\n      zoom.init();\n\n      //zoom.ShowPopup(bnavZoomAcross, _curTab.GetTableName(), query, windowV0.AD_Window_ID);\n\n      //zoom = null;\n    }\n\n    // VIS.InfoMenu.show(this.aInfo.getItem());\n  };\n\n  /**\r\n   * \tOpen/View Request\r\n   */\n  APanel.prototype.cmd_request = function () {\n    var record_ID = this.curTab.getRecord_ID();\n    //log.Info("ID=" + record_ID);\n    if (record_ID > 0) {\n      var AD_Table_ID = this.curTab.getAD_Table_ID();\n      //var C_BPartner_ID = 0;\n      var BPartner_ID = this.curTab.getValue("C_BPartner_ID");\n      //if (BPartner_ID != null)\n      //    C_BPartner_ID = parseInt(BPartner_ID);\n\n      var req = new VIS.ARequest(this.aRequest, AD_Table_ID, record_ID, BPartner_ID, null, this.aRequest.getListItmIT());\n      req.getRequests();\n      req = null;\n    }\n  };\n  APanel.prototype.cmd_markToExport = function () {\n    var recID = this.curTab.getRecord_ID();\n    var rowsource = this.curGC.getSelectedRows();\n    var recStr = null;\n    var table_ID = this.curTab.getAD_Table_ID();\n    var tableName = this.curTab.getTableName();\n    if (recID == -1)\n      //\tNo Key\n      {\n        var data = {\n          AD_Table_ID: table_ID\n        };\n        var res = VIS.dataContext.getJSONData(VIS.Application.contextUrl + "JsonData/GetKeyColumns", data);\n        if (res == null) {\n          return;\n        }\n\n        //$.ajax({\n        //    url: VIS.Application.contextUrl + "JsonData/GetKeyColumns",\n        //    dataType: "json",\n        //    type: "POST",                \n        //    data: {\n        //        AD_Table_ID: table_ID\n        //    },\n        //    error: function () {\n        //        return;\n        //    },\n        //    success: function (dyndata) {\n\n        //        var _recordID = "";\n        //        var _recordID2 = "";\n\n        //        if (this.curGC.singleRow)\n        //        {\n        //            var a = this.curGC.getValue(keyNames[0]);\n        //            var b = this.curGC.getValue(keyNames[1]);\n        //            if (a != null && b != null)\n        //            {\n        //                _recordID = a.toString();\n        //                _recordID2 = b.toString();\n        //            }\n        //        }\n        //    }\n        //});\n      } else {\n      var _primaryKey = tableName + "_ID";\n      var _recordID = "";\n\n      //Single Row\n      if (this.curGC.singleRow) {\n        recStr = recID;\n        var markM = new VIS.MarkModule();\n        markM.init(recStr, table_ID, tableName);\n        markM.show();\n        var self = this;\n        markM.onClose = function () {\n          self.curTab.loadMarking();\n          self.aMarkToExport.setPressed(self.curTab.hasMarked());\n          self = null;\n        };\n        return;\n      }\n      //MultiRow \n      else {\n        var count = rowsource.length;\n        if (count == 1) {\n          _recordID = recID;\n        } else {\n          for (var i = 0; i < rowsource.length; i++) {\n            _recordID += rowsource[i][_primaryKey.toLowerCase()] + \',\';\n          }\n          if (_recordID.endsWith(",")) {\n            _recordID = _recordID.substring(0, _recordID.length - 1);\n          }\n        }\n        var markM = new VIS.MarkModule();\n        markM.init(_recordID, table_ID, tableName);\n        markM.show();\n        var self = this;\n        markM.onClose = function () {\n          self.curTab.loadMarking();\n          self.aMarkToExport.setPressed(self.curTab.hasMarked());\n          self = null;\n        };\n        return;\n      }\n    }\n\n    //var markM = new VIS.MarkModule();\n    //markM.show();\n  };\n  APanel.prototype.cmd_lock = function () {\n    var locked = false;\n    if (!this.isPersonalLock) {\n      return;\n    }\n    var record_ID = this.curTab.getRecord_ID();\n    if (record_ID == -1 || record_ID < 0)\n      //\tNo Key\n      {\n        return;\n      }\n    var isAccess = \'Y\';\n    $.ajax({\n      url: VIS.Application.contextUrl + "JsonData/CheckAccessForAction",\n      dataType: "json",\n      async: false,\n      data: {\n        columnName: \'IsPersonalLock\',\n        roleID: VIS.context.getAD_Role_ID()\n      },\n      error: function (e) {\n        //VIS.ADialog.info(VIS.Msg.getMsg(\'ERRORGettingPostingServer\'));\n      },\n      success: function (result) {\n        isAccess = JSON.parse(result);\n      }\n    });\n    if (isAccess != \'Y\') {\n      VIS.ADialog.info(\'ActionNotAllowedHere\');\n      return false;\n    }\n    this.curTab.locks(VIS.context, record_ID, this.aLock.getIsPressed());\n    this.curTab.loadAttachments(); //\treload\n    locked = this.curTab.getIsLocked();\n    this.aLock.setPressed(locked);\n  };\n  APanel.prototype.cmd_recAccess = function () {\n    var isAccess = \'Y\';\n    $.ajax({\n      url: VIS.Application.contextUrl + "JsonData/CheckAccessForAction",\n      dataType: "json",\n      async: false,\n      data: {\n        columnName: \'IsPersonalAccess\',\n        roleID: VIS.context.getAD_Role_ID()\n      },\n      error: function (e) {\n        //VIS.ADialog.info(VIS.Msg.getMsg(\'ERRORGettingPostingServer\'));\n      },\n      success: function (result) {\n        isAccess = JSON.parse(result);\n      }\n    });\n    if (isAccess != \'Y\') {\n      VIS.ADialog.info(\'ActionNotAllowedHere\');\n      return false;\n    }\n    var recAccessDialog = new VIS.RecordAccessDialog();\n    recAccessDialog.Load(this.curTab.getAD_Table_ID(), this.curTab.getRecord_ID());\n  };\n  APanel.prototype.ShowSummaryNodes = function () {\n    if (this.isSummaryVisible) {\n      this.aShowSummaryLevel.setPressed(false);\n      this.isSummaryVisible = false;\n    } else {\n      this.aShowSummaryLevel.setPressed(true);\n      this.isSummaryVisible = true;\n    }\n  };\n  APanel.prototype.cmd_call = function () {\n    var record_ID = this.curTab.getRecord_ID();\n    if (record_ID == -1)\n      //\tNo Key\n      {\n        this.aCall.setEnabled(false);\n        if (this.curGC) {\n          this.curGC.vGridPanel.setEnabled(this.aCall.getAction(), false);\n        }\n        return;\n      }\n    var table_ID = this.curTab.getAD_Table_ID();\n    if (VA048 && VA048.Apps) {\n      var call = new VA048.Apps.CallForm();\n      call.initializeComponent(table_ID, record_ID);\n      var c = new VIS.CFrame();\n      c.setName(VIS.Msg.getMsg("Call"));\n      c.setTitle(VIS.Msg.getMsg("Call"));\n      c.hideHeader(true);\n      c.setContent(call);\n      c.show();\n    } else {\n      alert(VIS.Msg.getMsg("Please install Communication module first"));\n    }\n  };\n\n  /* END */\n\n  /**\r\n   *return Last selected view  (card Or Multi)\r\n   * */\n  APanel.prototype.getLastView = function () {\n    if (!this.lastView) this.lastView = "";\n    return this.lastView;\n  };\n\n  /**\r\n   * Set Enable disable Back button   \r\n   */\n  APanel.prototype.setBackEnable = function () {\n    if (this.tabStack.length == 1 && this.tabStack[0].tabView.length <= 1) {\n      this.aBack.setEnabled(false);\n      if (this.curGC) {\n        this.curGC.vGridPanel.setEnabled("BVW", false);\n      }\n    } else {\n      this.aBack.setEnabled(true);\n      if (this.curGC) {\n        this.curGC.vGridPanel.setEnabled("BVW", true);\n      }\n    }\n  };\n\n  /** \r\n   *  dispose\r\n   */\n\n  APanel.prototype.dispose = function () {\n    if (this.aParentDetail) this.aParentDetail.dispose();\n    if (this.curST != null) {\n      this.curST.unRegisterAPanel();\n      this.curST = null;\n    }\n    this.vTabbedPane.dispose();\n    this.vTabbedPane = null;\n    if (this.gridWindow) {\n      this.gridWindow.dispose();\n      this.gridWindow = null;\n      this.ctx.setAutoCommit(this.$parentWindow.getWindowNo(), false);\n      this.ctx.removeWindow(this.$parentWindow.getWindowNo());\n      VIS.MLookupCache.cacheReset(this.$parentWindow.getWindowNo());\n    }\n    this.ctx = null;\n    this.$parentWindow = null;\n    this.tabPages = null;\n    this.curGC = null;\n    this.curST = null;\n    this.aParentDetail = null;\n    this.curTab = null;\n    this.disposeComponent();\n  };\n  APanel.prototype.setAdvanceWhere = function (advanceWhere) {\n    this.advanceWhere = advanceWhere;\n  };\n  APanel.prototype.getAdvanceWhere = function () {\n    return this.advanceWhere;\n  };\n  APanel.prototype.setFilterWhere = function (filterWhere) {\n    this.filterWhere = filterWhere;\n  };\n  APanel.prototype.getFilterWhere = function () {\n    return this.filterWhere;\n  };\n  APanel.prototype.setAdvanceFlag = function (advanceFlag) {\n    this.advanceFlag = advanceFlag;\n  };\n  APanel.prototype.getAdvanceFlag = function () {\n    return this.advanceFlag;\n  };\n  APanel.prototype.setFilterFlag = function (filterFlag) {\n    this.filterFlag = filterFlag;\n  };\n  APanel.prototype.getFilterFlag = function () {\n    return this.filterFlag;\n  };\n  APanel.prototype.setIsAdvanceSearch = function (isAdvancesearch) {\n    this.isAdvancesearch = isAdvancesearch;\n  };\n  APanel.prototype.getIsAdvanceSearch = function () {\n    return this.isAdvancesearch;\n  };\n  APanel.prototype.getIsFilter = function (isFilter) {\n    this.isFilter = isFilter;\n  };\n  APanel.prototype.setIsFilter = function () {\n    return this.isFilter;\n  };\n\n  //****************** APanel END ***********************//\n\n  //Assignment Gobal Namespace\n  VIS.APanel = APanel;\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/apanel.js?')},"./Areas/VIS/Scripts/F20/atabbedpane.js":()=>{eval(';\n(function (VIS, $) {\n  //****************************************************//\n  //**             VTabbedPane                       **//\n  //**************************************************//\n\n  /**\r\n   *  Tabbed Pane - Window Tab\r\n   *  \r\n   */\n\n  VIS.VTabbedPane = function (isWorkBench) {\n    /** Workbench \t\t\t\t*/\n    var _workbenchTab = false;\n    /** List of dependent Variables\t\t*/\n    this.oldTabIndex = -1;\n    this.Items = [];\n    this.ItemsIds = [];\n    this.count = 0;\n    this.dependents = [];\n    this.TabItems = [];\n    this.TabLevelsItems = [];\n    this.TabLevels = [];\n    this.tabLIObj = [];\n    this.contentPane = null;\n    this.aTabPaneMgr = null;\n    this.getIsWorkbench = function () {\n      return _workbenchTab;\n    };\n  };\n  VIS.VTabbedPane.prototype.init = function (aPanel, multiTabView) {\n    this.aPanel = aPanel;\n    this.multiTabView = multiTabView;\n    if (multiTabView) {\n      this.contentPane = new VIS.ContentPane(this, aPanel.getIncludedEmptyArea());\n    }\n  };\n\n  //@not used\n  VIS.VTabbedPane.prototype.setTabObject = function (obj) {\n    this.tabObj = obj;\n  };\n  VIS.VTabbedPane.prototype.finishLayout = function (isMobile) {\n    if (this.contentPane) this.contentPane.finishLayout(isMobile);\n  };\n\n  /**\r\n   * \tAdd Tab\r\n   *\t@param id tab id\r\n   *\t@param gTab grid tab model\r\n   *\t@param tabElement GridController or VSortTab\r\n   */\n  VIS.VTabbedPane.prototype.addTab = function (id, gTab, tabElement, tabItem) {\n    this.ItemsIds[this.count] = id;\n    this.Items[this.count] = tabElement;\n    this.TabItems.push(tabItem);\n    var tabDependents = gTab.getDependentOn();\n    for (var i = 0; i < tabDependents.length; i++) {\n      var name = tabDependents[i];\n      if (this.dependents.indexOf(name) < 0) {\n        // this.dependents.contains(name)) {\n        this.dependents.push(name);\n      }\n    }\n    this.count++;\n    if (this.multiTabView) {\n      // this.aTabPaneMgr.addTab(this.aPanel,)\n      var tabLevel = gTab.getTabLevel();\n      this.TabLevels.push(tabLevel);\n      var id = \'st_\' + tabItem.getAction();\n      var tObj = {\n        action: id,\n        text: gTab.getName(),\n        toolTipText: gTab.getDescription(),\n        textOnly: true,\n        iconName: \'\'\n      };\n      var subTab = new VIS.AppsAction(tObj);\n      for (var prop in this.TabLevelsItems) {\n        if (this.TabLevelsItems[prop].TabLevel <= tabLevel) {\n          this.TabLevelsItems[prop].ChildEle.push(tabElement);\n          this.TabLevelsItems[prop].ChildTabs.push(gTab);\n          this.TabLevelsItems[prop].ChildTabsItems.push(subTab);\n        }\n      }\n      this.TabLevelsItems.push({\n        \'TabLevel\': tabLevel,\n        \'ChildEle\': [],\n        \'ChildTabs\': [],\n        \'ChildTabsItems\': [],\n        \'Id\': id\n      });\n    }\n  };\n\n  /**\r\n  * \tis tab really change\r\n  *\t@param action tab id\r\n  */\n  VIS.VTabbedPane.prototype.getIsTabChanged = function (action) {\n    var index = this.ItemsIds.indexOf(action);\n    var oldIndex = this.oldTabIndex;\n    if (index === oldIndex) {\n      //Same Tab \n      console.log("same tab");\n      return false;\n    }\n    var oldGC = this.Items[index];\n    var newGC = null;\n    if (oldGC instanceof VIS.GridController) {\n      newGC = oldGC;\n      var display = newGC.getIsDisplayed(); // if tab is not displayed\n      if (!display) {\n        //VLogger.Get().Info("Not displayed - " + newGC.ToString());\n        return false;\n      }\n    }\n    if (newGC != null && oldIndex >= 0 && index != oldIndex) {\n      var oldGC = this.Items[oldIndex]; //.Controls[0];\n      if (oldGC != null && oldGC instanceof VIS.GridController) {\n        /* check for tab Level of tab */\n        if (newGC.getTabLevel() > oldGC.getTabLevel() + 1) {\n          //\tSearch for right tab\n          for (var i = index - 1; i >= 0; i--) {\n            var rightC = this.Items[i]; // .Controls[0];// getComponentAt(i);\n            var rightGC = null;\n            if (rightC instanceof VIS.GridController) {\n              rightGC = rightC;\n              if (rightGC.getTabLevel() == oldGC.getTabLevel() + 1) {\n                VIS.ADialog.warn("TabSwitchJumpGo", true, "", rightGC.getTitle());\n                return false;\n                ;\n              }\n            }\n          }\n          VIS.ADialog.warn("TabSwitchJump");\n          return false;\n        }\n        oldGC.setMnemonics(false);\n      }\n    }\n    //\tSwitch\n    if (newGC != null) {\n      newGC.setMnemonics(true);\n    }\n    this.oldTabIndex = index;\n    return true;\n  };\n  VIS.VTabbedPane.prototype.restoreTabChange = function () {\n    this.oldTabIndex = -1;\n  };\n  VIS.VTabbedPane.prototype.getNextTabId = function (tabSeq) {\n    if (!tabSeq || tabSeq < 0) tabSeq = 0;\n    if (tabSeq >= this.ItemsIds.length) tabSeq = this.ItemsIds.length - 1;\n    var curIndex = this.oldTabIndex;\n    curIndex = tabSeq;\n    var id = null;\n    if (curIndex != this.oldTabIndex) {\n      id = this.ItemsIds[curIndex];\n    } else id = this.ItemsIds[this.oldTabIndex];\n    return id;\n  };\n  VIS.VTabbedPane.prototype.getPreviousTabId = function () {\n    var id = null;\n    if (this.oldTabIndex > 0) {\n      id = this.ItemsIds[this.oldTabIndex - 1];\n    } else id = this.ItemsIds[this.oldTabIndex];\n    return id;\n  };\n\n  /**\r\n   *  current selected tab element either GridController or VSortTab\r\n   */\n  VIS.VTabbedPane.prototype.getTabElement = function (action) {\n    return this.Items[this.oldTabIndex];\n  };\n  /**\r\n   *  current selected tab index\r\n   */\n  VIS.VTabbedPane.prototype.getSelectedIndex = function () {\n    return this.oldTabIndex;\n  };\n  VIS.VTabbedPane.prototype.sizeChanged = function (height, width) {\n    for (var prop in this.Items) {\n      this.Items[prop].sizeChanged(height, width);\n    }\n  };\n  VIS.VTabbedPane.prototype.evaluate = function (e) {\n    var process = e == null;\n    var columnName = null;\n    if (!process) {\n      columnName = e;\n      if (columnName != null) process = this.dependents.indexOf(columnName) > -1; //  contains(columnName);\n      else process = true;\n    }\n    if (process) {\n      //VLogger.Get().Config(columnName == null ? "" : columnName);\n      for (var i = 0; i < this.TabItems.length; i++) {\n        var c = this.Items[i];\n        if (c instanceof VIS.GridController) {\n          var gc = c;\n          var display = gc.getIsDisplayed();\n          this.TabItems[i].setEnabled(display);\n        }\n      }\n    }\n  };\n  VIS.VTabbedPane.prototype.setTabControl = function (tabs) {\n    var $ulTabControl = this.aPanel.getTabControl();\n    if (!this.multiTabView) {\n      var $ulTabControl = this.aPanel.getTabControl();\n      for (var i = 0; i < tabs.length; i++) {\n        var li = tabs[i].getListItm();\n        this.tabLIObj[tabs[i].action] = li;\n        if (tabs[i].isHideTab) {\n          // if tab hide then not append in UI\n          li.hide();\n        }\n        $ulTabControl.append(li);\n      }\n      this.aPanel.setTabNavigation();\n    } else {\n      for (var i = 0; i < tabs.length; i++) {\n        var li = tabs[i].getListItm();\n        this.tabLIObj[tabs[i].action] = li;\n        //if (i == 0)\n        $ulTabControl.append(li.hide());\n      }\n    }\n  };\n\n  /**\r\n   * set selected tab\r\n   * @param {any} id\r\n   */\n  VIS.VTabbedPane.prototype.setSelectedTab = function (id) {\n    if (this.selectedTab) this.selectedTab.removeClass("vis-apanel-tab-selected");\n    this.selectedTab = this.tabLIObj[id];\n    this.selectedTab.addClass("vis-apanel-tab-selected");\n    if (this.multiTabView) {\n      var $ulTabControl = this.aPanel.getTabControl();\n      // $ulTabControl.empty();\n      for (var j in this.tabLIObj) {\n        //if (this.oldTabIndex > this.ItemsIds.indexOf(j))\n        this.tabLIObj[j].hide();\n      }\n      for (var i = 0; i <= this.oldTabIndex; i++) {\n        // $ulTabControl.append(\n        this.tabLIObj[this.ItemsIds[i]].show();\n      }\n      /* set sub tabs*/\n      this.contentPane.setTabControl(this.TabLevelsItems[this.oldTabIndex]);\n    }\n  };\n  VIS.VTabbedPane.prototype.getAPanel = function () {\n    return this.aPanel;\n  };\n  VIS.VTabbedPane.prototype.notifyDataChanged = function (e) {\n    //roll back composite view refresh event on new mode hotfix 37\n    if (this.multiTabView) {\n      // && !e.getIsInserting() && !e.getIsChanged()) { /* do not fire on field value change*/\n      this.contentPane.dataStatusChanged();\n    }\n  };\n  VIS.VTabbedPane.prototype.sizeChanged = function () {\n    if (this.multiTabView) this.contentPane.sizeChanged();\n    return;\n  };\n  VIS.VTabbedPane.prototype.refresh = function () {\n    if (this.multiTabView) this.contentPane.refresh();\n    return;\n  };\n  VIS.VTabbedPane.prototype.keyDown = function (evt) {\n    if (this.contentPane && this.contentPane.keyDown) this.contentPane.keyDown(evt);\n    return this;\n  };\n\n  /**\r\n   *  Dispose all contained VTabbedPanes and GridControllers\r\n   */\n  VIS.VTabbedPane.prototype.dispose = function () {\n    for (var prop in this.Items) {\n      this.Items[prop].dispose();\n      this.Items[prop] = null;\n    }\n    this.TabItems.length = 0;\n    this.TabItems = null;\n    this.Items.length = 0;\n    this.Items = null;\n    this.ItemsIds.length = 0;\n    this.ItemsIds = null;\n    this.dependents.length = 0;\n    this.dependents = null;\n    if (this.TabAppsItems) {\n      for (var i = 0; i < this.TabAppsItems.length; i++) {\n        this.TabAppsItems[i].dispose();\n      }\n    }\n    if (this.contentPane) this.contentPane.dispose();\n    this.contentPane = null;\n    this.TabAppsItems = null;\n  };\n  //****************APanel END************************//\n  //Assignment Gobal Namespace\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/atabbedpane.js?')},"./Areas/VIS/Scripts/F20/atabdialog.js":()=>{eval("/* Purpose: Open Tab in Dialog\r\n * Developer: VIS228 Date:21-Nov-2023\r\n */\n\n;\n(function (VIS, $) {\n  function TabDialog(gc, WhereClause) {\n    this.bufferList = [];\n    this.grid;\n    var self = this;\n    var root = $(\"<div id='TabDialog' style='width:100%;height:100%'>\");\n    var baseUrl = VIS.Application.contextUrl;\n    var buffer = null;\n    var gTab = gc.gTab;\n    this.show = function () {\n      ch = new VIS.ChildDialog();\n      ch.setContent(root);\n      ch.setHeight(500);\n      ch.setWidth('80%');\n      ch.setTitle(gTab.getName());\n      ch.setModal(true);\n      ch.onClose = function () {\n        // console.log(this.grid);\n        self.grid.destroy();\n        root.empty();\n        root = null;\n      };\n      ch.show();\n      self.gridSetup(gc.getMTab().gridTable.gridFields, root, 'TabDialog', gc.getMTab(), gc);\n    };\n\n    //this.show();\n\n    this.gridSetup = function (grdFields, $container, name, mTab, gc) {\n      if (!mTab.getIsDisplayed(true)) return 0;\n      this.id = name;\n      //this.aPanel = aPanel;\n      this.$container = $container;\n      var oColumns = [];\n      var mField = null;\n      var size = grdFields.length;\n      var visibleFields = 0;\n      var mFields = grdFields.slice(0);\n      mFields.sort(function (a, b) {\n        return a.getMRSeqNo() - b.getMRSeqNo();\n      });\n      var j = -1;\n      for (var i = 0; i < mFields.length; i++) {\n        mField = mFields[i];\n        if (mField == null) continue;\n        var columnName = mField.getColumnName();\n        var displayType = mField.getDisplayType();\n\n        //if (VIS.DisplayType.ID == displayType || columnName == \"Created\" || columnName == \"CreatedBy\"\n        //                                    || columnName == \"Updated\" || columnName == \"UpdatedBy\") {\n        //    if (!mField.getIsDisplayed()) {\n        //        continue;\n        //    }\n        //}\n\n        ++j;\n        if (mField.getIsKey()) this.indexKeyColumn = j;else if (columnName.equals(\"IsActive\")) this.indexActiveColumn = j;else if (columnName.equals(\"Processed\")) this.indexProcessedColumn = j;else if (columnName.equals(\"AD_Client_ID\")) this.indexClientColumn = j;else if (columnName.equals(\"AD_Org_ID\")) this.indexOrgColumn = j;\n        var isDisplayed = mField.getIsDisplayedMR ? mField.getIsDisplayedMR() : mField.getIsDisplayed();\n        var mandatory = mField.getIsMandatory(false); //  no context check\n        var readOnly = mField.getIsReadOnly();\n        var updateable = mField.getIsEditable(false); //  no context check\n        //int WindowNo = mField.getWindowNo();\n\n        //  Not a Field\n        if (mField.getIsHeading()) continue;\n        var oColumn = {\n          resizable: true,\n          selfCellStyleRender: false /* self evalauate Style conditions*/\n        };\n        oColumn.gridField = mField;\n        if (readOnly || !updateable) {\n          oColumn.readOnly = true; //\n        }\n        oColumn.caption = mField.getHeader();\n        if (mandatory) {\n          oColumn.caption += '<sup style=\"color:red;font-size: 11px;top: 0;\">*</sup>';\n        }\n        oColumn.field = columnName.toLowerCase();\n        oColumn.hidden = !isDisplayed;\n        var columnWidth = oColumn.gridField.getColumnWidth();\n        if (columnWidth) {\n          oColumn.size = columnWidth + 'px';\n        } else {\n          oColumn.size = '100px';\n        }\n        if (mField.getIsIdentifier() && mField.getDisplayType() != VIS.DisplayType.Image && this.hyperLinkCell == null) {\n          if (oColumn.hidden == false) {\n            this.hyperLinkCell = columnName;\n            oColumn.style = 'text-decoration:underline; color:rgba(var(--v-c-primary), 1) !important; cursor:pointer';\n          }\n        } else if (mField.getDisplayType() == VIS.DisplayType.TelePhone) {\n          if (oColumn.hidden == false) oColumn.style = 'text-decoration:underline; color:rgba(var(--v-c-primary), 1) !important; ';\n        }\n        if (displayType == VIS.DisplayType.Amount) {\n          oColumn.sortable = true;\n          oColumn.customFormat = VIS.DisplayType.GetNumberFormat(displayType);\n          oColumn.render = function (record, index, colIndex) {\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (!val) {\n              val = 0; // show zero if null\n            }\n            //if (record.changes && typeof record.changes[f] != 'undefined') val = record.changes[f];\n            val = parseFloat(val).toLocaleString(undefined, {\n              'minimumFractionDigits': oColumns[colIndex].customFormat.getMinFractionDigit(),\n              'maximumFractionDigits': oColumns[colIndex].customFormat.getMaxFractionDigit()\n            });\n            return '<div data-type=\"int\">' + val + '</div>';\n          };\n          //oColumn.caption = 'class=\"vis-control-wrap-int-amount\"';\n        } else if (displayType == VIS.DisplayType.Integer) {\n          oColumn.sortable = true;\n          oColumn.customFormat = VIS.DisplayType.GetNumberFormat(displayType);\n          oColumn.render = function (record, index, colIndex) {\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (!val) return;\n\n            //if (record.changes && typeof record.changes[f] != 'undefined') val = record.changes[f];\n            //val = parseFloat(val).toLocaleString(undefined, {\n            //    'minimumFractionDigits': oColumns[colIndex].customFormat.getMinFractionDigit(),\n            //    'maximumFractionDigits': oColumns[colIndex].customFormat.getMaxFractionDigit()\n            //});\n            return '<div data-type=\"int\">' + val + '</div>';\n          };\n          //oColumn.caption = 'class=\"vis-control-wrap-int-amount\"';\n        } else if (displayType == VIS.DisplayType.ProgressBar) {\n          oColumn.sortable = true;\n          oColumn.selfCellStyleRender = true;\n          oColumn.render = function (record, index, colIndex) {\n            var f = oColumns[colIndex].field;\n            var gField = oColumns[colIndex].gridField;\n            var style = '';\n            if (gField.getStyleLogic() != '') style = self.evaluateStyleLogic(index, gField.getStyleLogic());\n            if (!style) style = '';\n            var val = record[f];\n            //var maxVal = gField.getMaxValue();\n            //var minVal = gField.getMinValue();\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            //return '<input id=\"rng' + index + '\" type=\"range\" min=\"' + minVal + '\" max=\"' + maxVal + '\" disabled=\"disabled\" value=\"' + val + '\" /><div style=\"position: absolute\"><output class=\"vis-grid_progress_output\"> ' + val+'</output></div>';\n\n            return '<div class=\"vis-progress-gridbar\" style=\"' + style + '\">' + '<div class=\"vis-progress-percent-bar\" style = \"width:' + (val || 0) + '%;' + style + '\" ></div>' + '<div class=\"vis-progress-gridoutput\" > ' + (val || '') + '</div></div >';\n          };\n        } else if (VIS.DisplayType.IsNumeric(displayType)) {\n          oColumn.sortable = true;\n          oColumn.customFormat = VIS.DisplayType.GetNumberFormat(displayType);\n          oColumn.render = function (record, index, colIndex) {\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (!val) return;\n            //if (record.changes && typeof record.changes[f] != 'undefined') val = record.changes[f];\n            // return  Globalize.format(Number(oColumns[colIndex].customFormat.GetFormatedValue(val)));\n            val = parseFloat(val).toLocaleString(undefined, {\n              'minimumFractionDigits': oColumns[colIndex].customFormat.getMinFractionDigit(),\n              'maximumFractionDigits': oColumns[colIndex].customFormat.getMaxFractionDigit()\n            });\n            return '<div data-type=\"int\">' + val + '</div>';\n          };\n          // oColumn.style = 'text-align: right';\n          // oColumn.caption = 'class=\"vis-control-wrap-int-amount\"';\n        }\n        //\tYesNo\n        else if (displayType == VIS.DisplayType.YesNo) {\n          oColumn.sortable = true;\n          var lCol = columnName.toLowerCase();\n          if (oColumn.gridField.getIsSwitch()) {\n            oColumn.render = \"switch\";\n            //oColumn.render = function (record, index, colIndex) {\n\n            //    var chk = (record[oColumns[colIndex].field]) ? \"checked\" : \"\";\n            //    //console.log(chk);\n            //   // return '<input type=\"checkbox\" ' + chk + ' onclick=\"var obj = w2ui[\\'' + name + '\\'];     obj.editChange.call(obj, this, ' + index + ', ' + colIndex +', event)\" class=\"vis-switch\"><i for=\"switch\" onclick=\"$(this).prev().click();\"   class=\"vis-switchSlider\">Toggle</i></div>';\n            //}\n          }\n          oColumn.editable = {\n            type: 'checkbox'\n          };\n        }\n        //\tString (clear/password)\n        else if (displayType == VIS.DisplayType.String || displayType == VIS.DisplayType.Text || displayType == VIS.DisplayType.TextLong || displayType == VIS.DisplayType.Memo) {\n          oColumn.sortable = true;\n          //if (oColumn.hidden == false && (this.hyperLinkCell[name] == \"undefined\" || this.hyperLinkCell[name] == null)) {\n          //    if (columnName.toLowerCase() == \"value\" || columnName.toLowerCase() == \"name\" || columnName.toLowerCase() == \"documentno\") {\n          //        this.hyperLinkCell[name] = columnName;\n          //        oColumn.style = 'text-decoration:underline; color:rgba(var(--v-c-primary), 1) !important; cursor:pointer';\n          //    }\n          //}\n\n          if (mField.getIsEncryptedField()) {\n            oColumn.render = function (record, index, colIndex) {\n              var f = oColumns[colIndex].field;\n              var val = record[f];\n              if (record.changes && typeof record.changes[f] != 'undefined') {\n                val = record.changes[f];\n              }\n              var val = record[oColumns[colIndex].field];\n              if (val || val === 0) return val.replace(/\\w|\\W/g, \"*\");\n              return \"\";\n            };\n          } else if (mField.getObscureType()) {\n            oColumn.render = function (record, index, colIndex) {\n              var val = record[oColumns[colIndex].field];\n              if (val || val === 0) return VIS.Env.getObscureValue(oColumns[colIndex].gridField.getObscureType(), val);\n              return \"\";\n            };\n          } else {\n            oColumn.render = function (record, index, colIndex) {\n              var f = oColumns[colIndex].field;\n              var val = record[f];\n              if (record.changes && typeof record.changes[f] != 'undefined') {\n                val = record.changes[f];\n              }\n              if (val || val == 0) {\n                //if (d.toString().indexOf('<') > -1)\n                //    return \"\";\n                val = w2utils.encodeTags(val);\n                return val;\n              }\n              return \"\";\n            };\n          }\n        } else if (VIS.DisplayType.IsLookup(displayType) || displayType == VIS.DisplayType.ID) {\n          oColumn.sortable = true;\n          oColumn.lookup = mField.getLookup();\n          if (isDisplayed) {\n            oColumn.render = function (record, index, colIndex) {\n              var l = oColumns[colIndex].lookup;\n              var f = oColumns[colIndex].field;\n              var val = record[f];\n              var customStyle = oColumns[colIndex].gridField.getGridImageStyle();\n              var winNo = oColumns[colIndex].gridField.getWindowNo();\n              oColumns[colIndex]['customClass'] = '';\n              var customClass;\n              if (customStyle) {\n                customClass = oColumns[colIndex]['customClass'];\n                if (!customClass) {\n                  oColumns[colIndex]['customClass'] = 'vis-grd-custom-' + oColumns[colIndex].gridField.getAD_Column_ID() + winNo;\n                  customClass = '.vis-grd-custom-' + oColumns[colIndex].gridField.getAD_Column_ID() + winNo + \"{\" + customStyle + \"}\";\n                  var styleTag = document.createElement('style');\n                  styleTag.type = 'text/css';\n                  styleTag.innerHTML = customClass;\n                  $($('head')[0]).append(styleTag);\n                }\n              }\n              if (record.changes && typeof record.changes[f] != 'undefined') {\n                //val = record.changes[f];\n              }\n              var d;\n              if (l) {\n                // In case of multisearch, show all names separated by commas in gridview.\n                if (l.displayType == VIS.DisplayType.MultiKey) {\n                  if (val) {\n                    var arr = val.toString().split(',');\n                    var sb = \"\";\n                    for (var i = 0, j = arr.length; i < j; i++) {\n                      var valu = arr[i];\n                      if (!isNaN(valu)) {\n                        valu = Number(valu);\n                      }\n                      if (sb.length == 0) {\n                        sb += l.getDisplay(valu);\n                        continue;\n                      }\n                      sb += \", \" + l.getDisplay(valu);\n                    }\n                    d = sb;\n                  } else {\n                    d = l.getDisplay(val, true, true);\n                  }\n                } else {\n                  d = l.getDisplay(val, true, true);\n                }\n                //if (d.startsWith(\"<\"))\n                //  d = l.getDisplay(nd, false);\n                //d = w2utils.encodeTags(d);\n              }\n              var strDiv = \"\";\n              if (l && VIS.DisplayType.List == l.displayType) {\n                var hue = Math.floor(Math.random() * (360 - 0)) + 0;\n                var v = 60; //Math.floor(Math.random() * 16) + 75;\n                var pastel = 'hsl(' + hue + ', 100%,' + v + '%)';\n                var lType = l.getLovIconType(val, true);\n                var listIcon = l.getLOVIconElement(val, true);\n                var highlightChar = '';\n                if (!listIcon) {\n                  //highlightChar = d.substring(0, 1);\n\n                  if (highlightChar.length == 0) var txt = d.trim().split(' ');\n                  highlightChar = txt[0].substring(0, 1).toUpper();\n                  if (txt.length > 1) {\n                    highlightChar += txt[txt.length - 1].substring(0, 1).toUpper();\n                  } else {\n                    highlightChar = txt[0].substring(0, 2).toUpper();\n                  }\n                }\n                // If both , then show text and image\n                if (lType == \"B\") {\n                  strDiv = \"<div class='vis-grid-td-icon-grp'>\";\n                  if (listIcon) {\n                    strDiv += \"<div class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon'> \" + listIcon + \"</div> \";\n                  } else {\n                    strDiv += \"<div style='background-color:\" + pastel + \"' class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon'><span>\" + highlightChar + \"</span></div>\";\n                  }\n                  strDiv += \"<span> \" + d + \"</span ><div>\";\n                }\n                // if Text, then show text only\n                else if (lType == \"T\") {\n                  return d;\n                }\n                //Show icon only\n                else if (lType == \"I\") {\n                  strDiv = \"<div class='vis-grid-td-icon-grp' style='Justify-Content:center'>\";\n                  if (listIcon) {\n                    strDiv += \"<div class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon'> \" + listIcon + \"</div> \";\n                  } else {\n                    strDiv += \"<div style='background-color:\" + pastel + \"' class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon'><span>\" + highlightChar + \"</span></div>\";\n                  }\n                  strDiv += \"<div>\";\n                }\n              } else\n                // Based on sequence of image in idenitifer, perform logic and display image with text\n                if (l && l.gethasImageIdentifier()) {\n                  var imgIndex = d.indexOf(\"Images/\");\n                  if (imgIndex == -1) return d;\n\n                  //Find Image from Identifier string \n                  var img = d.substring(imgIndex + 7, d.lastIndexOf(\"^^\"));\n                  img = VIS.Application.contextUrl + \"Images/Thumb32x32/\" + img;\n\n                  //Replace Image string with ^^^, so that ^^^ can be used to split Rest of identifer value\n                  d = d.replace(\"^^\" + d.substring(imgIndex, d.lastIndexOf(\"^^\") + 2), \"^^^\");\n                  if (d.indexOf(\"Images/\") > -1) d = d.replace(d.substring(imgIndex, d.lastIndexOf(\"^^\") + 2), \"^^^\");\n                  d = d.split(\"^^^\");\n\n                  //Start HTMl string to be rendered inside Cell\n                  strDiv = \"<div class='vis-grid-td-icon-grp'>\";\n                  var highlightChar = '';\n\n                  //Now 'd' may contains identifier values to be displayed before and after image\n                  for (var c = 0; c < d.length; c++) {\n                    //random pastel color generator \n                    var hue = Math.floor(Math.random() * (360 - 0)) + 0;\n                    var v = 60; //Math.floor(Math.random() * 16) + 75;\n                    var pastel = 'hsl(' + hue + ', 100%,' + v + '%)';\n                    if (d[c].trim().length > 0) {\n                      //If highlightChar is not found, then get it from first item encounterd.\n                      if (highlightChar.length == 0) var txt = d[c].trim().split(' ');\n                      highlightChar = txt[0].substring(0, 1).toUpper();\n                      if (txt.length > 1) {\n                        highlightChar += txt[txt.length - 1].substring(0, 1).toUpper();\n                      } else {\n                        highlightChar = txt[0].substring(0, 2).toUpper();\n                      }\n                      //If image contains nothing.png that means image not found in identfier and \n                      //we will Display highlightChar\n                      if (c > 0 && img.indexOf(\"nothing.png\") > -1 && highlightChar.length > 0) {\n                        strDiv += \"<div style='background-color:\" + pastel + \"' class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon' ><span>\" + highlightChar + \"</span></div>\";\n                      }\n                      strDiv += \"<span>\" + d[c] + \"</span>\";\n                    }\n                    //If image found, then display that image.\n                    if (c == 0 || img.indexOf(\"nothing.png\") > -1) {\n                      if (img.indexOf(\"nothing.png\") == -1) {\n                        strDiv += \"<div style='background-color:\" + pastel + \"' class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon'\" + \" > <img src='\" + img + \"'></div > \";\n                        // \"' onerror='this.style.display=\\\"none\\\"' ></img></div > \";\n                      }\n                    }\n                  }\n                  +\"</div > \";\n                }\n              if (strDiv == \"\") return d;\n              return strDiv;\n              //return '<span>' + d + '</span>';\n            };\n          }\n        }\n        //Date /////////\n        else if (VIS.DisplayType.IsDate(displayType)) {\n          oColumn.sortable = true;\n          oColumn.displayType = displayType;\n\n          //oColumn.render = 'date';\n          oColumn.render = function (record, index, colIndex) {\n            var col = oColumns[colIndex];\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            if (val) {\n              if (col.displayType == VIS.DisplayType.Date) {\n                var d = new Date(val);\n                d.setMinutes(d.getTimezoneOffset() + d.getMinutes());\n                //val = Globalize.format(d, 'd');\n                val = d.toLocaleDateString();\n              } else if (col.displayType == VIS.DisplayType.DateTime) val = new Date(val).toLocaleString();\n              //val = Globalize.format(new Date(val), 'f');\n              else val = new Date(val).toTimeString();\n              //val = Globalize.format(new Date(val), 't');\n            } else val = \"\";\n            return val;\n          };\n        } else if (displayType == VIS.DisplayType.Location || displayType == VIS.DisplayType.Locator) {\n          oColumn.sortable = true;\n          oColumn.lookup = mField.getLookup();\n          if (isDisplayed) {\n            oColumn.render = function (record, index, colIndex) {\n              var l = oColumns[colIndex].lookup;\n              var f = oColumns[colIndex].field;\n              var val = record[f];\n              if (record.changes && typeof record.changes[f] != 'undefined') {\n                val = record.changes[f];\n              }\n              if (l) {\n                val = l.getDisplay(val, true);\n                val = w2utils.encodeTags(val);\n              }\n              return val;\n            };\n          }\n        } else if (displayType == VIS.DisplayType.AmtDimension) {\n          oColumn.sortable = true;\n          oColumn.lookup = mField.getLookup();\n          if (isDisplayed) {\n            oColumn.render = function (record, index, colIndex) {\n              var l = oColumns[colIndex].lookup;\n              var f = oColumns[colIndex].field;\n              var val = record[f];\n              if (record.changes && typeof record.changes[f] != 'undefined') {\n                val = record.changes[f];\n              }\n              if (l) {\n                val = l.getDisplay(val, true);\n                val = w2utils.encodeTags(val);\n              }\n              return val;\n            };\n          }\n        } else if (displayType == VIS.DisplayType.ProductContainer) {\n          oColumn.sortable = true;\n          oColumn.lookup = mField.getLookup();\n          if (isDisplayed) {\n            oColumn.render = function (record, index, colIndex) {\n              var l = oColumns[colIndex].lookup;\n              var f = oColumns[colIndex].field;\n              var val = record[f];\n              if (record.changes && typeof record.changes[f] != 'undefined') {\n                val = record.changes[f];\n              }\n              if (l) {\n                val = l.getDisplay(val, true);\n                val = w2utils.encodeTags(val);\n              }\n              return val;\n            };\n          }\n        } else if (displayType == VIS.DisplayType.Account || displayType == VIS.DisplayType.PAttribute) {\n          oColumn.sortable = true;\n          oColumn.lookup = mField.getLookup();\n          if (isDisplayed) {\n            oColumn.render = function (record, index, colIndex) {\n              var l = oColumns[colIndex].lookup;\n              var f = oColumns[colIndex].field;\n              var val = record[f];\n              if (record.changes && typeof record.changes[f] != 'undefined') {\n                val = record.changes[f];\n              }\n              if (l) {\n                val = l.getDisplay(val, true);\n                val = w2utils.encodeTags(val);\n              }\n              return val;\n            };\n          }\n        } else if (displayType == VIS.DisplayType.PAttribute) {\n          oColumn.sortable = true;\n          oColumn.render = 'int';\n        } else if (displayType == VIS.DisplayType.Button) {\n          oColumn.sortable = true;\n\n          //oColumn.render = function (record) {\n          //    return '<div>button</div>';\n          //}\n        } else if (displayType == VIS.DisplayType.Image) {\n          oColumn.sortable = true;\n          oColumn.render = function (record, index, colIndex) {\n            var f = oColumns[colIndex].field;\n            var customStyle = oColumns[colIndex].gridField.getGridImageStyle();\n            var winNo = oColumns[colIndex].gridField.getWindowNo();\n            var customClass;\n            if (customStyle) {\n              customClass = oColumns[colIndex]['customClass'];\n              if (!customClass) {\n                oColumns[colIndex]['customClass'] = 'vis-grd-custom-' + oColumns[colIndex].gridField.getAD_Column_ID() + winNo;\n                customClass = '.vis-grd-custom-' + oColumns[colIndex].gridField.getAD_Column_ID() + winNo + \"{\" + customStyle + \"}\";\n                var styleTag = document.createElement('style');\n                styleTag.type = 'text/css';\n                styleTag.innerHTML = customClass;\n                $($('head')[0]).append(styleTag);\n              }\n            }\n            var val = record[\"imgurlcolumn\" + f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            if (!val) {\n              val = '<div class=\"vis-grid-row-td-icon-center\">-</div>';\n              return val;\n            }\n            //return VIS.Msg.getElement1('AD_Image_ID') + '-' + val;\n            val = val.toString().replace(\"Images/\", \"Images/Thumb32x32/\");\n            //var img = $('<img>').attr(\"src\", VIS.Application.contextUrl + val);\n            var img;\n            if (customClass) {\n              img = '<div class=\"vis-grid-row-td-icon-center\"><div class=\"' + oColumns[colIndex]['customClass'] + ' vis-grid-row-td-icon\"><img src=\"' + VIS.Application.contextUrl + val + '\"></div></div>';\n            } else {\n              img = '<div class=\"vis-grid-row-td-icon-center\"><div class=\"vis-grid-row-td-icon\"><img src=\"' + VIS.Application.contextUrl + val + '\"></div></div>';\n            }\n            return img;\n          };\n        } else if (VIS.DisplayType.IsLOB(displayType)) {\n          oColumn.sortable = true;\n          oColumn.render = function (record, index, colIndex) {\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            if (!val) {\n              val = \"\";\n            }\n            return \"#\" + val.toString().length;\n          };\n        } else if (VIS.DisplayType.TelePhone == displayType) {\n          oColumn.sortable = true;\n          oColumn.render = function (record, index, colIndex) {\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            if (val) {\n              return VIS.VTelePhoneInstance.getHtml(val, true);\n            }\n            return \"\";\n          };\n        } else if (VIS.DisplayType.Color == displayType) {\n          oColumn.sortable = true;\n          oColumn.render = function (record, index, colIndex) {\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            if (val) {\n              return '<div style=\"background-color:' + val + ';\" ></div>';\n            }\n            return \"\";\n          };\n        } else {\n          //all text Type Columns\n\n          oColumn.sortable = true;\n          oColumn.render = function (record, index, colIndex) {\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            if (val || val == 0) {\n              //if (d.toString().indexOf('<') > -1)\n              //    return \"\";\n              val = w2utils.encodeTags(val);\n              return val;\n            }\n            return \"\";\n          };\n        }\n        if (mField.getHtmlStyle() != \"\") {\n          oColumn.style = mField.getHtmlStyle();\n        }\n        if (!oColumn.hidden) {\n          visibleFields++;\n        }\n        oColumns.push(oColumn);\n        oColumn.columnName = columnName;\n\n        //var iControl = VIS.VControlFactory.getControl(mTab, mField, false, false, false);\n        //iControl.setReadOnly(false);\n\n        //if (!oColumn.editable) {\n        //    oColumn.editable = { type: 'custom', ctrl: iControl };\n        //}\n\n        //iControl.addVetoableChangeListener(gc);\n\n        //if (iControl instanceof VIS.Controls.VButton) {\n        //    iControl.addActionListner(aPanel);\n        //}\n      }\n      if (visibleFields > 0) {\n        var w = Math.floor(100 / visibleFields);\n        for (var p in oColumns) {\n          if (oColumns[p].hidden) {} else {\n            if (!oColumns[p].size < 0) {\n              oColumns[p].size = w + '%';\n              //oColumns[p].size = 150+'px';\n              //oColumns[p].size = w + '%';\n              oColumns[p].min = 100;\n            }\n            //if (oColumns[p].gridField.getIsSwitch()) {\n            //    oColumns[p].editable = { type: 'checkbox' };\n            //}\n\n            if (this.hyperLinkCell == null) {\n              this.hyperLinkCell = oColumns[p].columnName;\n              oColumns[p].style = 'text-decoration:underline; color:rgba(var(--v-c-primary), 1) !important; cursor:pointer';\n            }\n          }\n        }\n      }\n      var dataIn = {\n        page: 0,\n        pageSize: 0,\n        treeID: 0,\n        treeNode_ID: 0,\n        card_ID: 0,\n        ad_Tab_ID: gTab.getAD_Tab_ID(),\n        tableName: gTab.getTableName()\n      };\n      $.ajax({\n        url: baseUrl + \"Window/GetWindowRecords\",\n        type: 'post',\n        data: {\n          'ctx': VIS.context.getWindowCtx(gc.windowNo),\n          Columns: Object.keys(gc.getColumnNames()),\n          TableName: gTab.getTableName(),\n          WhereClause: VIS.secureEngine.encrypt(WhereClause),\n          ObscureFields: [],\n          sqlIn: dataIn,\n          AD_Window_ID: gTab.getAD_Window_ID(),\n          WindowNo: gc.windowNo,\n          AD_Tab_ID: gTab.getAD_Tab_ID(),\n          SummaryOnly: false,\n          Encryptedfields: [],\n          AD_Table_ID: gTab.getAD_Table_ID(),\n          MaxRows: 0,\n          DoPaging: false\n        },\n        success: function (jString) {\n          var retObj = JSON.parse(jString);\n          try {\n            var lookupDirect = null;\n            //var cardViewData = null;\n            if (retObj) {\n              buffer = new VIS.DB.DataSet().toJson(retObj.Tables);\n              lookupDirect = retObj.LookupDirect;\n              //cardViewData = retObj.CardViewTpl;\n            }\n            if (buffer != null) {\n              var count = 0;\n              if (buffer.getTables().length != 0) {\n                var rows = buffer.getTable(0).getRows();\n                var columns = buffer.getTable(0).getColumnsName();\n                for (var row = 0; row < rows.length; row++) {\n                  var cells = rows[row].getJSCells();\n                  for (var cell = 0; cell < columns.length; cell++) {\n                    cells[columns[cell]] = gTab.gridTable.readDataOfColumn(columns[cell], cells[columns[cell]]);\n                  }\n                  cells['recid'] = row + 1;\n                  cells['editable'] = false;\n                  //cells.recid = row;\n                  self.bufferList[row] = cells;\n                  count++;\n                  //break;\n                }\n                // console.log(buffer.getTable(0).lookupDirect);\n              }\n              buffer.dispose();\n              buffer = null;\n              if (lookupDirect) VIS.MLookupCache.addRecordLookup(gc.windowNo, gTab.getTabNo(), lookupDirect);\n              self.grid = self.$container.w2grid({\n                name: name,\n                columns: oColumns,\n                records: self.bufferList,\n                editable: false,\n                show: {\n                  toolbar: false,\n                  // indicates if toolbar is v isible\n                  columnHeaders: true,\n                  // indicates if columns is visible\n                  lineNumbers: false,\n                  // indicates if line numbers column is visible\n                  selectColumn: true,\n                  // indicates if select column is visible\n                  toolbarReload: false,\n                  // indicates if toolbar reload button is visible\n                  toolbarColumns: true,\n                  // indicates if toolbar columns button is visible\n                  toolbarSearch: false,\n                  // indicates if toolbar search controls are visible\n                  toolbarAdd: false,\n                  // indicates if toolbar add new button is visible\n                  toolbarDelete: false,\n                  // indicates if toolbar delete button is visible\n                  toolbarSave: false,\n                  // indicates if toolbar save button is visible\n                  selectionBorder: false,\n                  // display border arround selection (for selectType = 'cell')\n                  recordTitles: false // indicates if to define titles for records\n                },\n                //toolbar: {\n                //    items: [\n                //        //{ type: 'spacer' },\n                //        { type: 'break' },\n                //        //{ type: 'button', id: 'Add_' + name,  img: 'icon-Add' },\n                //        { type: 'button', id: 'Edit_' + name, img: 'icon-edit' },\n                //        { type: 'break' },\n                //        { type: 'button', id: 'Add_' + name, img: 'icon-add' }\n                //    ],\n                //    onClick: this.onToolBarClick\n                //    //{\n\n                //    //    console.log(data);\n                //    //}\n                //},\n                recordHeight: 41\n                //onSelect: this.onSelectLocal,\n                //onUnselect: this.onUnSelect,\n                //onSort: this.onSort,\n                //onClick: this.onSingleClick,\n                //onDblClick: this.onClick,\n                //onEditField: this.onEditField,\n                //onChange: this.onChange,\n                //onRowAdd: this.onRowAdd,\n                //onCellStyleRender: this.cellStyleRender\n                ////onResize: function () { alert('resize') }\n              });\n            }\n\n            // if (lookupDirect)\n            //VIS.MLookupCache.addRecordLookup(gc.windowNo, gc.tabNo, lookupDirect);\n          } catch (e) {\n            //alert(e);\n            //that.log.Log(Level.SEVERE, that.SQL, e);\n          }\n        },\n        error: function () {}\n      });\n    };\n  }\n  VIS.TabMngr = {\n    show: function (gc, ColumnName, rcID) {\n      var WhereClause = ColumnName + \"=\" + rcID;\n      var t = new TabDialog(gc, WhereClause);\n      t.show();\n    }\n  };\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/atabdialog.js?")},"./Areas/VIS/Scripts/F20/atabpanel.js":()=>{eval(";\n(function (VIS, $) {\n  var tmpTabPnl = document.querySelector('#vis-ad-tabpnltmp').content; // $(\"#vis-ad-windowtmp\");\n\n  function VTabPanel(windowNo, wWidth) {\n    this.width = wWidth;\n    this.tabPanels = [];\n    // this.panelSize = 50;\n    //var panelMaxWidth = $(document).width() / 2;\n\n    var clone = document.importNode(tmpTabPnl, true);\n    var $outerwrap = $(clone.querySelector(\".vis-ad-w-p-ap-tp-outerwrap\"));\n    var $ulIconList = $outerwrap.find('.vis-ad-w-p-ap-tp-o-icorbar ul');\n    var $divHead = $outerwrap.find('.vis-ad-w-p-ap-tp-o-b-head');\n    var $spnName = $outerwrap.find(\".vis-ad-w-p-ap-tp-o-b-head h6\");\n    var $spnClose = $outerwrap.find(\".vis-ad-w-p-ap-tp-o-b-head span\");\n    var $divContent = $outerwrap.find(\".vis-ad-w-p-ap-tp-o-b-content\");\n    this.isClosed = true;\n    if (wWidth <= 25) {\n      if (wWidth <= 0) wWidth = 75;else wWidth = 25;\n    } else if (wWidth > 75) wWidth = 75;\n    wWidth = 100 - wWidth;\n    wWidth = $(document).width() * wWidth / 100;\n    this.width = wWidth;\n\n    /********************************* END Tab Panels ***********************************/\n    var self = this;\n    var selLI = null;\n    $ulIconList.on(\"click\", 'LI', function (e) {\n      setContent($(e.currentTarget));\n    });\n    function setContent($target) {\n      if (selLI) selLI.removeClass(\"vis-ad-w-p-ap-tp-o-li-selected\");\n      selLI = null;\n      $divContent.empty();\n      if ($target) {\n        selLI = $target.addClass('vis-ad-w-p-ap-tp-o-li-selected');\n        $spnName.text($target.data('name'));\n        self.setCurrentPanel($target.data('cname'), windowNo, $target.data('extrainfo'));\n      } else self.setCurrentPanel(null);\n      if (self.curTabPanel) {\n        $divContent.append(self.curTabPanel.getRoot());\n        self.setSize(wWidth);\n      } else self.setSize(35);\n    }\n    ;\n    $spnClose.on(\"click\", function () {\n      setContent(null);\n      //$divContent.empty();\n      //self.setCurrentPanel(null);\n      //self.setWidth(35);\n      //if (selLI)\n      //    selLI.removeClass(\"vis-selected-list\");\n    });\n    this.getRoot = function () {\n      return $outerwrap;\n    };\n    this.getcurTabPanel = function () {\n      return this.curTabPanel;\n    };\n    this.setPanelList = function (htm, defPnlId) {\n      $ulIconList.append(htm);\n      var defaultPanel = $ulIconList.find(\"[default='true']\").first();\n      if (defaultPanel && defaultPanel.length > 0) {\n        defaultPanel.trigger(\"click\");\n      } else {\n        setContent(null);\n      }\n    };\n    this.setSize = function (size, evt) {\n      if (!this.isClosed && size && size > 40) {\n        return;\n      }\n      if (size == 0) {\n        size = this.width;\n      }\n      var tWidth = $outerwrap.closest('.vis-ad-w-p-center').width() - 40;\n      var height = $outerwrap.closest('.vis-ad-w-p-center').height() - 40;\n      if (evt && !evt.isClosed) {\n        //if (this.isHorizontalAligned && !evt.isHorizontal)\n        //    tWidth = tWidth - evt.width;\n        //else if (!this.curTabPanel.curTab.getIsTPBottomAligned() && evt.isHorizontal) {\n        //    //height\n        //}\n      }\n      if (size && size > 40 && this.curTabPanel) {\n        if (this.isHorizontalAligned) {\n          // VIS0228 - for Horizontal as discussed with Mukesh Sir 10/07/2023 \n\n          $outerwrap.css({\n            'height': '100%',\n            'width': '100%'\n          });\n          $divContent.css({\n            'height': '100%',\n            'width': tWidth + 'px',\n            'overflow': 'auto'\n          });\n          $divHead.hide();\n        } else {\n          //vertical\n\n          $outerwrap.css({\n            'height': height + 'px',\n            'width': size + 'px'\n          });\n          $divContent.css({\n            'height': height + 'px',\n            'width': size - 35 + 'px',\n            'overflow': 'auto'\n          });\n          $divHead.show();\n        }\n        $divContent.show();\n        this.isClosed = false;\n      } else {\n        $outerwrap.css({\n          'height': '35px',\n          'width': '35px'\n        });\n        $divContent.css({\n          'height': '35px',\n          'width': '0px'\n        });\n        this.isClosed = true;\n        $divHead.hide();\n        $divContent.hide();\n      }\n      if (this.sizeChangedListner && this.sizeChangedListner.onSizeChanged) this.sizeChangedListner.onSizeChanged();\n    };\n    this.disposeComponent = function () {\n      $outerwrap.remove();\n      $divContent.remove();\n      selLI = null;\n      self = null;\n    };\n  }\n  VTabPanel.prototype.init = function (gTab) {\n    this.gTab = gTab;\n    this.isHorizontalAligned = this.gTab.getIsTPBottomAligned();\n    var panels = this.gTab.getTabPanels();\n    var defPnlId = 0;\n    if (panels && panels.length > 0) {\n      var str = [];\n      defPnlId = panels[0].getAD_TabPanel_ID();\n      for (var i = 0; i < panels.length; i++) {\n        var iconPath = '';\n        if (panels[i].getIconPath()) {\n          iconPath = panels[i].getIconPath();\n        } else {\n          iconPath = 'fa fa-object-group'; // 'VIS/Images/base/defPanel.ico';// \"fa fa-window-maximize\";//'VIS/Images/base/defPanel.ico';\n        }\n        str.push('<li default=\"' + panels[i].getIsDefault() + '\" data-panelid=\"' + panels[i].getAD_TabPanel_ID() + '\" data-cname=\"' + panels[i].getClassName() + '\" data-name=\"' + panels[i].getName() + '\"  data-extrainfo=\"' + panels[i].getExtraInfo() + '\" >');\n        if (iconPath.indexOf('.') > -1) str.push('<img alt = \"' + panels[i].getName() + '\" title = \"' + panels[i].getName() + '\"  src = \"' + VIS.Application.contextUrl + 'Areas/' + iconPath + '\" onerror=this.src=\"' + VIS.Application.contextUrl + 'Areas/VIS/Images/base/defpanel.ico\"></img >');else str.push('<span> <i title = \"' + panels[i].getName() + '\" class=\"' + iconPath + '\" ></i></span>');\n        str.push('</li>');\n        if (panels[i].getIsDefault()) defPnlId = panels[i].getAD_TabPanel_ID();\n      }\n    }\n    this.setPanelList(str.join(' '), defPnlId);\n  };\n  VTabPanel.prototype.addSizeChangeListner = function (lsner) {\n    this.sizeChangedListner = lsner;\n  };\n  VTabPanel.prototype.setCurrentPanel = function (className, windowNo, extrainfo) {\n    if (this.curTabPanel) {\n      if (this.curTabPanel.dispose) {\n        this.curTabPanel.dispose();\n      }\n      this.curTabPanel = null;\n    }\n    if (className) {\n      var type = VIS.Utility.getFunctionByName(className, window);\n      if (type) {\n        var panel = new type();\n        panel.startPanel(windowNo, this.gTab, extrainfo);\n        this.curTabPanel = panel;\n        if (this.gTab.getRecord_ID() > -1 || this.gTab.getCurrentRow() > -1) {\n          panel.refreshPanelData(this.gTab.getRecord_ID(), this.gTab.getTableModel().getRow(this.gTab.getCurrentRow()));\n        }\n      }\n    }\n  };\n  VTabPanel.prototype.refreshPanelData = function (rec_Id, dataRow) {\n    if (this.curTabPanel) {\n      this.curTabPanel.refreshPanelData(rec_Id, dataRow);\n    }\n  };\n  VTabPanel.prototype.setTabPanelSize = function (size) {\n    if (size == 0) {\n      size = this.width;\n    }\n    this.setSize(size);\n  };\n  VTabPanel.prototype.dispose = function () {\n    this.disposeComponent();\n    this.sizeChnagedListner = null;\n    this.gTab = null;\n    if (this.curTabPanel) {\n      this.curTabPanel.dispose();\n      this.curTabPanel = null;\n    }\n  };\n  VIS.VTabPanel = VTabPanel;\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/atabpanel.js?")},"./Areas/VIS/Scripts/F20/aviewcontroller.js":()=>{eval(';\n(function (VIS, $) {\n  var AWINDOW_HEADER_HEIGHT = 43;\n  var APANEL_HEADER_HEIGHT = 50; //margin adjust of first tr\n  var APANEL_FOOTER_HEIGHT = 40;\n  var NEWRECORDVIEW_GridLayout = "G";\n  var NEWRECORDVIEW_SingleRowLayout = "S";\n  var TABLAYOUT_CardViewLayout = "C";\n  var TABLAYOUT_GridLayout = "N";\n  var TABLAYOUT_SingleRowLayout = "Y";\n  var tmpvc = document.querySelector(\'#vis-ad-viewctrltmp\').content; // $("#vis-ad-windowtmp");\n  //executeDataSet\n  //DataSet String\n  function getDataSetJString(data, async, callback) {\n    var result = null;\n    // data.sql = VIS.secureEngine.encrypt(data.sql);\n    $.ajax({\n      url: dataSetUrl,\n      type: "POST",\n      datatype: "json",\n      contentType: "application/json; charset=utf-8",\n      async: async,\n      data: JSON.stringify(data)\n    }).done(function (json) {\n      result = json;\n      if (callback) {\n        callback(json);\n      }\n      //return result;\n    });\n    return result;\n  }\n  ;\n  var executeScalar = function (sql, params, callback) {\n    var async = callback ? true : false;\n    var dataIn = {\n      sql: sql,\n      page: 1,\n      pageSize: 0\n    };\n    if (params) {\n      dataIn.param = params;\n    }\n    var value = null;\n    getDataSetJString(dataIn, async, function (jString) {\n      var dataSet = new VIS.DB.DataSet().toJson(jString);\n      var dataSet = new VIS.DB.DataSet().toJson(jString);\n      if (dataSet.getTable(0).getRows().length > 0) {\n        value = dataSet.getTable(0).getRow(0).getCell(0);\n      } else {\n        value = null;\n      }\n      dataSet.dispose();\n      dataSet = null;\n      if (async) {\n        callback(value);\n      }\n    });\n    return value;\n  };\n  var executeReader = function (sql, params, callback) {\n    var async = callback ? true : false;\n    var dataIn = {\n      sql: sql,\n      page: 1,\n      pageSize: 0\n    };\n    if (params) {\n      dataIn.param = params;\n    }\n    var dataReader = null;\n    getDataSetJString(dataIn, async, function (jString) {\n      dataReader = new VIS.DB.DataReader().toJson(jString);\n      if (async) {\n        callback(dataReader);\n      }\n    });\n    return dataReader;\n  };\n  var baseUrl = VIS.Application.contextUrl;\n  var dSetUrl = baseUrl + "Form/JDataSet";\n  var dataSetUrl = baseUrl + "JsonData/JDataSetWithCode";\n\n  //****************************************************//\n  //**            Grid Controller                    **//\n  //**************************************************//\n  VIS.GridController = function (showRowNo, doPaging, id, multiTabView) {\n    this.id = id;\n    this.multiTabView = multiTabView;\n    this.vGridPanel = new VIS.VGridPanel();\n    this.vTable = new VIS.VTable();\n    this.vCardView = new VIS.VCardView();\n    this.vMapView = new VIS.VMapView();\n    this.vHeaderPanel = null;\n    this.windowNo = 0;\n    this.aPanel = null;\n    this.singleRow = false;\n    this.isCardRow = false;\n    this.doPaging = doPaging;\n    this.vIncludedGC = null;\n    this.m_tree = null;\n    this.onRowInserted = null;\n    this.onRowInserting = null;\n    //this.curTabPanel = null;\n    // this.ul_tabPanels = null;\n    this.actionParams = {}; // \n\n    this.rightPaneLinkItems = [];\n    this.leftPaneLinkItems = [];\n    this.showClient = false;\n    this.showOrg = false;\n    var level = VIS.Env.getCtx().getShowClientOrg();\n    if (level == VIS.Env.SHOW_CLIENT_ONLY) {\n      this.showClient = true;\n    } else if (level == VIS.Env.SHOW_ORG_ONLY) {\n      this.showOrg = true;\n    } else if (level == VIS.Env.SHOW_CLIENT_ORG) {\n      this.showOrg = true;\n      this.showClient = true;\n    }\n    this.isParentDetailVisible = false; //gc has parent detail panel used in swutch row presentation\n\n    this.isIncludedGCVisible = false; // Is Include Grid  Visible or Not\n\n    this.displayAsIncludedGC = false; // is this GC act as IncludedGrid in other GC\n\n    var $divPanel,\n      $divCard,\n      $divMap,\n      $tabControl,\n      $divMainVC,\n      $divHeader,\n      tabItems = []; //layout\n    var $divGrid, $divTree, $divContent;\n    var $layout = null;\n\n    // var vTabPanels = null;\n\n    var aAdd,\n      aEdit = null; //toolbar action\n\n    function initlizeComponent() {\n      var clone = document.importNode(tmpvc, true);\n      $divMainVC = $(clone.querySelector(".vis-ad-w-p-vc")).hide();\n\n      /* Tree Div */\n      $divTree = $divMainVC.find(".vis-ad-w-p-vc-tree").hide();\n\n      // $divMainVC = $divMainVC.find(".vis-ad-w-p-vc").hide();\n\n      /* Tab Control */\n      $tabControl = $divMainVC.find(".vis-ad-w-p-vc-actions").hide();\n      /* End */\n      /*divHeader*/\n      $divHeader = $divMainVC.find(".vis-ad-w-p-vc-header"); // $("<div class=\'vis-gc-header\'>").hide();\n      /*end*/\n      /* Multi,card and single view */\n      $divGrid = $("<div class=\'vis-gc-vtable\'>");\n      $divPanel = $("<div class=\'vis-ad-w-p-vc-editview\' id=\'AS_" + id + "\'>");\n      if (multiTabView) {\n        $divPanel.css("position", "unset");\n      }\n      $divCard = $("<div class=\'vis-gc-vcard\'>");\n      $divMap = $("<div class=\'vis-gc-vmap\'>");\n      /* End */\n      $divContent = $divMainVC.find(".vis-ad-w-p-vc-gc"); // $("<div class=\'vis-height-full\' style=\'overflow:hidden\'>"); //Main Contant\n      $divContent.append($divGrid).append($divPanel).append($divCard).append($divMap);\n    }\n    initlizeComponent();\n    var self = this;\n    var onsubToolBarClick = function (action) {\n      //console.log(action);\n\n      if (action == "edit") {\n        if (self.displayAsIncludedGC) {\n          //fire Tab changed and open in edit mode\n          if (self.aPanel.tabActionPerformed(self.id)) {\n            self.switchSingleRow();\n            // $tabControl.find(\'.vis-apanel-tab-selected\')[0].scrollIntoView();\n          }\n          return;\n        }\n      } else {\n        if (self.displayAsIncludedGC) {\n          //fire Tab changed and open in edit mode\n          if (!self.aPanel.tabActionPerformed(self.id)) return;\n          self.switchSingleRow();\n          //self.aPanel.cmd_new();\n          // return;\n          setTimeout(function (t) {\n            t.aPanel.cmd_new();\n          }, 500, self);\n        }\n      }\n    };\n    function createToolbar() {\n      aAdd = new VIS.AppsAction({\n        action: "new",\n        parent: null,\n        enableDisable: true,\n        toggle: false,\n        imageOnly: true,\n        isSmall: true,\n        onAction: onsubToolBarClick\n      }); //Create Apps Action\n      aEdit = new VIS.AppsAction({\n        action: "edit",\n        parent: null,\n        enableDisable: true,\n        toggle: false,\n        imageOnly: true,\n        isSmall: true,\n        onAction: onsubToolBarClick\n      }); //Create Apps Action\n      $tabControl.append(aEdit.getListItm()).append(aAdd.getListItm());\n    }\n    ;\n    createToolbar();\n    this.initLayout = function () {\n      //console.log(this.id);\n      //var pstyle = \'border: 1px solid #dfdfdf; padding: 0px;\';\n      //var pstyle = \'padding: 0px;background-color:transparent;\';\n\n      //var panels = [];\n      //if (this.m_tree != null) {\n      //    panels.push({ type: \'left\', size: 250, style: pstyle, resizable: true, content: this.m_tree.getRoot() });\n      //}\n      //panels.push({ type: \'main\', style: pstyle, content: $divContent });\n\n      //$layout = $divMain.w2layout({\n      //    name: \'layout_\' + id,\n      //    panels: panels,\n      //    resizer: 3,\n      //});\n\n      //$divMain.w2render($layout[\'name\']);\n      this.layoutLoaded = true;\n    };\n    this.sizeChanged = function (height, width) {\n\n      /* SetHeight */\n    };\n    this.sizeChanged();\n    $divPanel.append(this.vGridPanel.getRoot()); //apaend Single Layout\n\n    this.getRoot = function () {\n      return $divMainVC;\n    };\n    this.getTreeArea = function () {\n      return $divTree;\n    };\n    this.getId = function () {\n      return id;\n    };\n\n    //this.getReocrdDiv = function () {\n    //    return $divHeader;\n    //};\n\n    //this.getTabControl = function () {\n    //    return $tabControl;\n    //};\n\n    this.setRecord = function (record) {\n\n      // $divRecords.empty();\n      // $divRecords.html(record + " " + VIS.Msg.getMsg("Results"));\n    };\n    this.getVTablePanel = function () {\n      return $divGrid;\n    };\n    this.getVPanel = function () {\n      return $divPanel;\n    };\n    this.getVCardPanel = function () {\n      return $divCard;\n    };\n    this.getVMapPanel = function () {\n      return $divMap;\n    };\n\n    //  this.setRecord(0);\n\n    this.setUI = function (isIncluded) {\n      if (isIncluded) {\n        $divHeader.html(this.gTab.getName());\n        //$divHeader.css(\'white-space\', \'nowrap\');\n        $divHeader.css(\'display\', \'block\');\n        $tabControl.css(\'display\', \'flex\');\n        aEdit.setEnabled(false);\n        this.vTable.grid.show.selectColumn = false;\n      } else {\n        $divHeader.css(\'display\', \'none\');\n        $tabControl.css(\'display\', \'none\');\n        this.vTable.grid.show.selectColumn = true;\n      }\n    };\n    this.enableDisableToolbarItems = function (isEnable) {\n      aEdit.setEnabled(isEnable);\n    };\n\n    //Bind Table Event\n    this.vTable.onSelect = function (event) {\n      if (self.aPanel && self.aPanel.setBusy) {\n        self.aPanel.setBusy(true);\n      }\n      self.cancelSel = false;\n      //var cRow = -1, nRow;\n      //if (self.gTab.needSave(true, false))\n      //    cRow = self.gTab.getCurrentRow();\n\n      self.onTableRowSelect(event);\n      if (self.cancelSel) event.isCancelled = true;else {\n        //    nRow = self.gTab.getCurrentRow();\n        //  if (cRow != -1 && cRow != nRow)\n        ///    setTimeout(function (t, r) {\n        //     t.refreshRow(r); //refresh old row\n        // }, 10, this, cRow);\n      }\n      if (self.aPanel && self.aPanel.setBusy) {\n        self.aPanel.setBusy(false);\n      }\n    };\n    this.vTable.onCellValueChanged = function (event, invokeReq) {\n      if (invokeReq) window.setTimeout(function () {\n        self.vetoablechange(event);\n        self.vTable.refreshCells();\n      }, 10);else {\n        self.vetoablechange(event);\n        self.vTable.refreshCells();\n      }\n    };\n    this.vCardView.onCardEdit = function (event, onlySelect) {\n      self.onTableRowSelect(event);\n      //switch self.singleRow = false; //force single view\n      if (!onlySelect) {\n        self.aPanel.actionPerformedCallback(self.aPanel, "Single");\n        //self.aPanel.setLastView("Card");\n      }\n      //self.switchSingleRow();\n    };\n\n    //On Sort event\n    this.vTable.onSort = function (event) {\n      window.setTimeout(function () {\n        self.navigate(self.gTab.getCurrentRow(), true);\n      }, 10);\n    };\n\n    //show single layout\n    //this.vTable.onEdit = function (recid) {\n    //    // if (self.singleRow)\n    //    //  return true;\n    //    // if (self.vTable.getSelection().length < 1)\n    //    // return;\n\n    //    if (self.displayAsIncludedGC) {\n    //        //fire Tab changed and open in edit mode\n    //        self.aPanel.tabActionPerformed(tabItems[self.selTabIndex].action);\n    //        self.switchSingleRow();\n    //        return;\n    //    }\n\n    //    self.switchRowPresentation();\n    //};\n\n    //this.vTable.onAdd = function (recid) {\n    //    // if (self.singleRow)\n    //    //  return true;\n    //    // if (self.vTable.getSelection().length < 1)\n    //    // return;\n\n    //    if (self.displayAsIncludedGC) {\n    //        //fire Tab changed and open in edit mode\n    //        self.aPanel.tabActionPerformed(tabItems[self.selTabIndex].action);\n    //        self.switchSingleRow();\n    //        //self.aPanel.cmd_new();\n    //        // return;\n    //    }\n    //    setTimeout(function (t) {\n    //        t.aPanel.cmd_new()\n    //    }, 500, self);\n    //};\n\n    ////Called by editor controls\n    //this.vetoablechangeListner = function (event) {\n    //    self.vetoablechangeHandler(event);\n    //}\n\n    this.disposeComponent = function () {\n      this.rightPaneLinkItems.length = 0;\n      this.rightPaneLinkItems = null;\n      this.leftPaneLinkItems.length = 0;\n      this.leftPaneLinkItems = null;\n      $divGrid = null;\n      $divRecords = null;\n      //tabItems.length = 0;\n\n      for (var i = 0; i < tabItems.length; i++) {\n        tabItems[i].dispose("ul_" + this.id);\n      }\n      tabItems = null;\n      this.seletedTab = null;\n      this.vGridPanel.dispose();\n      this.vGridPanel = null;\n      this.vCardView.dispose();\n      this.vCardView.onSelect = null;\n      this.vMapView.dispose();\n      this.vTable.dispose();\n      this.vTable.onSelect = null;\n      this.vTable.onSort = null;\n      this.vTable = null;\n      $divGrid = null;\n      $divPanel = null;\n      $divCard = null;\n      $divMap = null;\n      self = null;\n      this.getId = null;\n      this.getReocrdDiv = null;\n      this.getRoot = null;\n      this.getVTablePanel = null;\n      this.getVPanel = null;\n      this.getVCardPanel = null;\n      $divMainVC.remove();\n      //console.log($divMainVC);\n      $divMainVC = null;\n      if ($layout) $layout.destroy();\n      $layout = null;\n      this.onRowInserted = null;\n    };\n  };\n  VIS.GridController.prototype.initHeaderPanel = function (parent) {\n    this.vHeaderPanel = new VIS.HeaderPanel(parent);\n    this.vHeaderPanel.addSizeChangeListner(this);\n    this.vHeaderPanel.init(this);\n  };\n  VIS.GridController.prototype.initTabPanel = function (wWidth, windowNo) {\n    this.vTabPanel = new VIS.VTabPanel(windowNo, wWidth);\n    this.vTabPanel.addSizeChangeListner(this);\n    this.vTabPanel.init(this.getMTab());\n  };\n  VIS.GridController.prototype.initFilterPanel = function (winNo) {\n    this.aFilterPanel = new VIS.FilterPanel(winNo, this);\n  };\n  VIS.GridController.prototype.initFilterUI = function () {\n    if (this.aFilterPanel) this.aFilterPanel.init();\n  };\n  VIS.GridController.prototype.getTabPanel = function () {\n    return this.vTabPanel.getRoot();\n  };\n  VIS.GridController.prototype.getFilterPanel = function () {\n    return this.aFilterPanel.getRoot();\n  };\n  VIS.GridController.prototype.onSizeChanged = function (resize) {\n    if (resize && this.vTabPanel) {\n      this.vTabPanel.setSize(0);\n    }\n    this.multiRowResize();\n    if (this.vIncludedGC) {\n      this.vIncludedGC.multiRowResize();\n    }\n    if (this.aPanel.vTabbedPane) this.aPanel.vTabbedPane.refresh();\n  };\n  VIS.GridController.prototype.refreshTabPanelData = function (record_ID) {\n    if (this.vTabPanel) {\n      //&& $(this.vTabPanel.getRoot()).is(\':visible\')) \n      this.vTabPanel.refreshPanelData(record_ID, this.gTab.getTableModel().getRow(this.gTab.getCurrentRow()));\n    }\n  };\n  VIS.GridController.prototype.getSurveyCondition = function (record_ID) {\n    if (this.vTabPanel && this.vTabPanel.curTabPanel.getSurveyCondition) {\n      //&& $(this.vTabPanel.getRoot()).is(\':visible\'))\n      return this.vTabPanel.curTabPanel.getSurveyCondition();\n    }\n  };\n\n  /// Check Checklist required\n  VIS.GridController.prototype.IsCheckListRequire = function (callback) {\n    var output = true;\n    var isSurveyPanel = false;\n    if (this.gTab.getHasPanel()) {\n      var panels = this.gTab.getTabPanels();\n      for (var i = 0; i < panels.length; i++) {\n        if (panels[i].getClassName() == \'VIS.SurveyPanel\') {\n          isSurveyPanel = true;\n          i = panels.length;\n        }\n      }\n    }\n    if (!isSurveyPanel) {\n      //callback(true);\n      return true;\n    }\n    var tableID = this.gTab.getAD_Table_ID();\n    var recordID = this.gTab.getRecord_ID();\n    var windowID = this.gTab.getAD_Window_ID();\n    var cIdx = this.gTab.currentRow;\n    var rowData = this.gTab; //.gridTable.getRow(cIdx);\n    var isCheckListFill = false;\n    if (this.vTabPanel.curTabPanel && this.vTabPanel.curTabPanel.isCheckListFill) {\n      isCheckListFill = this.vTabPanel.curTabPanel.isCheckListFill;\n    }\n    $.ajax({\n      async: false,\n      url: VIS.Application.contextUrl + "SurveyPanel/IsCheckListRequire",\n      data: {\n        AD_Window_ID: windowID,\n        AD_Table_ID: tableID,\n        Record_ID: recordID\n      },\n      success: function (data) {\n        data = JSON.parse(data);\n        data = data[0];\n        if (data.ResponseCount > 0) {\n          output = true;\n          //callback(true);\n        } else if (data.Condition != "") {\n          var isValidate = VIS.Evaluator.evaluateLogicByRowData(rowData, data.Condition);\n          if (isValidate && isCheckListFill) {\n            output = true;\n            //callback(true);\n          } else if (!isValidate) {\n            output = true;\n            // callback(true);\n          } else {\n            output = false;\n            //callback(false);\n          }\n        } else {\n          output = true;\n          //callback(true);\n        }\n      },\n      error: function (err) {\n        console.log(err);\n      }\n    });\n    return output;\n  };\n  VIS.GridController.prototype.SaveSurvey = function (recordID) {\n    return this.vTabPanel.curTabPanel.SaveData(recordID);\n  };\n  VIS.GridController.prototype.refreshFilterPanelData = function () {\n    if (this.aFilterPanel) {\n      //&& $(this.vTabPanel.getRoot()).is(\':visible\')) \n      this.aFilterPanel.refreshFilterOptions("", true);\n    }\n  };\n\n  /** initGrid\r\n    * - Map table to model\r\n      - Update (multi-row) table info with renderers/editors\r\n      - build single-row panel\r\n      - initialize display\r\n  @param onlyMultirow\r\n  @param curwindowNumber\r\n  @name  aPanel\r\n  @name mTab\r\n  <returns></returns>*/\n  VIS.GridController.prototype.initGrid = function (onlyMultiRow, curWindowNo, aPanel, mTab) {\n    var fields = mTab.gridTable.gridFields;\n    var mField = null;\n    var vGridId = curWindowNo + "_" + mTab.vo.AD_Tab_ID;\n    var vCardId = curWindowNo + "_c" + mTab.vo.AD_Tab_ID;\n    var vMapId = curWindowNo + "_m" + mTab.vo.AD_Tab_ID;\n    mTab.getTableModel().setDoPaging(this.doPaging);\n\n    //bindingSource =  tab.GetDataTable();\n    //var bindingSource = null;\n    var role = VIS.MRole;\n    if (!role.getIsDisplayClient() || !this.showClient) mTab.getField("AD_Client_ID").setDisplayed(false);\n    if (!role.getIsDisplayOrg() || !this.showOrg) mTab.getField("AD_Org_ID").setDisplayed(false);\n    var size = this.vTable.setupGridTable(aPanel, fields, this.getVTablePanel(), vGridId, mTab, this);\n    mTab.addDataStatusListener(this);\n    if (!onlyMultiRow) {\n      this.vCardView.setupCardView(aPanel, mTab, this.getVCardPanel(), vCardId);\n      if (mTab.getIsMapView()) this.vMapView.setupMapView(aPanel, this, mTab, this.getVMapPanel(), vMapId);\n      for (var i = 0; i < size; i++) {\n        mField = fields[i];\n        if (mField.getIsDisplayed()) {\n          var iControl = VIS.VControlFactory.getControl(mTab, mField, false, false, false);\n          if (iControl == null && !mField.getIsHeading()) {\n            //log.warning("Editor not created for " + mField.getColumnName());\n            continue;\n          }\n          if (iControl != null) {\n            //  MField => VEditor - New Field value to be updated to editor\n            iControl.setReadOnly(true);\n            mField.setPropertyChangeListener(iControl);\n            //  VEditor => this - New Editor value to be updated here (MTable)\n            iControl.addVetoableChangeListener(this);\n          }\n          this.vGridPanel.addField(iControl, mField);\n          if (iControl instanceof VIS.Controls.VButton) {\n            if (mField.getIsLink()) {\n              if (mField.getIsRightPaneLink()) {\n                this.rightPaneLinkItems.push(iControl);\n              } else {\n                //this.leftPaneLinkItems.push(iControl);\n              }\n            }\n            if (mField.getAD_Reference_Value_ID() == 435) {\n              iControl.setReadOnly(false);\n            }\n            iControl.addActionListner(this);\n          }\n          iControl = null;\n        }\n      }\n      this.vGridPanel.flushLayout(mTab.getHideFGFrom());\n    }\n\n    //  Tree Graphics Layout\n    var AD_Tree_ID = 0;\n    if (mTab.getIsTreeTab()) {\n      //, Name\n\n      // VIS0008 Changes done to pick Tree for Product and Business Partner from Organization Info\n      var sql = "";\n      var param = [];\n      var _tbl_ID = mTab.getAD_Table_ID();\n      // Fixed for BPartner and Product tables\n      if (_tbl_ID == 208 || _tbl_ID == 291) {\n        if (_tbl_ID == 208) sql = "VIS_155";else sql = "VIS_156";\n        param[0] = new VIS.DB.SqlParam("@AD_Org_ID", VIS.Env.getCtx().getAD_Org_ID());\n        AD_Tree_ID = VIS.Utility.Util.getValueOfInt(executeScalar(sql, param));\n        param = [];\n      }\n      if (AD_Tree_ID == 0) {\n        sql = "VIS_120";\n        param[0] = new VIS.DB.SqlParam("@AD_Client_ID", VIS.Env.getCtx().getAD_Client_ID());\n        param[1] = new VIS.DB.SqlParam("@AD_Table_ID", _tbl_ID);\n        AD_Tree_ID = executeScalar(sql, param);\n      }\n\n      //if (AD_Tree_ID > 0) {\n      //    this.m_tree = new VIS.TreePanel(curWindowNo, false, true);\n      //    //Set Style\n      //    if (mTab.getTabNo() == 0)\t//\tinitialize other tabs later\n      //    {\n      //        this.m_tree.initTree(AD_Tree_ID);\n      //    }\n\n      //    this.getTreeArea().append(this.m_tree.getRoot());\n      //    this.m_tree.addSelectionChangeListner(this);\n      //    this.setTreePanelWidth("300px");\n      //    this.getTreeArea().width("300px");\n      //    this.m_tree.setSize(this.getTreeArea().height());\n\n      //}\n      if (AD_Tree_ID > 0) {\n        this.treeID = AD_Tree_ID;\n        if (mTab.getShowSummaryLevel()) {\n          this.onDemandTree = true;\n          this.m_tree = new VIS.TreePanel(curWindowNo, false, true, true, this);\n          aPanel.aShowSummaryLevel.show();\n        } else {\n          this.onDemandTree = false;\n          this.m_tree = new VIS.TreePanel(curWindowNo, false, true, false, this);\n          aPanel.aShowSummaryLevel.hide();\n        }\n        this.m_tree.setTabID(mTab.getAD_Tab_ID());\n        //Set Style\n        if (mTab.getTabNo() == 0)\n          //\tinitialize other tabs later\n          {\n            this.m_tree.initTree(AD_Tree_ID);\n          }\n        this.getTreeArea().append(this.m_tree.getRoot());\n        this.m_tree.addSelectionChangeListner(this);\n\n        // this.setTreePanelWidth("300px");\n        this.getTreeArea().show();\n        // this.m_tree.setSize(this.getTreeArea().height());\n      } else\n        //  No Graphics - hide\n        {\n          ;\n        }\n    }\n\n    //ADD Table Model Event Listner\n    mTab.getTableModel().addTableModelListener(this.vTable);\n    mTab.getTableModel().addCardModelListener(this.vCardView);\n\n    //ADD Table Model Event Listner\n    mTab.getTableModel().addRowChangedListener(this);\n\n    //AddQueryCompleteListner\n    mTab.getTableModel().addQueryCompleteListner(this);\n    mTab.getTableModel().setDoPaging(this.doPaging);\n    mTab.getTableModel().setCurrentPage(1);\n    this.gTab = mTab;\n    this.windowNo = curWindowNo;\n    this.onlyMultiRow = onlyMultiRow;\n    this.aPanel = aPanel;\n\n    //  Set initial presentation\n\n    var defaultTabLayout = mTab.getTabLayout();\n    // check default layout of tab\n    //N means multirow layout\n    //Y means Single row layout\n    //C means Card view layout\n    if (defaultTabLayout == TABLAYOUT_GridLayout) this.singleRow = false;else if (defaultTabLayout == TABLAYOUT_SingleRowLayout) this.switchSingleRow(true);else if (defaultTabLayout == TABLAYOUT_CardViewLayout) {\n      this.isCardRow = false;\n      this.switchCardRow(true);\n    }\n  };\n  VIS.GridController.prototype.getIsHeaderPanel = function () {\n    return this.gTab.getIsHeaderPanel();\n  };\n  VIS.GridController.prototype.detachDynamicAction = function () {\n    var i = 0;\n    var j = 0;\n    for (var i = 0, j = this.leftPaneLinkItems.length; i < j; i++) {\n      this.leftPaneLinkItems[i].getControl().detach();\n    }\n    for (i = 0, j = this.rightPaneLinkItems.length; i < j; i++) {\n      this.rightPaneLinkItems[i].getControl().detach();\n    }\n    i = null;\n    j = null;\n    if (this.vTabPanel) {\n      this.vTabPanel.getRoot().detach();\n    }\n    if (this.aFilterPanel) {\n      this.aFilterPanel.getRoot().detach();\n    }\n  };\n  VIS.GridController.prototype.switchRowPresentation = function () {\n    if (this.singleRow) this.switchMultiRow();else this.switchSingleRow();\n  };\n  VIS.GridController.prototype.getIsSingleRow = function () {\n    return this.singleRow;\n  };\n  VIS.GridController.prototype.getIsCardRow = function () {\n    return this.isCardRow;\n  };\n  VIS.GridController.prototype.getIsMapRow = function () {\n    return this.isMapRow;\n  };\n  VIS.GridController.prototype.getIsMultiRow = function () {\n    return !(this.singleRow || this.isCardRow || this.isMapRow);\n  };\n  VIS.GridController.prototype.onTableRowSelect = function (event) {\n    if (this.rowSetting) {\n      return;\n    }\n    ;\n    //  no rows\n    if (this.gTab.getRowCount() == 0) return;\n\n    //\tvTable.stopEditor(graphPanel);\n    var rowTable = this.vTable.get(event.recid, true);\n    var rowCurrent = this.gTab.getCurrentRow();\n    if (rowTable == -1)\n      //  nothing selected\n      {\n        if (rowCurrent >= 0) {\n          this.vTable.select(event.recid);\n          this.vCardView.navigate(event.recid, !this.isCardRow);\n          return;\n        }\n      }\n    if (rowTable != rowCurrent) {\n      this.rowSetting = true;\n      this.navigate(rowTable);\n      this.rowSetting = false;\n    } else if (!this.settingGridSelecton) {\n      return;\n    }\n    this.dynamicDisplay(-1);\n\n    //\tTreeNavigation - Synchronize \t-- select node in tree\n    //if (m_tree != null)\n    //    m_tree.setSelectedNode (m_mTab.getRecord_ID());\t//\tignores new (-1)\n\n    var selfThis = this;\n\n    //\tQuery Included Tab\n    if (!this.getIsSingleRow()) {\n      window.setTimeout(function () {\n        //if (selfThis.vIncludedGC != null) {\n        selfThis.notifyDependents();\n        //vIncludedGC.getMTab().query(0, 0, false);\n        //}\n      }, 50);\n    } else {\n      //if (selfThis.vIncludedGC != null) {\n      selfThis.notifyDependents();\n      //vIncludedGC.getMTab().query(0, 0, false);\n      //}\n    }\n    //if (this.currentRowIndex === event.index) {\n    //    return;\n    //}\n    //this.currentRowIndex = event.index;\n\n    //this.gTab.navigate(this.currentRowIndex, true);\n    //this.dynamicDisplay(-1);\n  };\n  VIS.GridController.prototype.switchIncludedGC = function () {\n    if (this.vIncludedGC != null) {\n      this.switchIncludedGC();\n      //vIncludedGC.getMTab().query(0, 0, false);\n    }\n  };\n  VIS.GridController.prototype.dynamicDisplay = function (col) {\n    //if (!this.getIsSingleRow() || this.onlyMultiRow)\n    //    return;\n    if (this.gTab == null) return;\n    if (this.isCardRow || this.isMapRow) {\n      return;\n    }\n    var recID = this.gTab.getRecord_ID();\n    if (!this.getIsSingleRow()) {\n      this.dynamicDisplayLinks(col);\n      //if (recID == -1) {\n      //    this.setDefaultFocus();\n      //}\n      return;\n    }\n    if (!this.gTab.getIsOpen()) return;\n    if (col >= 0) {\n      var changedField = this.gTab.getField(col);\n      var columnName = changedField.getColumnName();\n      var dependants = this.gTab.getDependantFields(columnName);\n      //log.config("(" + m_mTab.toString() + ") "\n      //\t+ columnName + " - Dependents=" + dependants.size());\n      //\tNo Dependents and no Callout - Set just Background\n      if (dependants.length == 0 && changedField.getCallout().length > 0) {\n        // List<Control> comp = currentTab.GetControls();\n        //for (var i = 0; i < vPanel.allControls.Count; i++)\n        // {\n        //if (columnName.equals(vPanel.allControls[i].Name))\n        //{\n        // vPanel.allControls[i].BackColor = Color.LightSkyBlue;\n        //ve.setBackground( changedField.isError() );\n        //   break;\n        //}\n        // }\n        return;\n      }\n    }\n\n    //  complete single row re-display\n    var noData = this.gTab.getRowCount() == 0;\n    //log.config(m_mTab.toString() + " - Rows=" + m_mTab.getRowCount());\n    //  All Components in vPanel (Single Row)\n    var compos = this.vGridPanel.getComponents();\n    var size = compos.length;\n    for (var i = 0; i < size; i++) {\n      var comp = compos[i];\n      //IControl compI = (IControl)comp;\n      var columnName = comp.getName();\n      if (columnName != null) {\n        if (columnName.startsWith("lbl")) {\n          columnName = columnName.substring(3);\n        }\n        var mField = this.gTab.getField(columnName);\n        if (mField != null) {\n          //exempt tool bar button or window action\n          if (mField.getDisplayType() == VIS.DisplayType.Button && mField.getAD_Reference_Value_ID() == 435) {\n            continue;\n          }\n          if (mField.getIsDisplayed(true)) {\n            //  check context\n            var vis = comp.tag;\n            if (!comp.getIsVisible() && (vis == null || vis == "undefined" || vis)) {\n              comp.setVisible(true); //  visibility\n              this.vGridPanel.setVisible(columnName, true);\n              //Hide parent also\n            }\n            if (comp instanceof VIS.Controls.IControl) {\n              var ve = comp;\n              if (noData) ve.setReadOnly( true && !mField.getIsAction());else {\n                //   mField.vo.tabReadOnly = this.gTab.getIsReadOnly();\n                var rw = mField.getIsAction() || mField.getIsEditable(true) && !this.gTab.getIsReadOnly(); //  r/w - check Context\n\n                ve.setReadOnly(!rw);\n                if (ve.showObscureButton) {\n                  ve.showObscureButton(rw);\n                }\n                //\tlog.log(Level.FINEST, "RW=" + rw + " " + mField);\n                ve.setMandatory(mField.getIsMandatory(true));\n                //mField.validateValue();\n                ve.setBackground(mField.getIsError());\n\n                // Check if new record and current field marked as default field and focus is not set yet, \n                // then set focus.\n                if (mField.getIsDefaultFocus() && !this.isDefaultFocusSet && !comp.getName().startsWith("lbl")) {\n                  ve.setDefaultFocus(true);\n                  this.isDefaultFocusSet = true;\n                }\n                if (!comp.getName().startsWith(\'lbl\') && mField.getStyleLogic() != \'\') {\n                  var carr = mField.getStyleLogic().split(\',\');\n                  var style = this.evaluateStyleCondition(mField, carr);\n                  ve.setHtmlStyle(style); // set/reset style based on condition\n                }\n              }\n            }\n          } else if (comp.getIsVisible()) {\n            comp.setVisible(false);\n            this.vGridPanel.setVisible(columnName, false);\n          }\n\n          // reset error status for nondisplayed fields if they are not mandatory\n          if (!mField.getIsDisplayed(true) && !mField.getIsMandatory(true)) {\n            mField.setError(false);\n          }\n        }\n      }\n    }\n  };\n\n  /**\r\n   * evaluate style condition based on current selected row \r\n   * @param {any} mField field/column name\r\n   * @param {any} arr array of custom conditions\r\n   */\n  VIS.GridController.prototype.evaluateStyleCondition = function (mField, arr) {\n    var ret = null;\n    for (var j = 0; j < arr.length; j++) {\n      var cArr = arr[j].split("?");\n      if (cArr.length != 2) continue;\n      if (VIS.Evaluator.evaluateLogic(mField, cArr[0])) {\n        ret = cArr[1];\n        break;\n      }\n    }\n    return ret;\n  };\n  VIS.GridController.prototype.dynamicDisplayLinks = function (col) {\n    if (this.displayAsIncludedGC) return;\n    //  complete single row re-display\n    var noData = this.gTab.getRowCount() == 0;\n    var linkArr = this.vGridPanel.getLinkComponents();\n    for (var i = 0; i < linkArr.length; i++) {\n      var comp = linkArr[i];\n      //IControl compI = (IControl)comp;\n      var columnName = comp.getName();\n      if (columnName != null) {\n        if (columnName.startsWith("lbl")) {\n          columnName = columnName.substring(3);\n        }\n        var mField = this.gTab.getField(columnName);\n        if (mField != null) {\n          if (mField.getIsDisplayed(true)) {\n            //  check context\n            var vis = comp.tag;\n            if (!comp.getIsVisible() && (vis == null || vis == "undefined" || vis)) comp.setVisible(true); //  visibility\n            if (comp instanceof VIS.Controls.IControl) {\n              var ve = comp;\n              if (noData) ve.setReadOnly(true);else {\n                var rw = mField.getIsEditable(true) && !this.gTab.getIsReadOnly(); //  r/w - check Context\n                ve.setReadOnly(!rw);\n                //\tlog.log(Level.FINEST, "RW=" + rw + " " + mField);\n                ve.setMandatory(mField.getIsMandatory(true));\n                //mField.validateValue();\n                ve.setBackground(mField.getIsError());\n              }\n            }\n          } else if (comp.getIsVisible()) comp.setVisible(false);\n          // reset error status for nondisplayed fields if they are not mandatory\n          if (!mField.getIsDisplayed(true) && !mField.getIsMandatory(true)) {\n            mField.setError(false);\n          }\n        }\n      }\n    }\n  };\n\n  //Set Default Focus for grid... Not in use Yet.\n  VIS.GridController.prototype.setDefaultFocus = function () {\n    var noData = this.gTab.getRowCount() == 0;\n    var compos = this.vGridPanel.getComponents();\n    var size = compos.length;\n    for (var i = 0; i < size; i++) {\n      var comp = compos[i];\n      //IControl compI = (IControl)comp;\n      var columnName = comp.getName();\n      if (columnName != null) {\n        var mField = this.gTab.getField(columnName);\n        if (mField != null) {\n          if (mField.getIsDefaultFocus()) {\n            this.vTable.setDefaultFocus(columnName);\n            break;\n          }\n        }\n      }\n    }\n  };\n  VIS.GridController.prototype.setVisible = function (visible) {\n    if (!this.layoutLoaded) {\n      this.initLayout();\n    }\n    if (visible) {\n      this.getRoot().show();\n      this.vTable.resize();\n    } else {\n      this.getRoot().hide();\n    }\n  };\n  VIS.GridController.prototype.getMTab = function () {\n    return this.gTab;\n  };\n  VIS.GridController.prototype.getAPanel = function () {\n    return this.aPanel;\n  };\n  VIS.GridController.prototype.getIsDisplayed = function () {\n    return this.gTab.getIsDisplayed(false);\n  };\n  VIS.GridController.prototype.getTabLevel = function () {\n    return this.gTab.getTabLevel();\n  };\n  VIS.GridController.prototype.getTitle = function () {\n    return this.gTab.getName();\n  };\n  VIS.GridController.prototype.getSelection = function (retIndex) {\n    return this.vTable.getSelection(retIndex);\n  };\n\n  /* \r\n   * Selected grid Rows \r\n   *  \r\n   */\n  VIS.GridController.prototype.getSelectedRows = function () {\n    return this.vTable.getSelectedRows();\n  };\n  VIS.GridController.prototype.getColumnNames = function () {\n    if (this.colNames) return this.colNames;\n    var fields = this.gTab.getTableModel().getFields();\n    var colObj = {};\n    for (var i = 0; i < fields.length; i++) {\n      colObj[fields[i].getColumnName()] = fields[i].getHeader();\n    }\n    this.colNames = colObj;\n    return this.colNames;\n  };\n  VIS.GridController.prototype.setMnemonics = function (setNum) {};\n  VIS.GridController.prototype.activate = function (oldGC, aParams) {\n    oldGC = oldGC || {};\n    if (this.displayAsIncludedGC) {\n      var tdArea = this.aPanel.getLayout();\n      this.setUI(false);\n      this.getRoot().detach();\n      tdArea.append(this.getRoot());\n      this.displayAsIncludedGC = false;\n      this.aPanel.getIncludedEmptyArea().css({\n        \'display\': \'none\'\n      });\n      tdArea.addClass(\'vis-ad-w-p-center-view-height\');\n      tdArea.find(\'.vis-ad-w-p-vc-editview\').css("position", "absolute");\n    } else if (this.gTab.getIncluded_Tab_ID() == 0) {\n      var olcIncludedTab = oldGC.vIncludedGC;\n      if (olcIncludedTab) {\n        var tdArea = olcIncludedTab.aPanel.getLayout();\n        olcIncludedTab.setUI(false);\n        olcIncludedTab.getRoot().detach();\n        this.aPanel.getIncludedEmptyArea().css({\n          \'display\': \'none\'\n        });\n        tdArea.addClass(\'vis-ad-w-p-center-view-height\');\n        tdArea.find(\'.vis-ad-w-p-vc-editview\').css("position", "absolute");\n      }\n    }\n    //vIncludedGC\n    this.isIncludedGCVisible = false;\n    var gridAutoHeight = false; // grid fixed height body\n\n    if (this.vIncludedGC) {\n      // has included GC\n      //  this.vIncludedGC.vTable.activate();\n      this.vIncludedGC.displayAsIncludedGC = false;\n      this.vIncludedGC.isIncludedGCVisible = false;\n      var tdArea = this.aPanel.getLayout();\n      tdArea.removeClass(\'vis-ad-w-p-center-view-height\');\n      tdArea.find(\'.vis-ad-w-p-vc-editview\').css("position", "unset");\n      gridAutoHeight = true;\n    } else if (this.gTab.getIsTPBottomAligned()) {\n      // show single scroll in case of tab panel bottom aligned also\n      var tdArea = this.aPanel.getLayout();\n      tdArea.removeClass(\'vis-ad-w-p-center-view-height\');\n      tdArea.find(\'.vis-ad-w-p-vc-editview\').css("position", "unset");\n      gridAutoHeight = true;\n    }\n    this.vTable.activate(this.multiTabView || gridAutoHeight);\n    this.vTable.setReadOnly(false);\n    this.activateTree();\n\n    //Overwrite setting according to actionParam\n    this.actionParams = aParams;\n    if (aParams) {\n      if (aParams.IsHideHeaderPanel != null) {\n        if (aParams.IsHideHeaderPanel) {\n          if (this.vHeaderPanel) this.vHeaderPanel.hidePanel();else if (this.aPanel.vHeaderPanel) this.aPanel.vHeaderPanel.hidePanel();\n        } else {\n          if (this.vHeaderPanel) this.vHeaderPanel.showPanel();else if (this.aPanel.vHeaderPanel) this.aPanel.vHeaderPanel.showPanel();\n        }\n      } else {\n        if (this.vHeaderPanel != null) {\n          if (this.gTab.isHPanelNotShowInMultiRow && !this.getIsSingleRow()) {\n            this.vHeaderPanel.hidePanel();\n          } else {\n            this.vHeaderPanel.showPanel();\n          }\n          if (this.vHeaderPanel.sizeChangedListner && this.vHeaderPanel.sizeChangedListner.onSizeChanged) this.vHeaderPanel.sizeChangedListner.onSizeChanged();\n        }\n      }\n    } else {\n      this.actionParams = {};\n    }\n    //set in Grid tab also\n    this.gTab.actionParams = this.actionParams;\n    //check for defalut card in Action Params\n    if (this.actionParams.Card_ID > 0) {\n      this.gTab.getTableModel().setCardID(this.actionParams.Card_ID);\n      if (this.isCardRow && this.vCardView) this.vCardView.cardID = this.actionParams.Card_ID;\n    }\n  };\n  VIS.GridController.prototype.multiRowResize = function () {\n    if (!this.singleRow && !this.isCardRow) this.vTable.resize();\n  };\n\n  /* TREE */\n  /*\r\n   * \tActivate Grid Controller.\r\n   * \tCalled by APanel when GridController is displayed (foreground)\r\n   */\n  VIS.GridController.prototype.activateTree = function () {\n    //\tTree to be initiated on second/.. tab\n    if (this.gTab.getIsTreeTab() && this.gTab.getTabNo() > 0) {\n      var AD_Tree_ID = 0;\n      if (this.gTab.getTabLevel() > 0)\n        //\tcheck previous tab for AD_Tree_ID\n        {\n          var keyColumnName = this.gTab.getKeyColumnName();\n          var treeName = "AD_Tree_ID";\n          if (keyColumnName.startsWith("CM")) {\n            if (keyColumnName.equals("CM_Container_ID")) treeName = "AD_TreeCMC_ID";else if (keyColumnName.equals("CM_CStage_ID")) treeName = "AD_TreeCMS_ID";else if (keyColumnName.equals("CM_Template_ID")) treeName = "AD_TreeCMT_ID";else if (keyColumnName.equals("CM_Media_ID")) treeName = "AD_TreeCMM_ID";\n          }\n          AD_Tree_ID = VIS.Env.getCtx().getWindowContextAsInt(this.windowNo, treeName);\n          //log.config(keyColumnName + " -> " + treeName + " = " + AD_Tree_ID);\n        }\n      if (AD_Tree_ID == 0) {\n        var AD_Table_ID = this.gTab.getAD_Table_ID();\n        var AD_Client_ID = VIS.Env.getCtx().getAD_Client_ID();\n        if (AD_Table_ID == 0) return 0;\n\n        //var dr = executeReader("SELECT AD_Tree_ID, Name FROM AD_Tree "\n        //    + "WHERE AD_Client_ID=" + AD_Client_ID + " AND AD_Table_ID=" + AD_Table_ID + " AND IsActive=\'Y\' AND IsAllNodes=\'Y\' "\n        //    + "ORDER BY IsDefault DESC, AD_Tree_ID");\n\n        var sql = "VIS_121";\n        var param = [];\n        param[0] = new VIS.DB.SqlParam("@AD_Client_ID", AD_Client_ID);\n        param[1] = new VIS.DB.SqlParam("@AD_Table_ID", AD_Table_ID);\n        var dr = executeReader(sql, param);\n        if (dr.read()) {\n          AD_Tree_ID = dr.getInt(0);\n        }\n        dr = null;\n        //AD_Tree_ID = 101;\n        //MTree.getDefaultAD_Tree_ID(\n        //\t\tEnv.getCtx().getAD_Client_ID(), m_mTab.getAD_Table_ID());\n      }\n      if (this.m_tree != null && AD_Tree_ID > 0) this.m_tree.initTree(AD_Tree_ID);\n    }\n  }; //\tactivate\n\n  VIS.GridController.prototype.nodeSelectionChanged = function (e) {\n    //\tSystem.out.println("propertyChange");\n    //\tSystem.out.println(e);\n    if (e == null) return;\n    var value = e.newValue;\n    if (value == null) return;\n    //log.config(e.propertyName() + "=" + value\n\n    //  We Have a TreeNode\n    var nodeID = value;\n    this.treeNodeID = nodeID;\n    //this.selectedTreeNode = nodeID;\n    this.gTab.SetSelectedNode(nodeID);\n    this.gTab.SetIsSummaryNode(e.isSummaryNode);\n    if (this.onDemandTree) {\n      if (this.aPanel && this.aPanel.setBusy) {\n        this.aPanel.setBusy(true);\n      }\n      this.gTab.setTreeNodeID(nodeID);\n      this.gTab.gridTable.setCurrentPage(1);\n      // this.gTab.setQuery(null);\n      this.navigate(0);\n      this.query(0, 0, false, nodeID, this.treeID, this.gTab.getAD_Table_ID()); //  autoSize\n      return;\n    }\n\n    //  Search all rows for mode id\n    var size = this.gTab.getRowCount();\n    var row = -1;\n    for (var i = 0; i < size; i++) {\n      if (this.gTab.getKeyID(i) == nodeID) {\n        row = i;\n        break;\n      }\n    }\n    if (row == -1) {\n      //this.log.log(Level.WARNING, "Tab does not have ID with Node_ID=" + nodeID);\n      return;\n    }\n\n    //  Navigate to node row\n    this.navigate(row);\n  }; //  pro\n\n  /** END*/\n\n  /*\r\n    skip row inserting (used by window qiuck serch )  \r\n    -if Automatic new row record set to true\r\n    @param ignore true or false\r\n   */\n  VIS.GridController.prototype.skipRowInserting = function (ignore) {\n    this.skipInserting = ignore;\n  };\n  VIS.GridController.prototype.query = function (onlyCurrentDays, maxRows, created, nodeID, treeID, tableID) {\n    if (this.aPanel && this.aPanel.setBusy) {\n      this.aPanel.setBusy(true);\n    }\n    if (this.onDemandTree) {\n      if (nodeID) {\n        this.gTab.setTreeNodeID(nodeID);\n      }\n      if (treeID) {\n        this.gTab.setTreeID(treeID);\n      }\n      if (tableID) {\n        this.gTab.setTreeTable(tableID);\n      }\n      if (this.aPanel.isSummaryVisible) {\n        this.gTab.setShowSummaryNodes(true);\n      } else {\n        this.gTab.setShowSummaryNodes(false);\n      }\n    }\n    var result = this.gTab.prepareQuery(onlyCurrentDays, maxRows, created, false);\n  };\n  VIS.GridController.prototype.applyFilters = function (qry) {\n    //var finalwhere = qry.getWhereClause();\n    var reportWhere = "";\n    var whrs = [];\n    if (this.searchCode && this.searchCode != \'\') {\n      whrs.push(this.searchCode);\n      //qry.addRestriction(this.seachCode);\n    }\n    var qryWhere = qry.getWhereClause();\n    if (qryWhere != "") whrs.push(qry.getWhereClause());\n    if (this.aFilterPanel) {\n      var where = this.aFilterPanel.getFilterClause();\n      if (where != \'\') whrs.push(where);\n      //qry.addRestriction(where);\n    }\n    // For Report add Orignal Condition\n    reportWhere = qry.getWhereClause(true);\n    qry.clear();\n    if (whrs.length > 0) {\n      qry.addRestriction(whrs.join(\' AND \'));\n      qry[\'reportWhere\'] = reportWhere;\n    } else {\n      qry = null;\n    }\n    ;\n    //Set Page value to 1\n    this.getMTab().getTableModel().setCurrentPage(1);\n    this.getMTab().setQuery(qry);\n    this.query(0, 0, null);\n  };\n  VIS.GridController.prototype.queryCompleted = function (result) {\n    this.vTable.clear();\n    this.gTab.clearSelectedRow();\n    //\n    this.vTable.add(this.gTab.getTableModel().getDataTable());\n    this.gTab.getTableModel().setSortModel(this.vTable.getGrid().records);\n    if (!this.displayAsIncludedGC) {\n      if (this.onRowInserting) this.onRowInserting();else this.checkInsertNewRow();\n    }\n\n    //Updated by raghu \n    //date:19-01-2016\n    //Change/Update for:Zoom from workflow on home page\n\n    //if (!this.vIncludedGC || this.isIncludedGCVisible || this.isZoomAction || 1==1) {\n    this.navigate(this.gTab.getCurrentRow(), !this.gTab.getTableModel().getIsInserting());\n    //}\n    //else {\n    //    this.gTab.currentRow = -1;\n    //    this.gTab.fireDataStatusEventOnly();\n    //}\n\n    //refresh card view\n    if (this.isCardRow) this.vCardView.refreshUI(this.getVCardPanel().width());\n\n    //refresh card view\n    if (this.isMapRow) this.vMapView.refreshUI(this.getVMapPanel().width());\n    if (this.aPanel) {\n      this.aPanel.setBusy(this.isCardRow);\n      //this.aPanel.onQueryCompleted();\n    }\n    this.skipInserting = false; // reset \n\n    this.dynamicDisplay(-1);\n    //if (this.aPanel.$parentWindow.onLoad) {  //Change/Update for:Zoom from workflow on home page\n    //    this.aPanel.$parentWindow.onLoad();\n    //    this.aPanel.$parentWindow.onLoad = null;\n    //}\n  };\n  VIS.GridController.prototype.checkInsertNewRow = function () {\n    if (this.aPanel == null || this.aContentPane) return false;\n    var parentValid = true;\n    var lc = this.gTab.getLinkColumnName();\n    var lcValue = VIS.context.getWindowContext(this.windowNo, lc);\n    if (lc.Length > 0 && lcValue.length == 0) {\n      parentValid = false;\n    }\n    //Set Initial record\n    //  Set initial record\n    if (this.gTab.getTableModel().getTotalRowCount() == 0 || this.gTab.getTableModel().getTotalRowCount() == null || this.actionParams.IsTabInNewMode) {\n      //\tAutomatically create New Record, if none & tab not RO\n      if (!this.gTab.getIsReadOnly() && (this.gTab.getIsZoomAction() == true || VIS.context.getIsAutoNew(this.windowNo) || this.gTab.getIsQueryNewRecord() || this.gTab.getIsAutoNewRecord() || this.actionParams.IsTabInNewMode) && parentValid) {\n        if (this.gTab.getIsInsertRecord() && !this.skipInserting) {\n          //When user clicks on new record from combo or search button, then switch view \n          this.setNewRecordLayout();\n          this.dataNew(false);\n          return true;\n        } else {\n          //aPanel.SetButtons(false, false);\n          //aPanel.SetNavigateButtons();\n        }\n      }\n    }\n\n    //reset\n    return false;\n  };\n\n  /**\r\n   * Check new record setting and switch to relevent view.\r\n   * S--\x3e Single View(on click new switch to single view)\r\n   * G--\x3e Grid View(on click new, switch to grid view)\r\n   * else --\x3e Current View (if current view is card then switch to single otherwise current view)\r\n   * */\n  VIS.GridController.prototype.setNewRecordLayout = function () {\n    var newRecordView = this.gTab.getNewRecordView();\n    if (newRecordView == NEWRECORDVIEW_SingleRowLayout) {\n      this.switchSingleRow();\n      this.aPanel.showHideViewIcon(this.aPanel.aSingle);\n    } else if (newRecordView == NEWRECORDVIEW_GridLayout) {\n      this.isNewClick = true; // use for stop requery data\n      this.switchMultiRow();\n      this.aPanel.showHideViewIcon(this.aPanel.aMulti);\n    } else {\n      if (this.getIsCardRow()) {\n        this.switchSingleRow();\n        this.aPanel.showHideViewIcon(this.aPanel.aSingle);\n      }\n    }\n  };\n  /*\r\n    - Handle Control\'s Change value Event\r\n  */\n  VIS.GridController.prototype.vetoablechange = function (e) {\n    ////  Get Row/Col Info\n    var mTable = this.gTab.getTableModel();\n    var row = this.gTab.getCurrentRow();\n    var col = mTable.findColumn(e.propertyName);\n    ////\n    ////  modified to enforce validation even when the new value      null\n    mTable.setValueAt(e.newValue, row, col); //\t-> dataStatusChanged -> dynamicDisplay\n  };\n  VIS.GridController.prototype.actionPerformed = function (evt) {\n    if (this.aContentPane) {\n      this.aContentPane.actionPerformed(evt);\n      return;\n    }\n    this.aPanel.actionPerformed(evt);\n  };\n\n  /*\r\n   - handle UI refresh Request \r\n  */\n  VIS.GridController.prototype.refreshUI = function (e) {\n    this.dataRefreshAll();\n  };\n  VIS.GridController.prototype.navigate = function (tRow, force) {\n    //  nothing to do\n    //console.log(!force);\n    //  new position\n    //var recid = this.gTab.navigate(tRow, true, force);\n\n    if (!force && tRow == this.gTab.getCurrentRow()) {\n      //if (this.m_tree != null)\n      //    this.navigateTreeNode(tRow);\n      return this.gTab.getCurrentRow();\n    }\n\n    //  new position\n    var recid = this.gTab.navigate(tRow, true, force);\n    if (recid > -1 && !this.rowSetting) {\n      this.settingGridSelecton = true;\n      this.vTable.select(recid); //select row for Grid\n      this.settingGridSelecton = false;\n      this.vCardView.navigate(recid, !this.isCardRow);\n    }\n    // Make sure this code works wonly when card view is opened.\n    else if (recid > -1 && this.isCardRow) {\n      this.settingGridSelecton = true;\n      this.vTable.select(recid); //select row for Grid\n      this.settingGridSelecton = false;\n      this.vCardView.navigate(recid, true);\n    }\n    if (this.vHeaderPanel) {\n      this.vHeaderPanel.navigate();\n    }\n    if (recid == -1) {\n      this.cancelSel = true;\n      this.refreshTabPanelData(-1);\n      return;\n    }\n    if (recid > -1) {\n      this.refreshTabPanelData(this.gTab.getRecord_ID());\n    }\n    //treeselectin\n    //\tTreeNavigation - Synchronize \t-- select node in tree\n    this.navigateTreeNode(tRow);\n    return this.gTab.getCurrentRow();\n  };\n  VIS.GridController.prototype.navigateTreeNode = function (tRow) {\n    //treeselectin\n    //\tTreeNavigation - Synchronize \t-- select node in tree\n    if (this.m_tree != null) {\n      this.m_tree.setSelectedNode(this.gTab.getRecord_ID()); //\tignores new (-1)\n\n      this.gTab.SetIsSummaryNode(this.m_tree.isSummaryNode);\n    }\n    this.vTable.scrollInView(tRow);\n    if (this.onDemandTree) {\n      var recID = this.gTab.getRecord_ID();\n      var treID = this.treeID;\n      var selfApnel = this.aPanel;\n      $.ajax({\n        url: VIS.Application.contextUrl + "JsonData/GetTreeNodePath",\n        data: {\n          nodeID: recID,\n          treeID: treID\n        },\n        success: function (result) {\n          var data = JSON.parse(result);\n          selfApnel.setStatusLine(data);\n        },\n        error: function (e) {\n          console.log(e);\n        }\n      });\n    }\n  };\n  VIS.GridController.prototype.navigatePageExact = function (newPage) {\n    this.gTab.getTableModel().setCurrentPage(newPage);\n    //MRole role = MRole.GetDefault();\n    this.query(this.gTab.getOnlyCurrentDays(),\n    //role.GetMaxQueryRecords(), false);\t//\tupdated\n    0, false, this.treeNodeID, this.treeID, this.gTab.getAD_Table_ID()); //\tupdated\n  };\n  VIS.GridController.prototype.navigatePage = function (newPage) {\n    this.gTab.getTableModel().setCurrentPageRelative(newPage);\n    //MRole role = MRole.GetDefault();\n    this.query(this.gTab.getOnlyCurrentDays(),\n    //role.GetMaxQueryRecords(), false);\t//\tupdated\n    0, false, this.treeNodeID, this.treeID, this.gTab.getAD_Table_ID()); //\tupdated\n  };\n  VIS.GridController.prototype.navigateRelative = function (rowChange) {\n    return this.navigate(this.gTab.getCurrentRow() + rowChange);\n  };\n  VIS.GridController.prototype.dataRefresh = function () {\n    var record = this.gTab.dataRefresh();\n    this.dynamicDisplay(-1);\n    window.setTimeout(function (t) {\n      t.notifyDependents();\n      t = null;\n    }, 500, this);\n  };\n  VIS.GridController.prototype.dataRefreshAll = function () {\n    this.gTab.dataRefreshAll();\n  };\n  VIS.GridController.prototype.dataSave = function (manualCmd) {\n    var $this = this;\n    var isCheckListRequire = $this.IsCheckListRequire();\n    if (!isCheckListRequire) {\n      VIS.ADialog.error("CheckListRequired");\n      return false;\n    }\n    if ($this.m_tree != null) {\n      $this.gTab.SetSelectedNode($this.m_tree.currentNode);\n      $this.gTab.setTreeID($this.treeID);\n    }\n    var retVal = $this.gTab.dataSave(manualCmd);\n    if (retVal) {\n      if (manualCmd && $this.vHeaderPanel) {\n        $this.vHeaderPanel.navigate();\n        //refresh Grid Row\n        // this.vTable.refreshRow();\n      }\n      //refresh Grid Row\n      // this.vTable.refreshRow();\n    }\n    return retVal;\n    // });\n  };\n  VIS.GridController.prototype.dataNew = function (copy) {\n    //this.rowSetting = true;\n    //this.switchSingleRow();\n\n    // Default Focus should be set only for first time, not for every datastatus Changed. \n    //So to achieve this, a flag is set on every new click.\n    this.isDefaultFocusSet = false;\n    this.gTab.dataNew(copy);\n    this.dynamicDisplay(-1);\n    this.notifyDependents();\n    if (this.onRowInserted) {\n      this.onRowInserted();\n    }\n    this.isDefaultFocusSet = true;\n  };\n  VIS.GridController.prototype.canDeleteRecords = function () {\n    var selIndices = this.vTable.getSelection(true);\n    var records = this.vTable.getGrid().records;\n    var retIndices = [];\n    for (var i = 0; i < selIndices.length; i++) {\n      var record = records[selIndices[i]];\n      if ("ad_client_id" in record) {\n        if (!VIS.MRole.getIsClientAccess(record.ad_client_id, true)) retIndices.push(selIndices[i]);\n      }\n    }\n    return retIndices;\n  };\n  VIS.GridController.prototype.dataDelete = function () {\n    var retValue = this.gTab.dataDelete(this.vTable.getSelection(true));\n    if (this.vTabPanel && this.vTabPanel.curTabPanel && this.vTabPanel.curTabPanel.isCheckListFill) {\n      this.vTabPanel.curTabPanel.setisCheckListFill(false);\n    }\n    this.refreshTabPanelData(this.gTab.getRecord_ID());\n    this.dynamicDisplay(-1);\n    return retValue;\n  };\n  VIS.GridController.prototype.dataDeleteAsync = function () {\n    this.aPanel.setBusy(true);\n    var that = this;\n    that.gTab.getTableModel().dataDeleteAsync(that.vTable.getSelection(true), that.gTab.currentRow).then(function (info) {\n      that.gTab.setCurrentRow(that.gTab.currentRow, true);\n      if (that.vTabPanel && that.vTabPanel.curTabPanel && that.vTabPanel.curTabPanel.isCheckListFill) {\n        that.vTabPanel.curTabPanel.setisCheckListFill(false);\n      }\n      that.refreshTabPanelData(that.gTab.getRecord_ID());\n      that.dynamicDisplay(-1);\n      that.aPanel.setBusy(false);\n    });\n\n    //return retValue;\n  };\n\n  /**\r\n   *  Row Changed - synchronize with Tree\r\n   *\r\n   *  @param  save    true the row was saved (changed/added), false if the row was deleted\r\n   *  @param  keyID   the ID of the row changed\r\n   */\n  VIS.GridController.prototype.rowChanged = function (save, keyID) {\n    if (this.m_tree == null) return;\n    if ($.isArray(keyID) && !save) {\n      for (var i = 0; i < keyID.length; i++) this.m_tree.nodeChanged(save, keyID[i], "", "", "", "");\n      return;\n    }\n    if (keyID <= 0) return;\n    var name = this.gTab.getValue("Name");\n    var description = this.gTab.getValue("Description");\n    var IsSummary = this.gTab.getValue("IsSummary");\n    var summary = IsSummary == true || IsSummary == "Y";\n    var imageIndicator = this.gTab.getValue("Action"); //  Menu - Action\n    //\n    if (this.gTab.gridTable.columns.indexOf("Action") == -1 && !imageIndicator && !summary) imageIndicator = "O";\n    this.m_tree.nodeChanged(save, keyID, name, description, summary, imageIndicator);\n  }; //  rowChanged\n\n  VIS.GridController.prototype.dataIgnore = function () {\n    this.gTab.dataIgnore();\n    this.dynamicDisplay(-1);\n    this.notifyDependents();\n    this.vTable.refreshUndo();\n  };\n\n  /**\r\n   * add sub tab view datastatus listner \r\n   * --contentpane\r\n   * @param {any} lsnr\r\n   */\n  VIS.GridController.prototype.addSubTabDataStatusListner = function (lsnr) {\n    this.aContentPane = lsnr;\n  };\n\n  /**\r\n   * Remove subtab view data status listnerlistner\r\n   * */\n  VIS.GridController.prototype.removeSubTabDataStatusListner = function () {\n    this.aContentPane = null;\n  };\n\n  /**\r\n   * listen data state changed \r\n   * @param {any} e\r\n   */\n  VIS.GridController.prototype.dataStatusChanged = function (e) {\n    if (this.displayAsIncludedGC) {\n      this.enableDisableToolbarItems(true);\n      return;\n    }\n    if (this.aContentPane)\n      //Sub tab view lister\n      this.aContentPane.dataStatusChanged(e);else this.aPanel.dataStatusChanged(e);\n    var col = e.getChangedColumn();\n    if (this.vHeaderPanel) {\n      this.vHeaderPanel.navigate();\n    } else if (this.aPanel.vHeaderPanel) {\n      this.aPanel.vHeaderPanel.navigate(true);\n    }\n    if (e.m_info == "VER") {\n      /*version call back */\n      e.m_info = "";\n      this.gTab.setCurrentRow(e.m_currentRow);\n      this.dynamicDisplay(col);\n    }\n    if (!e.getIsChanged() || col < 0) return;\n\n    //  Process Callout\n    var mField = this.gTab.getField(col);\n    if (mField != null) {\n      //mField.validateValue();\n      if (mField.getCallout().length > 0) {\n        var msg = this.gTab.processFieldChange(mField); //  Dependencies & Callout\n        if (msg.length > 0) {\n          VIS.ADialog.error(msg);\n        }\n      } else\n        //\tno callout to set dependent fields\n        {\n          var columnName = mField.getColumnName();\n          dependants = this.gTab.getDependantFields(columnName);\n          for (var i = 0; i < dependants.length; i++) {\n            var dep = dependants[i];\n            if (dep == null) continue;\n            var lookup = dep.getLookup();\n            if (lookup == null) continue;\n            //\n            var val = lookup.getValidation();\n            if (val.indexOf(columnName) != -1)\n              //\tdep is dependent\n              {\n                // var mField = this.gTab.getField(columnName);\n\n                this.gTab.getTableModel().setDisableNotification(true);\n                this.gTab.setValue(dep, null);\n                //dep.setValue(null, true);\n                this.gTab.getTableModel().setDisableNotification(false);\n                //Object oldValue = lookup.getSelectedItem();\n                //boolean mandatory = dep.isMandatory(false);\n                // lookup.fillComboBox (mandatory, true, true, false);\n                // lookup.setSelectedItemAlways(oldValue);\t//\tset old value with new rules\n              }\n          } //\tfor all dependent fields\n        }\n    }\n    this.dynamicDisplay(col); //\t -1 = all\n  }; //  dataStatusChanged\n\n  VIS.GridController.prototype.includeTab = function (gc) {\n    var imcludedMTab = gc.getMTab();\n    if (this.gTab.getIncluded_Tab_ID() != imcludedMTab.getAD_Tab_ID()) return false;\n    this.vIncludedGC = gc;\n    this.vIncludedGC.switchMultiRow();\n    return true;\n  }; //\tIncludeTab\n\n  VIS.GridController.prototype.switchSingleRow = function (skip) {\n    if (this.onlyMultiRow || this.singleRow) return;\n    this.singleRow = true;\n    this.isCardRow = false;\n    this.isMapRow = false;\n    var p1 = this.getVTablePanel();\n    var p = this.getVPanel();\n    if (this.isIncludedGCVisible || true) {\n      //p1.width("0%");//  css(\'width:50%\');;\n      //p.width("99%");//  css(\'width:50%\');;\n      p1.hide();\n      p.css("display", "block"); // .show();\n      this.getVCardPanel().hide();\n      this.getVMapPanel().hide();\n    }\n    if (this.gTab.isHPanelNotShowInMultiRow && !this.actionParams.IsHideHeaderPanel && this.vHeaderPanel != null) {\n      this.vHeaderPanel.showPanel();\n      if (this.vHeaderPanel.sizeChangedListner && this.vHeaderPanel.sizeChangedListner.onSizeChanged) this.vHeaderPanel.sizeChangedListner.onSizeChanged();\n    }\n    this.dynamicDisplay(-1);\n  };\n  VIS.GridController.prototype.switchMultiRow = function (avoidRequery) {\n    if (this.singleRow || this.isCardRow) {\n      this.singleRow = false;\n      this.isCardRow = false;\n      this.isMapRow = false;\n      var p1 = this.getVTablePanel();\n      this.getVPanel().hide();\n      this.getVCardPanel().hide();\n      this.getVMapPanel().hide();\n\n      // p1.width(this.displayAsIncludedGC ? \'98%\' : \'97%\');\n      if (this.isIncludedGCVisible) p1.css({\n        "float": \'right\'\n      });else p1.css({\n        "float": \'\'\n      });\n      p1.show();\n      p1 = null;\n      this.vTable.resize();\n      this.vTable.refreshRow();\n      if ((this.gTab.isHPanelNotShowInMultiRow || this.actionParams.IsHideHeaderPanel) && this.vHeaderPanel != null) {\n        this.vHeaderPanel.hidePanel();\n        if (this.vHeaderPanel.sizeChangedListner && this.vHeaderPanel.sizeChangedListner.onSizeChanged) this.vHeaderPanel.sizeChangedListner.onSizeChanged();\n      }\n\n      //this.gTab.getTableModel().resetCard();\n      //if (!this.isNewClick && !avoidRequery) {\n      //    this.aPanel.clearSearchBox();\n      //    this.refreshFilterPanelData();\n      //    var query = new VIS.Query();\n      //    this.getMTab().setQuery(query);\n      //    this.query(0, 0, null);\n      //}\n      this.isNewClick = false;\n    }\n  };\n  VIS.GridController.prototype.switchCardRow = function (avoidRequery) {\n    if (!this.isCardRow) {\n      this.singleRow = false;\n      this.isCardRow = true;\n      this.isMapRow = false;\n      this.getVTablePanel().hide();\n      this.getVPanel().hide();\n      this.getVMapPanel().hide();\n      var p1 = this.getVCardPanel();\n\n      //p1.width(this.displayAsIncludedGC ? \'98%\' : \'97%\');\n      if (this.isIncludedGCVisible) p1.css({\n        "float": \'right\'\n      });else p1.css({\n        "float": \'\'\n      });\n      p1.css(\'display\', \'block\');\n      this.gTab.getTableModel().setCardID(this.vCardView.cardID);\n      if (!avoidRequery) {\n        this.aPanel.clearSearchBox();\n        this.refreshFilterPanelData();\n        this.vCardView.resetCard();\n        var query = new VIS.Query();\n        this.getMTab().setQuery(query);\n        this.query(this.gTab.getOnlyCurrentDays(), 0, false);\n      }\n      //this.vCardView.requeryData();\n      if ((this.gTab.isHPanelNotShowInMultiRow || this.actionParams.IsHideHeaderPanel) && this.vHeaderPanel != null) {\n        this.vHeaderPanel.hidePanel();\n        if (this.vHeaderPanel.sizeChangedListner && this.vHeaderPanel.sizeChangedListner.onSizeChanged) this.vHeaderPanel.sizeChangedListner.onSizeChanged();\n      }\n      p1 = null;\n    }\n  };\n  VIS.GridController.prototype.switchMapRow = function (locationID) {\n    if (!this.isMapRow) {\n      //this.singleRow = true;\n      //this.isCardRow = false;\n      this.isMapRow = true;\n      this.getVTablePanel().hide();\n      this.getVPanel().hide();\n      this.getVCardPanel().hide();\n      var p1 = this.getVMapPanel();\n\n      //p1.width(this.displayAsIncludedGC ? \'98%\' : \'97%\');\n      if (this.isIncludedGCVisible) p1.css({\n        "float": \'right\'\n      });else p1.css({\n        "float": \'\'\n      });\n      p1.show();\n      this.vMapView.refreshUI(this.getVMapPanel().width(), locationID);\n      p1 = null;\n      //this.vTable.resize();\n    }\n  };\n  VIS.GridController.prototype.notifyDependents = function () {\n    if (this.vIncludedGC) {\n      this.switchIncludedGC();\n    }\n  };\n\n  //show hide Included grid\n  /**\r\n   * \r\n   * */\n  VIS.GridController.prototype.switchIncludedGC = function () {\n    if (!this.vIncludedGC || this.displayAsIncludedGC)\n      //has included grid\n      return;\n    var visible = this.isIncludedGCVisible; //`\n    //return;\n\n    if (!visible) {\n      var tdArea = this.aPanel.getIncludedEmptyArea();\n      tdArea.empty();\n      var inGc = this.vIncludedGC.getRoot();\n      inGc.detach();\n      this.vIncludedGC.setUI(true);\n      tdArea.append(inGc);\n\n      //tdArea.height(VIS.Application.isMobile ? 250 : 350);\n      tdArea.css(\'display\', \'flex\');\n      inGc.show();\n      this.vIncludedGC.vTable.activate(true);\n      this.vIncludedGC.vTable.setReadOnly(true);\n\n      //this.getRoot().show();\n      this.isIncludedGCVisible = true;\n      if (!this.singleRow) {\n        this.singleRow = true;\n        this.switchMultiRow();\n      }\n      this.vIncludedGC.displayAsIncludedGC = true;\n      this.vIncludedGC.singleRow = true;\n      this.vIncludedGC.switchMultiRow();\n      this.vTable.resize();\n    }\n    ;\n    window.setTimeout(function (s) {\n      s.vIncludedGC.query(0, 0, false);\n      s = null;\n    }, 1, this);\n  };\n  VIS.GridController.prototype.removeRecord = function (e) {\n    var selectedRecs = this.vTable.getSelection(true);\n    if (selectedRecs && selectedRecs.length > 0) {\n      for (var i = 0; i < selectedRecs.length; i++) {\n        this.vTable.grid.unselect(selectedRecs[i] + 1);\n        this.vTable.grid.remove(selectedRecs[i] + 1);\n      }\n    }\n    this.navigate(0);\n    this.aPanel.setBusy(false);\n  };\n  VIS.GridController.prototype.dispose = function () {\n    //unwind events\n    //this.vTable.getGrid().off(\'select\', this.onTableRowSelect);\n\n    this.gTab.removeDataStatusListener(this.aPanel);\n    this.gTab.removeDataStatusListener();\n    this.gTab.getTableModel().removeTableModelListener(this.vTable);\n    this.gTab.getTableModel().removeCardModelListener(this.vCardView);\n    this.gTab.getTableModel().removeRowChangedListener();\n    this.gTab.getTableModel().removeQueryCompleteListner();\n    this.disposeComponent();\n    this.gTab = null;\n    this.windowNo = null;\n    this.onlyMultiRow = null;\n    this.aPanel = null;\n    if (this.m_tree) this.m_tree.dispose();\n    if (this.vTabPanel) {\n      this.vTabPanel.dispose();\n      this.vTabPanel = null;\n    }\n    if (this.aFilterPanel) {\n      this.aFilterPanel.dispose();\n      this.aFilterPanel = null;\n    }\n    /*****Header Panel******/\n    if (this.vHeaderPanel) this.vHeaderPanel.dispose();\n    this.m_tree = null;\n  };\n  VIS.GridController.prototype.HEADER_HEIGHT = 55;\n\n  //****************** END *****************************//\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/aviewcontroller.js?')},"./Areas/VIS/Scripts/F20/themecnfgtr.js":()=>{eval(';\n(function (VIS, $) {\n  VIS.ThemeCnfgtor = function () {\n    var $root = $("<div class=\'vis-forms-container\'>");\n    var $busyDiv = $("<div class=\'vis-apanel-busy\'>");\n    var windowNo = VIS.Env.getWindowNo();\n    var $divTheme = null;\n    var $divCtrl = null;\n    var $divthSave = null;\n    var $ulTheme = null;\n    var $clrPrimary = null;\n    var $clrOnPrinmary = null;\n    var $clrSecondary = null;\n    var $clrOnSecondary = null;\n    var $txtName = null;\n    var $self = this;\n    function load() {\n      setThemeColor("0, 152, 247", "255, 255, 255", "238, 238, 238", "51, 51, 51");\n      setBusy(true);\n      $root.load(VIS.Application.contextUrl + \'Theme/ThemeCnfgtr/?windowNo=\' + windowNo, function (event) {\n        init();\n        fillThemeList();\n      });\n    }\n    ;\n    function setThemeColor(p, onP, s, onS) {\n      document.documentElement.style.setProperty("--v-c-th-primary", p);\n      document.documentElement.style.setProperty("--v-c-th-on-primary", onP);\n      document.documentElement.style.setProperty("--v-c-th-secondary", s);\n      document.documentElement.style.setProperty("--v-c-th-on-secondary", onS);\n    }\n    function init() {\n      $divTheme = $root.find("#divTheme_" + windowNo);\n      $divCtrl = $root.find(".vis-thed-clrpickerouterwrap");\n      $divthSave = $root.find(".vis-thed-botsavesec");\n      $clrPrimary = $divCtrl.find(\'input[name="primary"]\');\n      $clrOnPrinmary = $divCtrl.find(\'input[name="onprimary"]\');\n      $clrSecondary = $divCtrl.find(\'input[name="secondary"]\');\n      $clrOnSecondary = $divCtrl.find(\'input[name="onsecondary"]\');\n      $txtName = $divthSave.find("input");\n      $ulTheme = $root.find(".vis-thed-savedlistwrap");\n\n      // all element s\n\n      $divCtrl.find(\'input\').on(\'change\', function (e) {\n        var val = null;\n        if (this.name == "primary") {\n          document.documentElement.style.setProperty(\'--v-c-th-primary\', hexToRgbComma(this.value));\n        } else if (this.name == "onprimary") {\n          document.documentElement.style.setProperty(\'--v-c-th-on-primary\', hexToRgbComma(this.value));\n        } else if (this.name == "secondary") {\n          document.documentElement.style.setProperty(\'--v-c-th-secondary\', hexToRgbComma(this.value));\n        } else if (this.name == "onsecondary") {\n          document.documentElement.style.setProperty(\'--v-c-th-on-secondary\', hexToRgbComma(this.value));\n        }\n      });\n      $divthSave.find(\'a\').on(\'click\', function (e) {\n        if ($txtName.val().trim() == "") {\n          VIS.ADialog.error("EnterName");\n          return;\n        }\n        var $btn = $(this);\n        var isDef = $btn.data(\'action\') == "sandd";\n        setBusy(true);\n        saveThemeData(hexToRgbComma($clrPrimary.val()), hexToRgbComma($clrOnPrinmary.val()), hexToRgbComma($clrSecondary.val()), hexToRgbComma($clrOnSecondary.val()), isDef, $txtName.val());\n      });\n      $ulTheme.on("click", "LI", function (e) {\n        setBusy(true);\n        var id = $(e.currentTarget).data("id");\n        if (e.target.className.indexOf(\'vis-delete\') > -1) {\n          VIS.ADialog.confirm("DeleteRecord?", true, "", "Confirm", function (ret) {\n            if (ret) VIS.dataContext.postJSONData(VIS.Application.contextUrl + \'Theme/Delete\', {\n              id: id\n            }, function (data) {\n              fillThemeList();\n            });else setBusy(false);\n          });\n        } else {\n          VIS.dataContext.postJSONData(VIS.Application.contextUrl + \'Theme/SetDefault\', {\n            id: id\n          }, function (data) {\n            fillThemeList();\n          });\n        }\n      });\n    }\n    ;\n    function setBusy(isBusy) {\n      if (isBusy) $busyDiv[0].style.visibility = \'visible\';else $busyDiv[0].style.visibility = \'hidden\';\n    }\n    ;\n    function saveThemeData(pri, onpri, sec, onsec, isdef, name) {\n      var data = {};\n      data.Primary = pri;\n      data.OnPrimary = onpri;\n      data.Seconadary = sec;\n      data.OnSecondary = onsec;\n      data.IsDefault = isdef;\n      data.Name = name;\n      setBusy(true);\n      VIS.dataContext.postJSONData(VIS.Application.contextUrl + \'Theme/Save\', data, saveThemeDataCmplted);\n    }\n    function saveThemeDataCmplted(ret) {\n      if (ret > 0) {\n        fillThemeList();\n        $txtName.val("");\n      } else {\n        setBusy(false);\n      }\n    }\n    function fillThemeList() {\n      setBusy(true);\n      $ulTheme.empty();\n      VIS.dataContext.getJSONData(VIS.Application.contextUrl + \'Theme/GetList\', {\n        id: 0\n      }, function (data) {\n        var htm = [];\n        for (var i = 0; i < data.length; i++) {\n          var item = data[i];\n          htm.push(\'<li class="vis-thed-savedlistitem\');\n          if (item.IsDefault) htm.push(\' vis-thed-selectedlistitem\');\n          htm.push(\'" data-id="\' + item.Id + \'">\');\n          htm.push(\'<div class="vis-theme-rec" style="width:80px">\');\n          htm.push(\'<span class="vis-theme-color" style="background-color:rgba(\' + item.Primary + \',1)"></span>\');\n          htm.push(\'<span class="vis-theme-color" style="background-color:rgba(\' + item.OnPrimary + \',1)"></span>\');\n          htm.push(\'<span class="vis-theme-color" style="background-color:rgba(\' + item.Seconadary + \',1)"></span>\');\n          htm.push(\'<span class="vis-theme-color" style="background-color:rgba(\' + item.OnSecondary + \',1)"></span>\');\n          htm.push(\'</div>\');\n          htm.push(\'<a class="vis-thed-themename">\' + item.Name + \'</a>\');\n          if (item.IsDefault) htm.push(\'<i class="vis vis-markx"></i>\');\n          htm.push(\'<span style="margin:0 3px 0 3px" class="vis vis-delete"></span>\');\n          htm.push(\'</li>\');\n          if (item.IsDefault) {\n            $clrPrimary.val(regbCommaToHex(item.Primary));\n            $clrOnPrinmary.val(regbCommaToHex(item.OnPrimary));\n            $clrSecondary.val(regbCommaToHex(item.Seconadary));\n            $clrOnSecondary.val(regbCommaToHex(item.OnSecondary));\n            setThemeColor(item.Primary, item.OnPrimary, item.Seconadary, item.OnSecondary);\n          }\n        }\n        $ulTheme.append(htm.join(\' \'));\n        setBusy(false);\n      });\n    }\n    function componentToHex(c) {\n      var hex = c.toString(16);\n      return hex.length == 1 ? "0" + hex : hex;\n    }\n    ;\n\n    //function rgbToHex(r, g, b) {\n    //    return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n    //}\n    function rgbToHex(red, green, blue) {\n      var rgb = blue | green << 8 | red << 16;\n      return \'#\' + (0x1000000 + rgb).toString(16).slice(1);\n    }\n    function regbCommaToHex(rgb) {\n      var rgb = rgb.split(\',\');\n      return rgbToHex(rgb[0], rgb[1], rgb[2]);\n    }\n    function hexToRgbComma(hex) {\n      var ret = hexToRgb(hex);\n      if (ret) return ret.r + "," + ret.g + "," + ret.b;\n      return ret;\n    }\n    function hexToRgb(hex) {\n      // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")\n      var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n      hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n      });\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      } : null;\n    }\n    function showDialog() {\n      var w = $(window).width() - 150;\n      var h = $(window).height() - 10;\n      $busyDiv.height(h);\n      $busyDiv.width(w);\n      $root.append($busyDiv);\n      var ch = new VIS.ChildDialog();\n      ch.setContent($root);\n      ch.setWidth(w);\n      ch.setHeight(h);\n      ch.setTitle(VIS.Msg.getMsg("ThemeConfig"));\n      ch.setModal(true);\n      //Disposing Everything on Close\n      ch.onClose = function () {\n        $self.dispose();\n        $("#ui-datepicker-div").remove();\n        $root = null;\n        $self = null;\n      };\n      ch.show();\n      ch.hideButtons();\n    }\n    ;\n    this.show = function () {\n      load();\n      showDialog();\n    };\n    this.dispose = function () {\n      $root.remove();\n      $root = null;\n      $self = null;\n    };\n  };\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/themecnfgtr.js?')},"./Areas/VIS/Scripts/F20/vcardview.js":()=>{eval(";\n(function (VIS, $) {\n  function VCardPanel(root) {\n    var divTopArrow = $('<div class=vis-cv-rd-top><i class=\"vis vis-arrow-up\"></i></div>');\n    var divDownArrow = $('<div class=vis-cv-rd-down><i class=\"vis vis-arrow-down\"></i></div>');\n    var divbody = $('<div class=vis-cv-rd-body>');\n    root.append(divTopArrow).append(divbody).append(divDownArrow);\n    this.addItem = function (name) {\n      var $spn = $('<span class=\"vis-cv-rd-body-item\">');\n      $spn.text(name);\n      divbody.append($spn);\n      if (divbody[0].clientHeight < divbody[0].scrollHeight) {\n        divDownArrow.css('opacity', '1');\n      }\n    };\n    this.reset = function () {\n      divbody.empty();\n      divTopArrow.css('opacity', '.5');\n      divDownArrow.css('opacity', '.5');\n    };\n    this.dispose = function () {\n      divbody.empty();\n      //clear events\n      divTopArrow.off();\n      divDownArrow.off();\n    };\n    function clkHandler(btn) {\n      if (divbody[0].clientHeight + divbody[0].scrollTop >= divbody[0].scrollHeight) {\n        divDownArrow.css('opacity', '.6');\n        // return;\n      } else {\n        divDownArrow.css('opacity', '1');\n      }\n      if (divbody[0].scrollTop == 0) {\n        divTopArrow.css('opacity', '.6');\n        //return;\n      } else {\n        divTopArrow.css('opacity', '1');\n      }\n      //else if (divbody.scrollTop >= divbody.height()) {\n      //    divDownArrow.css('opacity', '.6');\n      //    return;\n      //}\n      //if (btn.css('opacity') < 1)\n      //    return;\n\n      if (btn == 'up') {\n        if (divTopArrow.css('opacity') < 1) return;\n        divbody[0].scrollTop -= 60;\n      } else {\n        if (divDownArrow.css('opacity') < 1) return;\n        divbody[0].scrollTop += 60;\n      }\n    }\n    ;\n    divTopArrow.on('click', function () {\n      clkHandler('up');\n    });\n    divDownArrow.on('click', function () {\n      clkHandler('down');\n    });\n  }\n\n  /**\r\n       *\tCard view Container\r\n       * \r\n       */\n\n  function VCardView() {\n    this.cGroupInfo = {}; //group control\n    this.cCols = []; //Include Column\n    this.cConditions = []; //Conditions\n    this.cGroup = null; //Group Column\n    this.mTab;\n    this.AD_Window_ID;\n    this.AD_Tab_ID;\n    this.groupCtrls = [];\n    this.fields = []; // card view fields\n    this.grpCount = 0;\n    this.oldGrpCount = 0;\n    this.grpColName = '';\n    this.hasIncludedCols = false;\n    this.GroupSequence = null;\n    this.ExcludedGroup = null;\n    // this.aPanel;\n    this.onCardEdit = null;\n    this.cardViewData = null;\n    var root;\n    var body = null;\n    var headerdiv;\n    var $cmbCards = null;\n    var $lblGroup = null;\n    var $btnClrSearch = null;\n    var $imgdownSearch = null;\n    var self = this;\n    var groupHeader = null;\n    this.isAutoCompleteOpen = false;\n    var bsyDiv = null;\n    var rightDiv = null;\n    var leftDiv = null;\n    this.cardID = 0;\n    var records = null;\n    var $openDialog = null;\n    this.editID = 0;\n    this.VCardRightPanel = null;\n    //  var cardList;\n    function init() {\n      var width = $('body').width() - 65;\n      root = $(\"<div class='vis-cv-body vis-noselect'>\");\n      leftDiv = $(\"<div class='vis-cv-ld'>\");\n      rightDiv = $(\"<div class='vis-cv-rd'>\");\n      //bsyDiv = $('<div class=\"vis-busyindicatorouterwrap\"><div class=\"vis-busyindicatorinnerwrap\"><i class=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i></div></div>');\n      //root.append(bsyDiv);\n      //bsyDiv.css(\"display\", 'none');startCol\n      body = $(\"<div class='vis-cv-main' style='max-width:\" + width + \"px'>\");\n      headerdiv = $(\"<div class='vis-cv-header'>\");\n      $cmbCards = $('<input  class=\"vis-vs-card-autoComplete\" style=\"display:inline\">');\n      $lblGroup = $('<p>');\n      $imgdownSearch = $('<span class=\"vis-ad-w-p-tb-s-icon-down vis-cv-cardlist\"><i class=\"fa fa-ellipsis-h\"></i></span>');\n      groupHeader = $(\"<div class='vis-cv-groupHeader'style='overflow:hidden; max-width:\" + width + \"px'>\");\n      $openDialog = $('<a href=\"javascript:;\" class=\"vis-dailogOpen\">' + VIS.Msg.getMsg(\"editCardView\") + '</a>');\n      headerdiv.append($openDialog).append($cmbCards).append($imgdownSearch).append($lblGroup);\n      leftDiv.append(headerdiv).append(groupHeader).append(body);\n      root.append(leftDiv).append(rightDiv);\n      body.scroll(function () {\n        SyncScroll();\n      });\n      createCardautoComplete();\n      $openDialog.click(function () {\n        self.aPanel.cmd_cardDialog();\n      });\n    }\n\n    /**\r\n     * create autocomplete box to show list of cards\r\n     * */\n    function createCardautoComplete() {\n      $cmbCards.autocomplete({\n        select: function (ev, ui) {\n          cardChanged(ui.item.id, ui.item.label);\n          var currentTarget = $(ev.currentTarget);\n          currentTarget.find('.vis-cv-card-selected-card').removeClass('vis-cv-card-selected-card');\n          currentTarget.find('[data-checkid=\"' + ui.item.id + '\"]').addClass('vis-cv-card-selected-card');\n          ev.stopPropagation();\n        },\n        minLength: 0,\n        open: function (ev, ui) {\n          self.isAutoCompleteOpen = true;\n        },\n        close: function (event, ui) {\n          //$imgdownSearch.css(\"transform\", \"rotate(360deg)\");\n          window.setTimeout(function () {\n            self.isAutoCompleteOpen = false;\n          }, 600);\n        },\n        source: []\n      });\n\n      /*\r\n       * Handled render event to show make default icon in menu\r\n       */\n      $cmbCards.autocomplete().data('ui-autocomplete')._renderItem = function (ul, item) {\n        var span = null;\n        var tickSpan = null;\n        if (item.isDefault == 'Y') {\n          span = $(\"<span title='\" + VIS.Msg.getMsg(\"DefaultCard\") + \"'  data-id='\" + item.id + \"' class='VIS-winSearch-defaultIcon'></span>\");\n        } else {\n          span = $(\"<span title='\" + VIS.Msg.getMsg(\"MakeDefaultCard\") + \"' data-id='\" + item.id + \"' class='VIS-winSearch-NonDefaultIcon'></span>\");\n        }\n        tickSpan = $(\"<span class='fa fa-check-circle vis-cv-card-selected-card-listitem'></span>\");\n        var li = null;\n        if (self.AD_CardView_ID == item.id) {\n          li = $(\"<li style='white-space:normal !important; max-width:210px !important'>\").append($(\"<a  data-checkid='\" + item.id + \"'  class='vis-cv-card-selected-card' style='display:block' title='\" + item.title + \"'></a>\").append(tickSpan).append(\"<p>\" + item.label + \"</p>\").append(span)).prependTo(ul);\n        } else {\n          li = $(\"<li style='white-space:normal !important; max-width:210px !important'>\").append($(\"<a  data-checkid='\" + item.id + \"'  style='display:block' title='\" + item.title + \"'></a>\").append(tickSpan).append(\"<p>\" + item.label + \"</p>\").append(span)).prependTo(ul);\n        }\n        if (item.Created != VIS.context.getAD_User_ID()) {\n          li.find('p').text(item.label + \" (S)\");\n        }\n        // When user clicks on make default icon, then save details in DB.\n        span.on(\"click\", function (e) {\n          var cardID = $(this).data('id');\n          $.ajax({\n            url: VIS.Application.contextUrl + \"JsonData/InsertUpdateDefaultCard\",\n            dataType: \"json\",\n            data: {\n              AD_Tab_ID: self.mTab.getAD_Tab_ID(),\n              AD_Card_ID: cardID\n            },\n            success: function (data) {},\n            error: function (er) {\n              console.log(er);\n            }\n          });\n        });\n        return li;\n      };\n    }\n    ;\n    function SyncScroll() {\n      groupHeader.scrollLeft(body.scrollLeft());\n    }\n    this.SyncScroll = function () {\n      SyncScroll();\n    };\n    init();\n\n    //set right pnae div for excluded group\n    this.VCardRightPanel = new VCardPanel(rightDiv);\n    //eventHandle();\n\n    this.getRoot = function () {\n      return root;\n    };\n    this.getRightDiv = function () {\n      return rightDiv;\n    };\n    this.getBody = function () {\n      return body;\n    };\n    this.setHeader = function (txt) {\n      $lblGroup.text(txt);\n    };\n    this.getHeader = function () {\n      return headerdiv;\n    };\n    this.getGroupHeader = function () {\n      return groupHeader;\n    };\n    this.sizeChanged = function (h, w) {\n      root.height(h - 12 + 'px');\n      rightDiv.height(h - 12 + 'px');\n      this.calculateWidth(w);\n    };\n    this.setBusy = function (isBusy) {\n      this.aPanel.setBusy(false);\n      // bsyDiv.css(\"display\", isBusy ? 'block' : 'none');\n    };\n    this.calculateWidth = function (width) {\n      //set width\n      //width = (width - 6);\n      //var grpCtrlC = this.groupCtrls.length;\n      //if (grpCtrlC < 1)\n      //    return;\n      //if (width) {\n\n      //    var tGrpW = 300 * grpCtrlC;\n      //    if (tGrpW > width) {\n      //        body.width(300 * grpCtrlC);\n      //    }\n      //    else {\n      //        body.width(width);\n      //        var newW = Math.ceil(width / grpCtrlC) - 24;\n      //        while (grpCtrlC > 0) {\n      //            --grpCtrlC;\n\n      //            this.groupCtrls[grpCtrlC].setWidth(newW);\n      //        }\n      //    }\n      //}\n      //else\n      //    body.width(body.parent().width() * (grpCtrlC));\n      this.navigate();\n    };\n    body.on('mousedown touchstart', 'div.vis-cv-card', function (e) {\n      if (self.onCardEdit) {\n        var d = $(e.target);\n        var s;\n        if (d[0].nodeName == 'SPAN' && d.hasClass('vis-cv-card-edit')) {\n          s = d.data('recid');\n          if (s || s === 0) {\n            self.editID = s;\n            self.onCardEdit({\n              'recid': s\n            });\n          }\n        } else {\n          var i = 0;\n          while (!d.hasClass('vis-cv-card')) {\n            if (i > 5) break;\n            d = d.parent();\n            i++;\n          }\n          s = d.data('recid');\n          if (s || s === 0) {\n            self.onCardEdit({\n              'recid': s\n            }, true);\n            self.navigate(s, false, true);\n          }\n        }\n      }\n      e.stopPropagation();\n    });\n    this.getAD_CardView_ID = function () {\n      return this.AD_CardView_ID;\n    };\n    this.getField_Group_ID = function () {\n      if (this.cGroup) return this.cGroup.getAD_Field_ID();\n      return 0;\n    };\n    this.getCardCmb = function () {\n      return $cmbCards;\n    };\n    var handleEvents = function () {\n      $cmbCards.one(\"focus\", loadCards);\n      $cmbCards.on(\"change\", cardChanged);\n      $imgdownSearch.on(\"click\", function () {\n        //if (!self.isAutoCompleteOpen) {\n\n        loadCards();\n        //}\n        // else {\n        //$imgdownSearch.css(\"transform\", \"rotate(360deg)\");\n        // }\n      });\n    };\n\n    /**\r\n     * Load list of cards for current tab and current user\r\n     * */\n    var loadCards = function () {\n      var res = VIS.dataContext.getJSONData(VIS.Application.contextUrl + \"JsonData/GetCardsInfo\", {\n        AD_Tab_ID: self.mTab.getAD_Tab_ID()\n      });\n      if (res) {\n        self.fillCardViewList(res, true);\n      }\n    };\n\n    /**\r\n     * When user change caard from drowdown, then fetch details of card and show card\r\n     * @param {any} cardID\r\n     * @param {any} cardName\r\n     */\n    var cardChanged = function (cardID, cardName) {\n      self.getCardViewData(self.mTab, cardID, cardName);\n    };\n    var curCard = null;\n    var crid = null;\n    this.navigate = function (rid, oset, skipScroll) {\n      if (rid) crid = rid;\n      if (oset) return;\n      if (curCard && curCard.length > 0) curCard.toggleClass(\"vis-cv-card-selected\"); //.find('span.vis-cv-card-selected').css({ 'display': 'none' });\n\n      curCard = body.find('div.vis-cv-card[name~=vc_' + crid + ']');\n      if (curCard.length != 0) {\n        //curCard.find('span.vis-cv-card-selected').css({ 'display': 'block' });\n        curCard.toggleClass(\"vis-cv-card-selected\");\n        if (!skipScroll) curCard[0].scrollIntoView();\n      }\n    };\n    this.dC = function () {\n      body.off('click');\n      this.onCardEdit = null;\n      self = null;\n      root.remove();\n      body.remove();\n      headerdiv.remove();\n      $cmbCards.remove();\n      $cmbCards = null;\n      $imgdownSearch.remove();\n      $imgdownSearch = null;\n      root = body = headerdiv = null;\n      this.getRoot = this.getBody = this.setHeader = this.getHeader = this.dC = null;\n      curCard = null;\n      this.cGroupInfo = {}; //group control\n      this.cCols.length = 0;\n      this.cConditions.length = 0;\n      this.cGroup = null; //Group Column\n      this.mTab = null;\n      this.fields.length = 0;\n      this.grpCount = null;\n      while (this.groupCtrls.length > 0) {\n        this.groupCtrls.pop().dispose();\n      }\n      if (this.VCardRightPanel) this.VCardRightPanel.dispose();\n      this.VCardRightPanel = null;\n    };\n\n    /**\r\n     * Display cards in auto complete dropdown\r\n     * @param {any} cards\r\n     */\n    this.fillCardViewList = function (cards, showData) {\n      $cmbCards.empty();\n      var userQueries = [];\n      //$imgdownSearch.css('visibility', 'visible');\n      if (cards && cards.length > 0) {\n        //headerdiv.show();\n        for (var i = cards.length - 1; i >= 0; i--) {\n          cards[i].Name = VIS.Utility.decodeText(cards[i].Name);\n          // $cmbCards.append('<option value=\"' + cards[i].AD_CardView_ID + '\">' + cards[i].Name + '</option>');\n          if (cards[i].IsDefault) {\n            userQueries.push({\n              'title': cards[i].Name,\n              'label': cards[i].Name,\n              'value': cards[i].Name,\n              'id': cards[i].AD_CardView_ID,\n              'isDefault': 'Y',\n              'Created': cards[i].Created\n            });\n          } else {\n            userQueries.push({\n              'title': cards[i].Name,\n              'label': cards[i].Name,\n              'value': cards[i].Name,\n              'id': cards[i].AD_CardView_ID,\n              'isDefault': 'N',\n              'Created': cards[i].Created\n            });\n          }\n        }\n        $cmbCards.autocomplete('option', 'source', userQueries, \"position\", {\n          my: \"left top\",\n          at: \"left bottom\"\n        });\n        //$imgdownSearch.css(\"transform\", \"rotate(180deg)\");\n        if (showData) {\n          //window.setTimeout(function () {\n\n          //$cmbCards.trigger(\"focus\");\n          $cmbCards.autocomplete(\"search\", \"\");\n          //}, 400);\n        }\n        if (this.AD_CardView_ID) {\n          $cmbCards.val(this.cardName);\n        }\n      } else {\n        //headerdiv.hide();\n      }\n    };\n    handleEvents();\n  }\n  ;\n  VCardView.prototype.tableModelChanged = function (action, args, actionIndexOrId) {\n    // this.blockSelect = true;\n    var id = null;\n    if (action === VIS.VTable.prototype.ROW_REFRESH) {\n      if (args.recid) id = args.recid;else id = args;\n    } else {\n      if (action === VIS.VTable.prototype.ROW_UNDO) {\n        //this.grid.unselect(args);\n        this.getBody().find('div.vis-cv-card[name~=vc_' + args + ']').remove();\n      } else if (action === VIS.VTable.prototype.ROW_DELETE) {\n        var argsL = args.slice();\n        while (argsL.length > 0) {\n          var recid = argsL.pop();\n          this.getBody().find('div.vis-cv-card[name~=vc_' + recid + ']').remove();\n        }\n        if (isNaN(actionIndexOrId))\n          //recid array In this case\n          {\n            id = actionIndexOrId[0];\n          } else {\n          //if (this.grid.records.length > 0)\n          //   id = this.grid.records[(this.grid.records.length - 1) < actionIndexOrId ? (this.grid.records.length - 1) : actionIndexOrId].recid;\n        }\n      } else if (action === VIS.VTable.prototype.ROW_ADD) {\n        id = args.recid; // ro\n      }\n    }\n    if (id) {\n      if (args) {\n        this.replaceCard(args, id);\n      }\n      this.navigate(id, null, null);\n    }\n  };\n  /**\r\n   * Replace card after drag drop for apply new condition\r\n   * @param {any} rec\r\n   * @param {any} id\r\n   */\n  VCardView.prototype.replaceCard = function (rec, id) {\n    rec.recid = id;\n    var changeCard = new VCard(this.fields, rec, this.headerItems, this.headerStyle, this.headerPadding, this.mTab.getWindowNo(), {}, this.aPanel);\n    if (this.grpCount == 1) {\n      changeCard.getRoot().width(\"240px\").css({\n        'margin': '5px 12px 12px 5px',\n        'float': VIS.Application.isRTL ? 'right' : 'left'\n      });\n    }\n    //if ($('head:contains(\"' + changeCard.headerCustom + ' {\")').length == 0) {\n    changeCard.addStyleToDom();\n    //}\n\n    this.getRoot().find(\"[name='vc_\" + id + \"']\").replaceWith(changeCard.getRoot());\n    changeCard.evaluate(this.cConditions);\n  };\n\n  /**\r\n   * Set up card view fill cards list, set default card ID\r\n   * @param {any} aPanel\r\n   * @param {any} mTab\r\n   * @param {any} cContainer\r\n   * @param {any} vCardId\r\n   */\n  VCardView.prototype.setupCardView = function (aPanel, mTab, cContainer, vCardId) {\n    this.mTab = mTab;\n    this.aPanel = aPanel;\n    if (mTab.vo && mTab.vo.DefaultCardID) {\n      this.cardID = mTab.vo.DefaultCardID;\n    } else {\n      this.setCardViewData();\n      //this.refreshUI(this.getBody().width());\n    }\n    cContainer.append(this.getRoot());\n  };\n\n  /**\r\n   * When user change card from drowdown, then fetch details of card and show card\r\n   * @param {any} mTab\r\n   * @param {any} cardID\r\n   * @param {any} cardName\r\n   */\n  VCardView.prototype.getCardViewData = function (mTab, cardID, cardName) {\n    this.cardID = cardID;\n    this.mTab.getTableModel().setCardID(cardID);\n    this.aPanel.curGC.query(this.mTab.getOnlyCurrentDays(), 0, false);\n    this.getCardCmb().val(cardName);\n  };\n  /**\r\n   * Rest card on view change\r\n   * */\n  VCardView.prototype.resetCard = function () {\n    while (this.groupCtrls.length > 0) {\n      this.groupCtrls.pop().dispose();\n    }\n    this.VCardRightPanel.reset();\n    this.getGroupHeader().empty();\n    this.groupCtrls.length = 0;\n    this.editID = 0;\n  };\n\n  /**\r\n   * Create Card's Schema, like fields included, groupby etc.\r\n   * @param {any} retData\r\n   */\n  VCardView.prototype.setCardViewData = function (retData) {\n    this.hasIncludedCols = false;\n    this.fields = [];\n    this.cGroup = null;\n    this.cConditions = [];\n    this.GroupCount = {};\n    this.headerItems = {};\n    if (retData) {\n      // this.getHeader().show();\n      this.AD_CardView_ID = retData.AD_CardView_ID;\n      //$cmbCards.autocomplete('option', 'source', userQueries);\n      //$cmbCards.autocomplete(\"search\", \"\");\n      //$cmbCards.trigger(\"focus\");\n      this.cardName = retData.Name;\n      this.GroupSequence = retData.GroupSequence;\n      this.ExcludedGroup = retData.ExcludedGroup;\n      for (var i = 0; i < retData.GroupCount.length; i++) {\n        this.GroupCount[retData.GroupCount[i].Group] = retData.GroupCount[i].Count;\n      }\n      this.getCardCmb().val(retData.Name);\n      var f = this.mTab.getFieldById(retData.FieldGroupID);\n      if (f) {\n        this.cGroup = f;\n      }\n      // self.cCols = retData.IncludedCols;\n      this.cConditions = retData.Conditions;\n      this.headerItems = retData.HeaderItems;\n      this.headerStyle = retData.Style;\n      this.headerPadding = retData.Padding;\n      for (var i = 0; i < retData.IncludedCols.length; i++) {\n        var f = this.mTab.getFieldById(retData.IncludedCols[i].AD_Field_ID);\n\n        //f.setCardIconHide(retData.IncludedCols[i].HideIcon);\n        //f.setCardTextHide(retData.IncludedCols[i].HideText);\n        if (f) {\n          f.setCardViewSeqNo(retData.IncludedCols[i].SeqNo);\n          f.setCardFieldStyle(retData.IncludedCols[i].HTMLStyle);\n          this.fields.push(f);\n          //if (!retData.headerItems || retdata.headerItems.length == 0) {\n          //    f.setCardIconHide(retData.IncludedCols[i].HideIcon);\n          //    f.setCardTextHide(retData.IncludedCols[i].HideText);\n          //}\n          this.hasIncludedCols = true;\n        }\n      }\n    }\n    if (this.fields.length < 1) {\n      if (this.fields.length < 1) {\n        f = this.mTab.getField('Name');\n        if (f) {\n          this.fields.push(f);\n        }\n        var f = this.mTab.getField('Description');\n        if (f) {\n          this.fields.push(f);\n        }\n        var f = this.mTab.getField('Help');\n        if (f) {\n          this.fields.push(f);\n        }\n      }\n    }\n    for (var p in this.cGroupInfo) {\n      this.cGroupInfo[p].records.length = 0;\n    }\n    this.cGroupInfo = {};\n    this.grpCount = 0;\n    this.isProcessed = false;\n  };\n\n  /**\r\n   * Get Group's details\r\n   * */\n  VCardView.prototype.createGroups = function () {\n    //1 get Grup field\n    // var groupName = [];\n    //  var groupValue = [];\n\n    if (this.isProcessed) {\n      for (var p in this.cGroupInfo) {\n        this.cGroupInfo[p].records = [];\n      }\n      return;\n    }\n    if (this.cGroup) {\n      this.cGroupInfo = [];\n      this.grpCount = 0;\n      var field = this.cGroup;\n      if (field) {\n        if (field.getDisplayType() == VIS.DisplayType.YesNo) {\n          this.cGroupInfo['true'] = {\n            'name': 'Yes',\n            'records': [],\n            'key': true\n          };\n          this.cGroupInfo['false'] = {\n            'name': 'No',\n            'records': [],\n            'key': false\n          };\n          this.GroupCount['true'] = this.GroupCount['Y'];\n          this.GroupCount['false'] = this.GroupCount['N'];\n          this.grpCount = 2;\n        } else if (VIS.DisplayType.IsLookup(field.getDisplayType()) && field.getLookup()) {\n          //TODO: check validated also\n\n          //getlookup\n          var lookup = field.getLookup();\n          lookup.fillCombobox(true, true, true, false);\n          var data = lookup.data;\n          for (var i = 0; i < data.length; i++) {\n            this.cGroupInfo[data[i].Key] = {\n              'name': data[i].Name,\n              'records': [],\n              'key': data[i].Key\n            };\n            this.grpCount += 1;\n          }\n        }\n        this.setHeader(field.getHeader());\n      } else {\n        this.setHeader(' ');\n      }\n    } else {\n      this.setHeader(' ');\n    }\n    if (this.grpCount < 1 || $.isEmptyObject(this.cGroupInfo)) {\n      //add one group by de\n      this.cGroupInfo['All'] = {\n        'name': VIS.Msg.getMsg('All'),\n        'records': [],\n        'key': null\n      };\n      this.grpCount = 1;\n    }\n    this.isProcessed = true;\n  };\n\n  /**\r\n   * Create cards and groups\r\n   * @param {any} width\r\n   */\n  VCardView.prototype.refreshUI = function (width) {\n    //if (!this.cardViewData && this.cardID>0) {\n    //    this.getCardViewData(this.mTab, this.cardID, \"\", true);\n    //} else {            \n    //    this.refresh(width);\n    //}\n\n    var temp = this.mTab.getTableModel().getCardTemplate();\n\n    //Reset Variables\n    //this.aPanel.setBusy(true);\n    this.setCardViewData(temp);\n    this.refresh(width);\n    //this.getBody().empty();\n  };\n  VCardView.prototype.refresh = function (width) {\n    var $this = this;\n    window.setTimeout(function () {\n      if (width == 0) {\n        width = $this.getBody().width();\n      }\n      $this.isProcessed = false;\n      $this.createGroups();\n      records = $this.mTab.getTableModel().mSortList;\n      var root = $this.getBody();\n\n      //while ($this.groupCtrls.length > 0) {\n      //    $this.groupCtrls.pop().dispose();\n      //}\n\n      $this.resetCard();\n\n      //root.not('.vis-busyindicatorouterwrap').empty();\n      // $this.getGroupHeader().html('');\n      var cardGroup = null;\n      if ($this.grpCount == 1) {\n        var n = '';\n        var key = null;\n        for (var p in $this.cGroupInfo) {\n          n = VIS.Utility.Util.getIdentifierDisplayVal($this.cGroupInfo[p].name);\n          key = $this.cGroupInfo[p].key;\n          $this.getGroupHeader().append(\"<div class='vis-cv-head' >\" + n + \"</div>\");\n          break;\n        }\n        cardGroup = new VCardGroup(true, records, n, $this.fields, $this.cConditions, $this.headerItems, $this.headerStyle, $this.headerPadding, key, $this.aPanel);\n        $this.groupCtrls.push(cardGroup);\n        root.append(cardGroup.getRoot());\n        $this.getGroupHeader().find('.vis-cv-head').width(root.find('.vis-cv-grpbody').width() - 10);\n        $this.getRightDiv().css('display', 'none');\n      } else {\n        $this.filterRecord(records);\n        for (var p in $this.cGroupInfo) {\n          setCardGroup(p);\n          var gc = $this.cGroupInfo[p].key;\n          if ($this.GroupCount[gc]) {\n            gc = $this.GroupCount[gc];\n          } else {\n            gc = 0;\n          }\n          var grp = $(\"<div data-key='\" + $this.cGroupInfo[p].key + \"' class='vis-cv-cg-grp'></div>\");\n          grp.append(\"<div class='vis-cv-head' title='\" + VIS.Utility.Util.getIdentifierDisplayVal($this.cGroupInfo[p].name) + \" (\" + gc + \")' >\" + VIS.Utility.Util.getIdentifierDisplayVal($this.cGroupInfo[p].name) + \"<span> (\" + gc + \")</span></div>\");\n          $this.getGroupHeader().append(grp);\n        }\n        if ($this.cGroup.lookup && ($this.cGroup.lookup.displayType == VIS.DisplayType.List || $this.cGroup.lookup.displayType == VIS.DisplayType.TableDir || $this.cGroup.lookup.displayType == VIS.DisplayType.Table || $this.cGroup.lookup.displayType == VIS.DisplayType.Search) && $this.GroupSequence != null && $this.GroupSequence != \"\") {\n          var grpArr = $this.GroupSequence.split(\",\");\n          for (var j = 0; j < grpArr.length; j++) {\n            var item = root.find(\".vis-cv-grpbody[data-key='\" + grpArr[j] + \"']\").parent();\n            var itemG = $this.getGroupHeader().find(\".vis-cv-cg-grp[data-key='\" + grpArr[j] + \"']\");\n            var before = root.find(\".vis-cv-cg\").eq(j);\n            item.insertBefore(before);\n            itemG.insertBefore($this.getGroupHeader().find(\".vis-cv-cg-grp\").eq(j));\n          }\n        }\n        if ($this.editID == 0) {\n          $this.onCardEdit({\n            'recid': root.find(\".vis-cv-card:first\").attr('data-recid')\n          }, true);\n        }\n        $this.editID = 0;\n        emptyCardSetup();\n      }\n      function setCardGroup(p) {\n        cardGroup = new VCardGroup($this.grpCount === 1, $this.cGroupInfo[p].records, VIS.Utility.Util.getIdentifierDisplayVal($this.cGroupInfo[p].name), $this.fields, $this.cConditions, $this.headerItems, $this.headerStyle, $this.headerPaddings, $this.cGroupInfo[p].key, $this.aPanel);\n        $this.groupCtrls.push(cardGroup);\n        root.append(cardGroup.getRoot());\n        var sortable = new vaSortable(cardGroup.getBody()[0], {\n          attr: 'data-recid',\n          selfSort: true,\n          force: false,\n          mainNode: '.vis-cv-main',\n          ignore: ['.vis-cv-card-edit', '.vis-ev-col-wrap-button', '.cardEmpty'],\n          onclick: function (e, item) {\n            var recID = $(item).attr(\"data-recid\");\n            $this.onCardEdit({\n              'recid': recID\n            }, true);\n            var m_field = $this.mTab.getFieldById($this.getField_Group_ID());\n            if (m_field.getIsReadOnly() || m_field.getCallout() != '' || !m_field.getIsEditable(true, true)) {\n              vaSortable.prototype.setStopDrag(true);\n              $(item).css(\"cursor\", \"not-allowed\");\n            } else {\n              $(item).css(\"cursor\", \"default\");\n              vaSortable.prototype.setStopDrag(false);\n            }\n          },\n          onSelect: function (e, item, fromItem) {\n            var toKey = $(e).parent().attr('data-key');\n            if (toKey == $(fromItem).attr('data-key')) {\n              return;\n            }\n            var obj = {\n              grpValue: toKey == 'null' ? null : toKey,\n              recordID: $this.mTab.getRecord_ID(),\n              columnName: $this.cGroup.getColumnName(),\n              tableName: $this.mTab.getTableName(),\n              dataType: $this.cGroup.getDisplayType()\n            };\n            $.ajax({\n              type: \"POST\",\n              url: VIS.Application.contextUrl + \"CardView/UpdateCardByDragDrop\",\n              dataType: \"json\",\n              data: obj,\n              beforeSend: function () {\n                $this.setBusy(true);\n              },\n              success: function (data) {\n                if (data != \"1\") {\n                  VIS.ADialog.error(data, true, \"\");\n                  vaSortable.prototype.revertItem();\n                } else {\n                  var fromkey = $(fromItem).attr('data-key');\n                  if (!$this.GroupCount[toKey]) {\n                    $this.GroupCount[toKey] = 0;\n                  }\n                  $this.GroupCount[toKey] = $this.GroupCount[toKey] + 1;\n                  $this.GroupCount[fromkey] = $this.GroupCount[fromkey] - 1;\n                  $this.getGroupHeader().find(\".vis-cv-cg-grp[data-key='\" + fromkey + \"']\").find('span').text(' (' + $this.GroupCount[fromkey] + ')');\n                  $this.getGroupHeader().find(\".vis-cv-cg-grp[data-key='\" + toKey + \"']\").removeClass('emptyGroup').find('span').text(' (' + $this.GroupCount[toKey] + ')');\n                  $this.getBody().find('.cardEmpty').closest('.emptyGroup').removeClass('emptyGroup');\n                  $this.getGroupHeader().find(\".vis-cv-cg-grp[data-key='\" + fromkey + \"'] .vis-cv-head\").attr(\"title\", $this.getGroupHeader().find(\".vis-cv-cg-grp[data-key='\" + fromkey + \"']\").text());\n                  $this.getGroupHeader().find(\".vis-cv-cg-grp[data-key='\" + toKey + \"'] .vis-cv-head\").attr(\"title\", $this.getGroupHeader().find(\".vis-cv-cg-grp[data-key='\" + toKey + \"']\").text());\n                  emptyCardSetup();\n                  $this.mTab.dataRefresh();\n                }\n              },\n              error: function (err) {\n                VIS.ADialog.error(err.responseText, true, \"\");\n                vaSortable.prototype.revertItem();\n                $this.setBusy(false);\n              },\n              complete: function () {\n                $this.setBusy(false);\n              }\n            });\n          }\n        });\n      }\n      function emptyCardSetup() {\n        $this.VCardRightPanel.reset();\n        $this.getRoot().removeClass('emptyGroup').removeAttr('style');\n        root.find('.cardEmpty').remove();\n        var excludeGrp = $this.ExcludedGroup;\n        excludeGrp = excludeGrp.split(',');\n        var hasItems = false;\n        root.find('.vis-cv-grpbody').each(function (i, e) {\n          var evnt = $(e);\n          evnt.parent().removeAttr('style');\n          if (evnt.is(':empty')) {\n            evnt.append(\"<div class='va-dragdrop cardEmpty' style='height:\" + root.height() + \"px'>\").parent().addClass('emptyGroup');\n            $this.getGroupHeader().find('.vis-cv-cg-grp').eq(i).addClass('emptyGroup').removeAttr('style');\n          } else {\n            $this.getGroupHeader().find('.vis-cv-cg-grp').eq(i).css(\"min-width\", evnt.parent().width());\n            evnt.parent().css('min-width', evnt.parent().width());\n          }\n          if (excludeGrp.indexOf(evnt.attr('data-key')) != -1) {\n            //show item info in right panel\n            evnt.parent().hide();\n            var grpHeader = $this.getGroupHeader().find(\".vis-cv-cg-grp[data-key='\" + evnt.attr('data-key') + \"']\");\n            $this.VCardRightPanel.addItem(grpHeader.find('.vis-cv-head').text());\n            hasItems = true;\n            grpHeader.hide();\n          }\n        });\n        $this.getRightDiv().height($this.getRoot().height());\n        root.find('.vis-cv-grpbody').height(maxHeight(root.find('.vis-cv-grpbody')));\n        if (hasItems) $this.getRightDiv().css('display', 'flex');else $this.getRightDiv().css('display', 'none');\n      }\n      function maxHeight(elems) {\n        return Math.max.apply(null, elems.map(function () {\n          return $(this)[0].scrollHeight;\n        }).get());\n      }\n      $this.calculateWidth(width);\n      $this.SyncScroll();\n      $this.aPanel.setBusy(false);\n    }, 10);\n  };\n  VCardView.prototype.filterRecord = function (records) {\n    if (!records) return;\n    var len = records.length;\n    var grpCol = this.cGroup.getColumnName().toLowerCase();\n    var record = null;\n    var colValue = null;\n    var isgrouprChanged = false;\n    for (var i = 0; i < len; i++) {\n      record = records[i];\n      colValue = record[grpCol];\n      if (this.cGroupInfo[colValue]) {\n        this.cGroupInfo[colValue].records.push(record);\n        isgrouprChanged = true;\n      } else {\n        if (!this.cGroupInfo['Other__1']) {\n          this.cGroupInfo['Other__1'] = {\n            'name': VIS.Msg.getMsg(\"No\") + ' ' + this.cGroup.getHeader(),\n            'records': [],\n            'key': null\n          };\n          this.grpCount += 1;\n          isgrouprChanged = true;\n          isgrouprChanged = true;\n        }\n        this.cGroupInfo['Other__1'].records.push(record);\n      }\n    }\n\n    //var eCols = [];\n    //for (var p in this.cGroupInfo) {\n    //    if (this.cGroupInfo[p].records.length < 1) {\n    //        eCols.push(p);               \n    //    }\n    //}\n    //this.grpCount -= eCols.length;\n\n    //while (eCols.length > 0) {\n    //    delete this.cGroupInfo[eCols.pop()];\n\n    //}\n\n    if (this.oldGrpCount != this.grpCount || isgrouprChanged) this.isProcessed = false;\n    this.oldGrpCount = this.grpCount;\n  };\n  VCardView.prototype.dispose = function () {\n    this.dC();\n  };\n\n  /* Group Control */\n  function VCardGroup(onlyOne, records, grpName, fields, conditions, headerItems, headerStyle, headerPadding, key, aPanel) {\n    //conditions = [{ 'bgColor': '#80ff80', 'cValue': '@AD_User_ID@=1005324 & @C_DocTypeTarget_ID@=132' }];\n    var root = null;\n    var body;\n    var cards = [];\n    windowNo = aPanel.curTab.getWindowNo(); //  VIS.Env.getWindowNo();\n    function init() {\n      var str = \"<div class='vis-cv-cg vis-pull-left'>\" + \"<div data-key='\" + key + \"'  class='vis-cv-grpbody'></div></div></div>\";\n      root = $(str);\n      body = root.find('.vis-cv-grpbody');\n      if (onlyOne) {\n        root.css({\n          'margin-right': '0px',\n          'width': '100%'\n        });\n        //root.width('100%');\n      }\n    }\n    ;\n    init();\n    function createCards() {\n      var card = null;\n      this.fieldStyles = {};\n      if (!records) return;\n      for (var i = 0; i < records.length; i++) {\n        card = new VCard(fields, records[i], headerItems, headerStyle, headerPadding, windowNo, this.fieldStyles, aPanel);\n        if (onlyOne) {\n          card.getRoot().width(\"240px\").css({\n            'margin': '5px 12px 12px 5px',\n            'float': VIS.Application.isRTL ? 'right' : 'left'\n          });\n        }\n        if (i == 0) {\n          card.addStyleToDom();\n        }\n        cards.push(card);\n        body.append(card.getRoot());\n        card.evaluate(conditions);\n      }\n    }\n    ;\n    this.getRoot = function () {\n      return root;\n    };\n    this.getBody = function () {\n      return body;\n    };\n    this.setWidth = function (w) {\n      root.width(w);\n    };\n    createCards();\n    this.dC = function () {\n      while (cards.length > 0) {\n        cards.pop().dispose();\n      }\n      root.remove();\n      root = null;\n      body = null;\n      this.getBody = null;\n      this.getRoot = null;\n    };\n  }\n  ;\n  VCardGroup.prototype.dispose = function () {\n    this.dC();\n    vaSortable.prototype.dispose();\n  };\n\n  /* Card View Control */\n  function VCard(fields, record, headerItems, headerStyle, headerPadding, windowNo, fieldStyles, aPanel) {\n    this.record = record;\n    this.aPanel = aPanel;\n    this.rIndex = record.recid;\n    this.dynamicStyle = [];\n    this.textAlignEnum = {\n      \"C\": \"Center\",\n      \"R\": \"flex-end\",\n      \"L\": \"flex-start\"\n    };\n    this.alignItemEnum = {\n      \"C\": \"Center\",\n      \"T\": \"flex-start\",\n      \"B\": \"flex-end\"\n    };\n    this.dynamicStyle = [];\n    this.styleTag = document.createElement('style');\n    this.windowNo = windowNo;\n    this.tabID = aPanel.curTab.getAD_Tab_ID();\n    this.fieldStyles = fieldStyles;\n    this.tabID = aPanel.curTab.getAD_Tab_ID();\n    var root = $('<div class=\"vis-cv-card va-dragdrop\" data-recid=' + record.recid + ' name = vc_' + record.recid + ' ></div>');\n\n    //root.append($(\"<i class='pin'></i>\"));\n    // root.append($('<span class=\"glyphicon glyphicon-hand-down vis-cv-card-selected\"></span>'));\n    var pencil = $('<span class=\"glyphicon glyphicon-pencil vis-cv-card-edit vis-pull-right\" data-recid=' + record.recid + '></span>');\n    root.append(pencil);\n    var field = null;\n    var dt;\n    //createview\n\n    var $root = $('<div class=\"vis-ad-w-p-card_root_common\">');\n    root.append($root);\n    if (!this.fieldStyles[\"vis-ad-w-p-card-Custom_\" + windowNo]) this.fieldStyles[\"vis-ad-w-p-card-Custom_\" + windowNo] = {};\n    this.headerCustom = this.fieldStyles[\"vis-ad-w-p-card-Custom_\" + windowNo][\"headerParentCustomUISettings\"];\n    if (!this.headerCustom) {\n      this.headerCustom = this.headerParentCustomUISettings(headerStyle);\n      this.fieldStyles[\"vis-ad-w-p-card-Custom_\" + windowNo][\"headerParentCustomUISettings\"] = this.headerCustom;\n    }\n    root.addClass(this.headerCustom);\n    if (!this.fieldStyles[\"root_\" + windowNo]) this.fieldStyles[\"root_\" + windowNo] = {};\n    this.rootCustomStyle = this.fieldStyles[\"root_\" + windowNo]['headerUISettings'];\n    if (!this.rootCustomStyle) {\n      this.rootCustomStyle = this.headerUISettings(\"\", headerPadding);\n      this.fieldStyles[\"root_\" + windowNo]['headerUISettings'] = this.rootCustomStyle;\n    }\n    $root.addClass(this.rootCustomStyle);\n    this.setHeaderItems = function (currentItem, $containerDiv, fields, record) {\n      /*If controls are already loaded, then do not manipulate DOM.Only fetch there reference from DOM and Change Values.\r\n       *Else create header panel items. \r\n       */\n      if (!currentItem) return;\n\n      //loop through header item\n      var headergFields = null;\n      for (var headerSeqNo in currentItem.HeaderItems) {\n        var headerItem = currentItem.HeaderItems[headerSeqNo];\n        var startCol = headerItem.StartColumn;\n        var colSpan = headerItem.ColumnSpan;\n        var startRow = headerItem.StartRow;\n        var rowSpan = headerItem.RowSpan;\n        var justyFy = headerItem.JustifyItems;\n        var alignItem = headerItem.AlignItems;\n        var fieldPadding = headerItem.Padding;\n        var backgroundColor = headerItem.BackgroundColor;\n        var hideFieldIcon = headerItem.HideFieldIcon;\n        var hideFieldText = headerItem.HideFieldText;\n        var fieldValueStyle = headerItem.FieldValueStyle;\n        var fieldLabelStyle = headerItem.FieldLabelStyle;\n        var fieldStyleLogic = headerItem.FieldStyleLogic;\n        if (fieldStyleLogic && fieldStyleLogic.toLower().indexOf(\"?\") > -1) {\n          fieldStyleLogic = this.evaluateStyleLogic(fieldStyleLogic);\n          if (fieldStyleLogic) {\n            fieldStyleLogic = \" \" + fieldStyleLogic + \" \";\n          } else {\n            fieldStyleLogic = '';\n          }\n        } else {\n          fieldStyleLogic = '';\n        }\n        if (!backgroundColor) {\n          backgroundColor = '';\n        }\n        var FontColor = headerItem.FontColor;\n        if (!FontColor) {\n          FontColor = '';\n        }\n        var fontSize = headerItem.FontSize;\n        if (!fontSize) {\n          fontSize = '';\n        }\n        var $div = null;\n        var $divIcon = null;\n        $divDBIconSpan = $('<span>');\n        $divDBLevel = $('<span>');\n        var $divLabel = null;\n        var $label = null;\n        var iControl = null;\n        var gridLayout_ID = currentItem.AD_GridLayout_ID;\n        if (!this.fieldStyles[this.tabID + '_' + startCol + '_' + colSpan + '_' + startRow + '_' + rowSpan + '_' + gridLayout_ID]) this.fieldStyles[this.tabID + '_' + startCol + '_' + colSpan + '_' + startRow + '_' + rowSpan + '_' + gridLayout_ID] = {};\n        //Apply HTML Style\n        this.dynamicClassName = this.fieldStyles[this.tabID + '_' + startCol + '_' + colSpan + '_' + startRow + '_' + rowSpan + '_' + gridLayout_ID]['applyCustomUISettings'];\n        if (!this.dynamicClassName) {\n          this.dynamicClassName = this.applyCustomUISettings(headerSeqNo, startCol, colSpan, startRow, rowSpan, justyFy, alignItem, backgroundColor, FontColor, fontSize, fieldPadding);\n          this.fieldStyles[this.tabID + '_' + startCol + '_' + colSpan + '_' + startRow + '_' + rowSpan + '_' + gridLayout_ID]['applyCustomUISettings'] = this.dynamicClassName;\n        }\n\n        // Find the div with dynamic class from container. Class will only be available in DOm if two fields are having same item seq. No.\n        $div = $containerDiv.find('.' + this.dynamicClassName);\n\n        //If div not found, then create new one.\n        if ($div.length <= 0) $div = $('<div class=\"vis-w-p-card-data-f ' + this.dynamicClassName + '\">');\n        if (fieldStyleLogic.length > 0) {\n          $div.attr('style', fieldStyleLogic);\n        }\n\n        // is dynamic \n        if (headerItem.ColSql.length > 0) {\n          var controls = {};\n          $divLabel = $('<div class=\"vis-w-p-header-Label-f\"></div>');\n          var parseStr = headerItem.ColSql;\n          //if (parseStr.contains('@')) {\n          //    parseStr = parseSQL(headerItem.ColSql, record);\n          //}\n          iControl = new VIS.Controls.VKeyText(parseStr, this.windowNo, this.windowNo + \"_\" + headerSeqNo, false, null, headerItem.AD_GridLayoutItems_ID);\n          if (iControl == null) {\n            continue;\n          }\n          controls[\"control\"] = iControl;\n          var objctrls = {\n            \"control\": controls,\n            \"field\": null\n          };\n          $divLabel.append(iControl.getControl());\n          iControl.setValue(null, false, record);\n          fieldValueStyle = headerItem.FieldValueStyle;\n          if (fieldValueStyle) $divLabel.attr('style', fieldValueStyle);\n          $div.append($divLabel);\n          // $div.append($divLabel);\n          $containerDiv.append($div);\n          //$self.controls.push(objctrls);\n        } else {\n          if (!headergFields) {\n            headergFields = {};\n            for (var i = 0; i < fields.length; i++) {\n              var field = fields[i];\n              if (field.getCardViewSeqNo() in headergFields) {\n                headergFields[field.getCardViewSeqNo()].push(field);\n              } else {\n                headergFields[field.getCardViewSeqNo()] = [field];\n              }\n              //}\n            }\n          }\n          var mFields = headergFields[headerSeqNo];\n          if (!mFields) continue;\n          for (var x = 0; x < mFields.length; x++) {\n            var mField = mFields[x];\n            if (!mField) continue;\n            if (mField.getCardFieldStyle()) fieldValueStyle = mField.getCardFieldStyle();\n            mField.setCardIconHide(hideFieldIcon);\n            mField.setCardTextHide(hideFieldText);\n            if (!this.fieldStyles[mField.getColumnName()]) this.fieldStyles[mField.getColumnName()] = {};\n            var controls = {};\n            $divIcon = $('<div class=\"vis-w-p-card-icon-f\"></div>');\n            var fIdx = backgroundColor.indexOf('flex-direction');\n            var lblflxstyle = \"\";\n            if (fIdx > -1) {\n              var cIdx = backgroundColor.indexOf(\";\", fIdx + 'flex-direction'.length);\n              lblflxstyle += ' display:flex; ' + backgroundColor.substring(fIdx, cIdx);\n            }\n            $divLabel = $('<div class=\"vis-w-p-card-Label-f\" style=\"' + lblflxstyle + '\"></div>');\n            $divDBIconSpan = $('<div class=\"vis-w-p-card-icon-f\"></div>');\n            $divDBImgSpan = $('<div class=\"vis-w-p-card-img-f\"></div>');\n            $divDBLevel = $('<div class=\"vis-w-p-card-Label-f\" style=\"' + lblflxstyle + '\"></div>');\n            // If Referenceof field is Image then added extra class to align image and Label in center.\n            //if (mField.getDisplayType() == VIS.DisplayType.Image) {\n            //    $divLabel.addClass('vis-w-p-card-Label-center-f');\n\n            //    if (!this.fieldStyles[mField.getColumnName() + 'justifyAlignImageItems'])\n            //        this.fieldStyles[mField.getColumnName() + 'justifyAlignImageItems'] = {};\n\n            //    this.dynamicClassForImageJustyfy = this.fieldStyles[mField.getColumnName() + 'justifyAlignImageItems']['justifyAlignImageItems'];\n            //    if (!this.dynamicClassForImageJustyfy) {\n            //        this.dynamicClassForImageJustyfy = this.justifyAlignImageItems(headerSeqNo, justyFy, alignItem);\n            //        this.fieldStyles[mField.getColumnName() + 'justifyAlignImageItems'] = { 'justifyAlignImageItems': this.dynamicClassForImageJustyfy };\n            //    }\n            //    $divLabel.addClass(this.dynamicClassForImageJustyfy);\n            //}\n\n            // Get Controls to be displayed in Header Panel\n            $label = VIS.VControlFactory.getHeaderLabel(mField, true);\n            iControl = VIS.VControlFactory.getReadOnlyControl(this.curTab, mField, false, false, false);\n            if (mField.getOrginalDisplayType() == VIS.DisplayType.Button) {\n              if (iControl != null) iControl.addActionListner(this);\n            }\n            if (!this.fieldStyles[mField.getColumnName() + 'applyCustomUIForLabelValue']) this.fieldStyles[mField.getColumnName() + 'applyCustomUIForLabelValue'] = {};\n            this.dynamicLabelValue = this.fieldStyles[mField.getColumnName() + 'applyCustomUIForLabelValue']['applyCustomUIForLabelValue'];\n            if (!this.dynamicLabelValue) {\n              this.dynamicLabelValue = this.applyCustomUIForLabelValue(headerSeqNo, startCol, startRow, mField, fieldLabelStyle, fieldStyleLogic);\n              this.fieldStyles[mField.getColumnName() + 'applyCustomUIForLabelValue'] = {\n                'applyCustomUIForLabelValue': this.dynamicLabelValue\n              };\n            }\n            if ($label) $label.getControl().addClass(this.dynamicLabelValue);\n            if (!this.fieldStyles[mField.getColumnName() + 'applyCustomUIForFieldValue']) this.fieldStyles[mField.getColumnName() + 'applyCustomUIForFieldValue'] = {};\n            this.dynamicFieldValue = this.fieldStyles[mField.getColumnName() + 'applyCustomUIForFieldValue']['applyCustomUIForFieldValue'];\n            if (!this.dynamicFieldValue) {\n              this.dynamicFieldValue = this.applyCustomUIForFieldValue(headerSeqNo, startCol, startRow, mField, fieldValueStyle, fieldStyleLogic);\n              this.fieldStyles[mField.getColumnName() + 'applyCustomUIForFieldValue'] = {\n                'applyCustomUIForFieldValue': this.dynamicFieldValue\n              };\n            }\n            iControl.getControl().addClass(this.dynamicFieldValue);\n\n            // Create object of controls and push object and Field in Array\n            // THis array is used when user navigate from one record to another.\n            controls[\"control\"] = iControl;\n            var objctrls = {\n              \"control\": controls,\n              \"field\": mField\n            };\n            var $spanIcon = $('<span></span>');\n            var icon = VIS.VControlFactory.getIcon(mField);\n            if (iControl == null) {\n              continue;\n            }\n            var $lblControl = null;\n            if ($label) {\n              $lblControl = $label.getControl().addClass('vis-w-p-card-data-label');\n            }\n            var colValue = getFieldValue(mField, record);\n            var $image = $('<img>');\n            var $imageSpan = $('<span>');\n            objctrls[\"img\"] = $image;\n            var lType = null;\n            if (mField.lookup && mField.lookup.gethasImageIdentifier()) {\n              objctrls[\"imgspan\"] = $imageSpan;\n              // $divLabel = $('<div class=\"vis-w-p-card-DivLabel-f\"></div>');\n              var img = null;\n              var imgSpan = null;\n              var styleArr = null;\n              this.iconStyle = null;\n              if (VIS.DisplayType.List == mField.lookup.displayType) {\n                lType = mField.lookup.getLovIconType(record[mField.getColumnName().toLower()], true);\n                img = mField.lookup.getLOVIconElement(record[mField.getColumnName().toLower()], true);\n                if (!img && colValue) {\n                  imgSpan = colValue.substring(0, 1);\n                  img = imgSpan;\n                }\n              } else {\n                colValue = VIS.Utility.Util.getIdentifierDisplayVal(colValue);\n                img = getIdentifierImage(mField, record);\n              }\n              if (img && !img.contains(\"Images/\") && img.indexOf('fa fa-') == -1 && img.indexOf('vis vis-') == -1) {\n                imgSpan = img; //img contains First charater of Name or Identifier text\n                $imageSpan.append(imgSpan);\n                icon = null;\n              } else {\n                if (VIS.DisplayType.List == mField.lookup.displayType) {\n                  if (img && !img.contains(\"Images/\") && (img.indexOf('fa fa-') != -1 || img.indexOf('vis vis-') != -1)) {\n                    imgSpan = img;\n                    $(img).attr('style', this.iconStyle);\n                    $imageSpan.append(img);\n                  } else {\n                    $image.attr('src', $(img).attr('src'));\n                    $imageSpan.append($image);\n                  }\n                } else {\n                  if (img.indexOf('fa fa-') == -1 && img.indexOf('vis vis-') == -1) {\n                    $image.attr('src', img);\n                    $imageSpan.append($image);\n                  } else {\n                    imgSpan = $('<i style=\"' + this.iconStyle + '\" class=\"' + img + '\"></i>');\n                    $imageSpan.append(imgSpan);\n                    icon = null;\n                  }\n                }\n              }\n              var $divIconContainer = $('<div>');\n              var $divLabelValueContainer = $('<div class=\"vis-w-p-card-value-container\">');\n              $spanIcon.addClass('vis-w-p-card-icon-fixed');\n              objctrls[\"imgspan\"] = $spanIcon;\n              if (icon != null) {\n                setFieldLayout(fieldValueStyle, $spanIcon, $(icon), $divDBLevel, true);\n                $divIcon.append($spanIcon);\n              } else {\n                setFieldLayout(fieldValueStyle, $divLabel, $imageSpan, iControl.getControl(), true);\n              }\n\n              //$divIcon.append($imageSpan);\n              //$divIcon.append($image);\n\n              //if ($lblControl && $lblControl.length > 0)\n              //    $divLabel.append($lblControl);\n\n              /*Set what do you want to show? Icon OR Label OR Both OR None*/\n              setFieldVisibility(mField, imgSpan, $image, $imageSpan, $lblControl, $divLabel, $divIcon);\n              //$divIconContainer.append($divIcon);\n              $divLabelValueContainer.append($divLabel);\n              if (VIS.DisplayType.List != mField.lookup.displayType) {\n                $divLabel.append(iControl.getControl());\n              }\n              $div.append($divIconContainer).append($divLabelValueContainer);\n\n              //this.setIconsDisplay(mField, $divIcon, $spanIcon, icon, $lblControl, $divLabel);\n              //$div.append($divDBIconSpan);\n              $containerDiv.append($div);\n              if (VIS.DisplayType.List == mField.lookup.displayType) {\n                //if (lType == \"B\") {\n                //    //if ($divIcon.parent().length > 0)\n                //    //$divIcon.append($divDBIconSpan);\n                //    //else {\n                //    //    $divIcon.empty();\n                //    //    $div.append($divIcon);\n                //    //    $divIcon.append($divDBIconSpan);\n                //    //}\n                //    $divDBIconSpan.append($imageSpan).append($image)\n\n                setValue(colValue, iControl, mField);\n                //    $divLabelValueContainer.append($divDBIconSpan);\n                //    $divLabelValueContainer.append($divDBLevel);\n                //}\n                //else if (lType == \"T\") {\n\n                //    $divLabelValueContainer.append($divDBLevel);\n                //    setValue(colValue, iControl, mField);\n                //}\n                //else if (lType == \"I\") {\n                //    $divDBIconSpan.append($imageSpan).append($image)\n                //    $divLabelValueContainer.append($divDBIconSpan);\n                //    $divDBLevel = null;\n                //    //if ($divIcon.parent().length > 0)\n                //    //$divIcon.append($divDBIconSpan);\n                //    //else {\n                //    //    $divIcon.empty();\n                //    //    $div.append($divIcon);\n                //    //    $divIcon.append($divDBIconSpan);\n                //    //}\n                //}\n                //setFieldLayout(fieldValueStyle, $divLabelValueContainer, $divDBIconSpan, $divDBLevel, true);\n              } else {\n                setValue(colValue, iControl, mField);\n              }\n            } else if (mField.getDisplayType() == VIS.DisplayType.Image) {\n              setValue(colValue, iControl, mField);\n              var imgCtrl = iControl.getControl().find('img');\n              if (!mField.isCardTextHide()) {\n                var lblcontrol = $('<label for=\"' + mField.getColumnName() + '\" class=\"vis-w-p-card-data-label\">' + mField.getHeader() + '</label>');\n                lblcontrol.addClass(this.dynamicLabelValue);\n                $divLabel.append(lblcontrol);\n              }\n              $divDBLevel = null;\n              setFieldLayout(fieldValueStyle, $divLabel, imgCtrl, $divDBLevel, true);\n              $div.append($divLabel);\n            } else {\n              setFieldLayout(fieldValueStyle, $div, $divIcon, $divLabel, false);\n              $spanIcon.addClass('vis-w-p-card-icon-fixed');\n              objctrls[\"imgspan\"] = $spanIcon;\n              /*Set what do you want to show? Icon OR Label OR Both OR None*/\n              if (mField.getOrginalDisplayType() == VIS.DisplayType.Button) {\n                $divIcon.remove(); // button has image with field\n              } else {\n                this.setIconsDisplay(mField, $divIcon, $spanIcon, icon, $lblControl, $divLabel);\n              }\n              setValue(colValue, iControl, mField);\n              /****END ******  Set what do you want to show? Icon OR Label OR Both OR None*/\n              $divLabel.append(iControl.getControl());\n            }\n            // \n            $containerDiv.append($div);\n            //$self.controls.push(objctrls);\n          }\n        }\n      }\n    };\n    this.setIconsDisplay = function (mField, $divIcon, $spanIcon, icon, $lblControl, $divLabel) {\n      if (!mField.isCardIconHide() && !mField.isCardTextHide()) {\n        $divIcon.append($spanIcon.append(icon));\n        if ($lblControl && $lblControl.length > 0) $divLabel.append($lblControl);\n      } else if (mField.isCardIconHide() && mField.isCardTextHide()) {\n        $divIcon.remove();\n      } else if (!mField.isCardIconHide() && mField.isCardTextHide()) {\n        $divIcon.append($spanIcon.append(icon));\n        if ($lblControl && $lblControl.length > 0) $lblControl.hide();\n      } else if (mField.isCardIconHide() && !mField.isCardTextHide()) {\n        if ($lblControl && $lblControl.length > 0) {\n          $divLabel.append($lblControl);\n        }\n        $divIcon.remove();\n      }\n    };\n\n    /**\r\n     * Create card according to template\r\n     * */\n    this.setHeader = function () {\n      if (headerItems && headerItems.length > 0) {\n        for (var j = 0; j < headerItems.length; j++) {\n          var currentItem = headerItems[j];\n          var rows = currentItem.HeaderTotalRow;\n          var columns = currentItem.HeaderTotalColumn;\n          var backColor = currentItem.HeaderBackColor;\n          var padding = currentItem.HeaderPadding;\n          var gid = currentItem.AD_GridLayout_ID;\n          if (!backColor) {\n            backColor = '';\n          }\n          if (!padding) {\n            padding = '';\n          }\n          if (!this.fieldStyles[columns + '_' + rows + '_' + backColor + '_' + padding + '_' + gid]) this.fieldStyles[columns + '_' + rows + '_' + backColor + '_' + padding + '_' + gid] = {};\n          //Apply HTML Style\n          this.dymcClass = this.fieldStyles[columns + '_' + rows + '_' + backColor + '_' + padding + '_' + gid]['fieldGroupContainerUISettings'];\n          if (!this.dymcClass) {\n            this.dymcClass = this.fieldGroupContainerUISettings(columns, rows, backColor, padding, gid);\n            this.fieldStyles[columns + '_' + rows + '_' + backColor + '_' + padding + '_' + gid]['fieldGroupContainerUISettings'] = this.dymcClass;\n          }\n          var $containerDiv = $('<div class=\"' + this.dymcClass + '\">');\n          root.append($containerDiv);\n          this.setHeaderItems(currentItem, $containerDiv, fields, record);\n        }\n      } else {\n        for (var i = 0; i < fields.length; i++) {\n          field = fields[i];\n          var value = record[field.getColumnName().toLowerCase()];\n          dt = field.getOrginalDisplayType();\n          var $label = VIS.VControlFactory.getHeaderLabel(field, true);\n          var iControl = VIS.VControlFactory.getReadOnlyControl(this.curTab, field, false, false, false);\n          var $lblControl = null;\n          if ($label) {\n            $lblControl = $label.getControl().addClass('vis-w-p-card-data-label');\n          }\n          if (field.getOrginalDisplayType() == VIS.DisplayType.Button) {\n            if (iControl != null) iControl.addActionListner(this);\n          }\n          if (field.lookup && field.lookup.gethasImageIdentifier()) {\n            var $divIcon = $('<div class=\"vis-w-p-card-icon-f\"></div>');\n            var $div = $('<div class=\"vis-w-p-card-data-f\">');\n            var $divLabel = $('<div class=\"vis-w-p-card-Label-f\"></div>');\n            var img = null;\n            var imgSpan = null;\n            var styleArr = null;\n            var $image = $('<img>');\n            var $imageSpan = $('<span>');\n            var colValue = getFieldValue(field, record);\n            setFieldLayout(field.cardFieldStyle, $div, $divIcon, $divLabel, true);\n            if (VIS.DisplayType.List == field.lookup.displayType) {\n              img = field.lookup.getLOVIconElement(record[field.getColumnName().toLower()], true);\n              if (!img && colValue) {\n                imgSpan = colValue.substring(0, 1);\n                img = imgSpan;\n              }\n            } else {\n              colValue = VIS.Utility.Util.getIdentifierDisplayVal(colValue);\n              img = getIdentifierImage(field, record);\n            }\n            if (img && !img.contains(\"Images/\")) {\n              imgSpan = img; //img contains First charater of Name or Identifier text\n              $imageSpan.append(imgSpan);\n            } else {\n              if (VIS.DisplayType.List == field.lookup.displayType) {\n                $image.attr('src', $(img).attr('src'));\n              } else {\n                $image.attr('src', img);\n              }\n            }\n            $divIcon.append($imageSpan);\n            $divIcon.append($image);\n\n            /*Set what do you want to show? Icon OR Label OR Both OR None*/\n            setFieldVisibility(field, imgSpan, $image, $imageSpan, $lblControl, $divLabel, $divIcon);\n            $divLabel.append(iControl.getControl());\n            setValue(colValue, iControl, field);\n            root.append($div);\n            continue;\n          } else if (VIS.DisplayType.IsLookup(dt)) {\n            if (field.getLookup()) {\n              value = field.getLookup().getDisplay(value);\n            }\n            value = value;\n          } else if (VIS.DisplayType.YesNo == dt) {\n            if (value || value == 'Y') value = VIS.Msg.getMsg('Yes');else value = value = VIS.Msg.getMsg('No');\n          } else if (VIS.DisplayType.IsDate(dt)) {\n            if (value) {\n              value = value.replace('Z', ''); //remove universal time\n              // JID_1826 Date is showing as per browser culture\n              var d = new Date(value);\n              if (dt == VIS.DisplayType.Date) value = d.toLocaleDateString();\n              //value = Globalize.format(new Date(value), 'd');\n              else if (dt == VIS.DisplayType.DateTime) value = d.toDateString();\n              //value = Globalize.format(new Date(value), 'f');\n              else value = d.toLocaleTimeString();\n              //value = Globalize.format(new Date(value), 't');\n            } else value = null;\n          }\n          // JID_1826 Amount is showing as per browser culture\n          else if (VIS.DisplayType.Amount == dt) {\n            var val = VIS.Utility.Util.getValueOfDecimal(value);\n            value = val.toLocaleString();\n          }\n          // JID_1826 Quantity is showing as per browser culture\n          else if (VIS.DisplayType.Quantity == dt) {\n            var val = VIS.Utility.Util.getValueOfDecimal(value);\n            value = val.toLocaleString();\n          } else if (VIS.DisplayType.Image == dt) {\n            setValue(value, iControl, field);\n            if ($label) {\n              root.append($label.getControl());\n            }\n            root.append(iControl.getControl());\n            continue;\n          } else if (VIS.DisplayType.Button == dt) {\n            setValue(value, iControl, field);\n            root.append(iControl.getControl());\n            continue;\n          }\n          if (!value && value != 0) value = ' -- ';\n          //value = w2utils.encodeTags(value);\n\n          if (field.getIsEncryptedField()) {\n            value = value.replace(/\\w|\\W/g, \"*\");\n          }\n          if (field.getObscureType()) {\n            value = VIS.Env.getObscureValue(field.getObscureType(), value);\n          }\n          var span = \"\";\n          if (VIS.Application.isRTL) span = \"<p><strong title='\" + value + \"'>\" + value + \"</strong> :\" + field.getHeader() + \"</p>\";else span = \"<p>\" + field.getHeader() + \": <strong title='\" + value + \"'>\" + value + \"</strong></p>\";\n          root.append($(span));\n        }\n        ;\n      }\n    };\n    this.setColor = function (bc, fc) {\n      if (bc) root.css('background', bc);\n      if (fc) root.css('color', bc);\n    };\n    pencil.on('touchstart', function () {\n      $(this).css({\n        'color': 'gray'\n      });\n    });\n    this.getRoot = function () {\n      return root;\n    };\n    this.setWidth = function (w) {\n      root.width(w);\n    };\n    this.dC = function () {\n      pencil.off('touchstart mouseover');\n      this.styleTag.remove();\n      this.styleTag = null;\n      root.remove();\n      root = null;\n      this.getRoot = null;\n      this.dc = null;\n    };\n    var setValue = function (colValue, iControl, mField) {\n      if (colValue) {\n        if (colValue.startsWith && colValue.startsWith(\"<\") && colValue.endsWith(\">\")) {\n          colValue = colValue.replace(\"<\", \"\").replace(\">\", \"\");\n        }\n        if (mField.getDisplayType() == VIS.DisplayType.Image) {\n          var oldValue = iControl.getValue();\n          iControl.getControl().show();\n          iControl.setDimension(240, 320);\n          if (oldValue == colValue) {\n            iControl.refreshImage(colValue);\n          }\n        } else if (iControl.format) {\n          colValue = iControl.format.GetFormatAmount(iControl.format.GetFormatedValue(colValue), \"init\", VIS.Env.isDecimalPoint());\n        }\n\n        // iControl.setValue(w2utils.encodeTags(colValue), false);\n        iControl.setValue(colValue, false);\n      } else {\n        if (mField.getDisplayType() == VIS.DisplayType.Image) {\n          iControl.getControl().hide();\n          iControl.setValue(null, false);\n        } else if (mField.getOrginalDisplayType() == VIS.DisplayType.Button && mField.getAD_Reference_Value_ID() > 0) {\n          iControl.setText(\"- -\");\n        } else iControl.setValue(\"- -\", true);\n      }\n    };\n\n    //Get value of field..\n    var getFieldValue = function (mField, record) {\n      var colValue = record[mField.getColumnName().toLowerCase()]; // mField.getValue();\n\n      if (colValue) {\n        var displayType = mField.getDisplayType();\n        if (mField.lookup) {\n          colValue = mField.lookup.getDisplay(colValue, true, false);\n        }\n        //\tDate\n        else if (VIS.DisplayType.IsDate(displayType)) {\n          if (displayType == VIS.DisplayType.DateTime) {\n            colValue = new Date(colValue).toLocaleString();\n          } else if (displayType == VIS.DisplayType.Date) {\n            colValue = new Date(colValue).toLocaleDateString();\n          } else {\n            colValue = new Date(colValue).toLocaleTimeString();\n          }\n        }\n        //\tYesNo\n        else if (displayType == VIS.DisplayType.YesNo) {\n          var str = colValue.toString();\n          if (mField.getIsEncryptedColumn()) str = VIS.secureEngine.decrypt(str);\n          colValue = str.equals(\"true\"); //\tBoolean\n        }\n\n        //\tLOB \n        else colValue = colValue.toString(); //string\n\n        //\tEncrypted\n        // If field is marked encrypted, then replace all text of field with *.\n        if (mField.getIsEncryptedField()) {\n          if (colValue && colValue.length > 0) {\n            colValue = colValue.replace(/[a-zA-Z0-9-. ]/g, '*').replace(/[^a-zA-Z0-9-. ]/g, '*');\n          }\n        }\n        if (mField.getObscureType()) {\n          if (colValue && colValue.length > 0) {\n            colValue = VIS.Env.getObscureValue(mField.getObscureType(), colValue);\n          }\n        }\n      } else {\n        colValue = null;\n      }\n      return colValue;\n    };\n\n    /**\r\n     * Set layout of idenifier field\r\n     * @param {any} mField\r\n     * @param {any} record\r\n     */\n    this.iconStyle = null;\n    var $self = this;\n    var getIdentifierImage = function (mField, record, iconStyle) {\n      var value = record[mField.getColumnName().toLowerCase()];\n      value = mField.lookup.getDisplay(value, true, true);\n      if (value == null || value == \"\") return \"\";\n      var imgIndex = value.indexOf(\"Images/\");\n      var capIndex = value.indexOf(\"^^\");\n      var style;\n      if (value != null && value && (imgIndex > -1 || capIndex > -1)) {\n        // Based on sequence of image in idenitifer, perform logic and display image with text\n\n        if (imgIndex > -1) {\n          var img = value.substring(value.indexOf(\"Images/\") + 7, value.lastIndexOf(\"^^\"));\n          img = VIS.Application.contextUrl + \"Images/Thumb32x32/\" + img;\n        } else if (imgIndex == -1 && capIndex > -1) {\n          style = value.substring(value.indexOf(\"***\"), value.lastIndexOf(\"***\") + 3);\n          style = style.replace(\"***\", \"\").replace(\"***\", \"\");\n          value = value.replace(value.substring(value.indexOf(\"***\"), value.lastIndexOf(\"***\") + 3), \"\");\n          imgIndex = value.indexOf(\"vis vis-\");\n          if (imgIndex == -1) imgIndex = value.indexOf(\"fa fa-\");\n          img = value.substring(imgIndex, value.lastIndexOf(\"^^\"));\n          $self.iconStyle = style;\n        }\n      }\n      if (c == 0 || img.indexOf(\"nothing.png\") > -1 && !style) {\n        value = value.replace(\"^^\" + value.substring(value.indexOf(\"Images/\"), value.lastIndexOf(\"^^\") + 2), \"^^^\");\n        if (value.indexOf(\"Images/\") > -1) value = value.replace(value.substring(value.indexOf(\"Images/\"), value.lastIndexOf(\"^^\") + 2), \"^^^\");\n        value = value.split(\"^^^\");\n        var highlightChar = '';\n        for (var c = 0; c < value.length; c++) {\n          if (value[c].trim().length > 0) {\n            if (highlightChar.length == 0) highlightChar = value[c].trim().substring(0, 1).toUpper();\n            return highlightChar;\n          }\n        }\n      }\n      return img;\n    };\n\n    /**\r\n     * Set Layout of field based on setting in Field Value Style field\r\n     * @param {any} fieldValueStyle\r\n     * @param {any} $div\r\n     * @param {any} $divIcon\r\n     * @param {any} $divLabel\r\n     */\n    var setFieldLayout = function (fieldValueStyle, $div, $divIcon, $divLabel, setFieldStyle) {\n      var styleArr = fieldValueStyle;\n      if (styleArr && styleArr.length > 0) styleArr = styleArr.split(\"|\");\n      if (styleArr && styleArr.length > 0 && setFieldStyle == true) {\n        for (var j = 0; j < styleArr.length; j++) {\n          if (styleArr[j].indexOf(\"@img::\") > -1 || styleArr[j].indexOf(\"@span::\") > -1) {\n            $div.append($divIcon);\n            var css = \"\";\n            if (styleArr[j].indexOf(\"@img::\") > -1) {\n              css = styleArr[j].replace(\"@img::\", \"\");\n            } else if (styleArr[j].indexOf(\"@span::\")) {\n              css = styleArr[j].replace(\"@span::\", \"\");\n            }\n            $divIcon.attr('style', css);\n          } else if (styleArr[j].indexOf(\"@value::\") > -1) {\n            $div.append($divLabel);\n          } else if (styleArr[j].indexOf(\"<br>\") > -1) {\n            $div.css(\"flex-direction\", \"column\");\n          } else {\n            $div.append($divIcon);\n            $div.append($divLabel);\n          }\n        }\n      } else {\n        $div.append($divIcon);\n        $div.append($divLabel);\n      }\n    };\n\n    /**\r\n     * Set visibility of field, icon and label of field\r\n     * @param {any} mField\r\n     * @param {any} imgSpan\r\n     * @param {any} $image\r\n     * @param {any} $imageSpan\r\n     * @param {any} $lblControl\r\n     * @param {any} $divLabel\r\n     * @param {any} $divIcon\r\n     */\n    var setFieldVisibility = function (mField, imgSpan, $image, $imageSpan, $lblControl, $divLabel, $divIcon) {\n      if (!mField.isCardIconHide() && !mField.isCardTextHide()) {\n        if (imgSpan != null) $image.hide();else {\n          $imageSpan.hide();\n        }\n        if ($lblControl && $lblControl.length > 0) $divLabel.append($lblControl);\n      } else if (mField.isCardIconHide() && mField.isCardTextHide()) {\n        $divIcon.empty();\n        $divIcon.remove();\n      } else if (mField.isCardTextHide()) {\n        if (imgSpan != null) $image.hide();else $imageSpan.hide();\n        if ($lblControl && $lblControl.length > 0) $lblControl.remove();\n      } else if (mField.isCardIconHide()) {\n        if ($lblControl && $lblControl.length > 0) {\n          $divLabel.append($lblControl);\n        }\n        $divIcon.empty();\n        $divIcon.remove();\n      }\n    };\n\n    /**\r\n     * Parse SQL query\r\n     * @param {any} value\r\n     * @param {any} record\r\n     */\n    var parseSQL = function (value, record) {\n      var token = \"\";\n      ;\n      var outStr = new String(\"\");\n      var i = value.indexOf('@');\n      // Check whether the @ is not the last in line (i.e. in EMailAdress or with wrong entries)\n      while (i != -1 && i != value.lastIndexOf(\"@\")) {\n        var getValue = value.substring(0, i);\n        outStr += value.substring(0, i); // up to @\n        value = value.substring(i + 1, value.length); // from first @\n\n        var j = value.indexOf('@'); // next @\n        if (j < 0) {\n          //_log.log(Level.SEVERE, \"No second tag: \" + inStr);\n          return \"\"; //\tno second tag\n        }\n        var ctxInfo = \"\";\n        var ctxInfo1 = \"\";\n        token = value.substring(0, j);\n        if (token.contains(\".\")) {\n          token = token.substring(0, token.indexOf(\".\"));\n          //txInfo = ctx.getWindowContext(WindowNo, tabNo, token.substring(0, token.indexOf(\".\")), onlyWindow);\t// get context\n        }\n        ctxInfo = record[token.toLowerCase()]; //ctx.getWindowContext(windowNo, tabNo, token, onlyWindow);\t// get context\n\n        if (ctxInfo.length == 0 && (token.startsWith(\"#\") || token.startsWith(\"$\"))) ctxInfo = ctx.getContext(token); // get global context\n        if (ctxInfo.length == 0) {\n          //_log.config(\"No Context Win=\" + WindowNo + \" for: \" + token);\n          if (!ignoreUnparsable) return \"\";\n          outStr += ' NULL ';\n          //\t\t\t\t\t\t//\ttoken not found\n        } else {\n          outStr += ctxInfo; // replace context with Context\n        }\n        value = value.substring(j + 1, value.length); // from second @\n        i = value.indexOf('@');\n      }\n      outStr += value; // add the rest of the string\n      return outStr;\n    };\n    this.setHeader();\n\n    //this.addStyleToDom();\n  }\n  ;\n\n  /**\r\n   * Add dynamically created style tags to HTML document\r\n   * */\n  VCard.prototype.addStyleToDom = function () {\n    $('head').find(\"[cardview='\" + this.windowNo + \"']\").remove();\n    this.styleTag.type = 'text/css';\n    $(this.styleTag).attr(\"cardview\", this.windowNo);\n    this.styleTag.innerHTML = this.dynamicStyle.join(\" \");\n    $($('head')[0]).append(this.styleTag);\n  };\n\n  /**\r\n   * Set field style\r\n   * @param {any} headerSeqNo\r\n   * @param {any} startCol\r\n   * @param {any} startRow\r\n   * @param {any} mField\r\n   * @param {any} fieldValueStyle\r\n   */\n\n  VCard.prototype.applyCustomUIForFieldValue = function (headerSeqNo, startCol, startRow, mField, fieldValueStyle, fieldStyleLogic) {\n    var style = fieldValueStyle + \" \" + fieldStyleLogic;\n    var dynamicClassName = \"vis-hp-card-FieldValue_\" + startRow + \"_\" + startCol + \"_\" + this.windowNo + \"_\" + this.tabID + \"_\" + headerSeqNo + \"_\" + mField.getAD_Column_ID();\n    if (style && style.toLower().indexOf(\"@value::\") > -1) {\n      style = getStylefromCompositeValue(style, \"@value::\");\n    }\n    this.dynamicStyle.push(\".\" + dynamicClassName + \"  {\" + style + \"} \");\n    return dynamicClassName;\n  };\n\n  /**\r\n   * Set Label style\r\n   * @param {any} headerSeqNo\r\n   * @param {any} startCol\r\n   * @param {any} startRow\r\n   * @param {any} mField\r\n   * @param {any} fieldValueStyle\r\n   */\n\n  VCard.prototype.applyCustomUIForLabelValue = function (headerSeqNo, startCol, startRow, mField, fieldValueStyle, fieldStyleLogic) {\n    var style = fieldValueStyle + \" \" + fieldStyleLogic;\n    var dynamicClassName = \"vis-hp-card-LabelValue_\" + startRow + \"_\" + startCol + \"_\" + this.windowNo + \"_\" + this.tabID + \"_\" + headerSeqNo + \"_\" + mField.getAD_Column_ID();\n    if (style && style.toLower().indexOf(\"@value::\") > -1) {\n      style = getStylefromCompositeValue(style, \"@value::\");\n    }\n    this.dynamicStyle.push(\".\" + dynamicClassName + \"  {\" + style + \"} \");\n    return dynamicClassName;\n  };\n\n  /**\r\n   * Set field style\r\n   * @param {any} headerSeqNo\r\n   * @param {any} justify\r\n   * @param {any} alignItem\r\n   */\n  VCard.prototype.justifyAlignImageItems = function (headerSeqNo, justify, alignItem) {\n    var dynamicClassName = \"vis-w-p-header-label-center-justify_\" + headerSeqNo + \"_\" + this.windowNo;\n    this.dynamicStyle.push(\" .\" + dynamicClassName + \" {justify-content:\" + this.textAlignEnum[justify] + \";align-items:\" + this.alignItemEnum[alignItem] + \"}\");\n    return dynamicClassName;\n  };\n\n  /**\r\n   * \r\n   * @param {any} style\r\n   * @param {any} requiredtype\r\n   */\n  var getStylefromCompositeValue = function (style, requiredtype) {\n    if (style && style.toLower().indexOf(requiredtype) > -1) {\n      var styleArr = style.split(\"|\");\n      for (var i = 0; i < styleArr.length; i++) {\n        if (styleArr[i].toLower().indexOf(requiredtype) > -1) {\n          return styleArr[i].toLower().replace(requiredtype, \"\").trim();\n        }\n      }\n    }\n  };\n  VCard.prototype.evaluateStyleLogic = function (styleLogic) {\n    var arr = styleLogic.split(',');\n\n    //this.cellColumnName = col.field;\n    var ret = null;\n    for (var j = 0; j < arr.length; j++) {\n      var cArr = arr[j].split(\"?\");\n      if (cArr.length != 2) continue;\n      if (VIS.Evaluator.evaluateLogic(this, cArr[0])) {\n        ret = cArr[1];\n        break;\n      }\n    }\n    return ret;\n  };\n\n  /**\r\n   * Get  Custom Style of Parent of field\r\n   * @param {any} backColor\r\n   */\n  VCard.prototype.headerParentCustomUISettings = function (backColor) {\n    var dynamicClassName = \"vis-ad-w-p-card-Custom_\" + this.windowNo;\n    this.dynamicStyle.push(\" .\" + dynamicClassName + \" {flex:1;\");\n    this.dynamicStyle.push(backColor);\n    this.dynamicStyle.push(\"} \");\n    return dynamicClassName;\n  };\n\n  /**\r\n   * Get Header UI Setting Style\r\n   * @param {any} backcolor\r\n   * @param {any} padding\r\n   */\n  VCard.prototype.headerUISettings = function (backcolor, padding) {\n    var dynamicClassName = \"vis-ad-w-p-card_root_\" + this.windowNo;\n    this.dynamicStyle.push(\" .\" + dynamicClassName + \" {display:flex;overflow:auto;\");\n    this.dynamicStyle.push(\"padding:\" + padding + \";\" + backcolor);\n    this.dynamicStyle.push(\"} \");\n    return dynamicClassName;\n  };\n\n  /**\r\n   * Set Custom style of field Group\r\n   * @param {any} columns\r\n   * @param {any} rows\r\n   * @param {any} backcolor\r\n   * @param {any} padding\r\n   * @param {any} itemNo\r\n   */\n  VCard.prototype.fieldGroupContainerUISettings = function (columns, rows, backcolor, padding, itemNo) {\n    var dynamicClassName = \"vis-ad-w-p-fg_card-container_\" + rows + \"_\" + columns + \"_\" + this.windowNo + \"_\" + itemNo;\n    this.dynamicStyle.push(\" .\" + dynamicClassName + \" {display:grid;\");\n    this.dynamicStyle.push('grid-template-columns:repeat(' + columns + ', 1fr);grid-template-rows:repeat(' + rows + ', auto);padding:' + padding + ';' + backcolor);\n    this.dynamicStyle.push(\"} \");\n    return dynamicClassName;\n  };\n\n  /**\r\n   * get Style of Field Group\r\n   * @param {any} headerSeqNo\r\n   * @param {any} startCol\r\n   * @param {any} colSpan\r\n   * @param {any} startRow\r\n   * @param {any} rowSpan\r\n   * @param {any} justify\r\n   * @param {any} alignment\r\n   * @param {any} backColor\r\n   * @param {any} fontColor\r\n   * @param {any} fontSize\r\n   * @param {any} padding\r\n   */\n  VCard.prototype.applyCustomUISettings = function (headerSeqNo, startCol, colSpan, startRow, rowSpan, justify, alignment, backColor, fontColor, fontSize, padding) {\n    var dynamicClassName = \"vis-hp-card-FieldGroup_\" + startRow + \"_\" + startCol + \"_\" + this.windowNo + \"_\" + this.tabID + \"_\" + headerSeqNo;\n    this.dynamicStyle.push(\".\" + dynamicClassName + \"  {grid-column:\" + startCol + \" / span \" + colSpan + \"; grid-row: \" + startRow + \" / span \" + rowSpan + \";\");\n    this.dynamicStyle.push(\"justify-content:\" + this.textAlignEnum[justify] + \";align-items:\" + this.alignItemEnum[alignment]);\n    this.dynamicStyle.push(\";font-size:\" + fontSize + \";color:\" + fontColor + \";padding:\" + padding + \";\");\n    this.dynamicStyle.push(backColor);\n    this.dynamicStyle.push(\"} \");\n    return dynamicClassName;\n  };\n  VCard.prototype.evaluate = function (cnds) {\n    //if (!cnds)\n    //{\n    //    return;\n    //}\n    var c = null;\n    for (var i = 0; i < cnds.length; i++) {\n      c = cnds[i];\n      if (!c.ConditionValue) continue;\n      if (VIS.Evaluator.evaluateLogic(this, c.ConditionValue)) {\n        this.setColor(c.Color, c.FColor);\n      }\n    }\n  };\n  VCard.prototype.getValueAsString = function (vName) {\n    var val = this.record[vName.toLowerCase()];\n    if (val) {\n      if (val === true) {\n        val = 'Y';\n      } else if (val && val.toString().endsWith('.000Z')) {\n        val = val.replace('.000Z', 'Z');\n      }\n      val = val.toString();\n    } else if (val === false) val = 'N';else if (val === 0) {\n      val = '0';\n    }\n    return val;\n  };\n\n  /**\r\n   * handled Button click \r\n   * @param {any} action\r\n   */\n  VCard.prototype.actionPerformed = function (action) {\n    //selfPan.actionButton(action.source);\n    if (this.aPanel.curTab.needSave(true, false)) {\n      this.aPanel.cmd_save(true);\n      return;\n    }\n    this.curTab = this.aPanel.curTab;\n    this.curGC = this.aPanel.curGC;\n    this.aPanel.actionPerformed(action, this);\n  };\n\n  /**\r\n   * Save unsaved changes before buton click\r\n   * @param {any} manual\r\n   * @param {any} callback\r\n   */\n  VCard.prototype.cmd_save = function (manual, callback) {\n    return this.aPanel.cmd_save2(manual, this.curTab, this.curGC, this.aPanel, callback);\n  };\n  VCard.prototype.dispose = function () {\n    this.dC();\n    //vaSortable.prototype.dispose();\n  };\n  VIS.VCardView = VCardView;\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/vcardview.js?")},"./Areas/VIS/Scripts/F20/veditview.js":()=>{eval(';\n(function (VIS, $) {\n  //****************************************************//\n  //**             VPanel                            **//\n  //**************************************************//\n  VIS.VGridPanel = function () {\n    var oldFieldGroup = null,\n      columnIndex = -2,\n      allControlCount = -1;\n    ;\n    var allControls = [];\n    var allLinkControls = [];\n    var toolbarButtonList = {};\n    var $table;\n    var $td0, $td1, $td2, $td3;\n    var $spndisplayFG = $(\'<span class="vis-ev-fgbtn" data-state="N">\' + VIS.Msg.getMsg("More") + \'</span>\');\n    var _curParent = null;\n    var col0 = {\n      rSpan: 1,\n      cSpan: 0,\n      cSpace: 0,\n      orgRSpan: 1\n    };\n    var col1 = {\n      rSpan: 1,\n      cSpan: 0,\n      cSpace: 0,\n      orgRSpan: 1\n    };\n    var col2 = {\n      rSpan: 1,\n      cSpan: 0,\n      cSpace: 0,\n      orgRSpan: 1\n    };\n    var col3 = {\n      rSpan: 1,\n      cSpan: 0,\n      cSpace: 0,\n      orgRSpan: 1\n    };\n\n    /** Map of group name to list of components in group. */\n    //control = field array\n    var compToFieldMap = {};\n\n    /** Map of group name to list of components in group. */\n    var groupToCompsMap = {};\n    var fieldToCompParentMap = {};\n    var colDescHelpList = {};\n    var lastPopover = null;\n    function initComponent() {\n      $table = $("<div class=\'vis-ad-w-p-vc-ev-grid\'>"); //   $("<table class=\'vis-gc-vpanel-table\'>");\n      $table.on("click", "span.vis-ev-ctrlinfowrap", onInfoClick);\n      $table.on("click", "span.vis-ev-fgbtn", onBtnFGClick);\n    }\n    ;\n    function onInfoClick(e) {\n      var curTgt = $(e.currentTarget);\n      var colName = curTgt.data(\'colname\');\n      if (colName != \'\') {\n        if (lastPopover) {\n          lastPopover.popover(\'dispose\');\n          lastPopover = null;\n        }\n        curTgt.attr(\'data-content\', colDescHelpList[colName].help);\n        //attr(\'title\', colDescHelpList[colName].desc);\n        lastPopover = curTgt.popover(\'show\');\n      }\n    }\n    initComponent();\n    function initCols(isCol0, isCol1, isCol2, isCol3) {\n      if (isCol0) _curParent = $td0 = $("<div class=\'vis-ev-col\'></div>");\n      if (isCol1) _curParent = $td1 = $("<div class=\'vis-ev-col vis-ev-col-start2\'></div>");\n      if (isCol2) _curParent = $td2 = $("<div class=\'vis-ev-col vis-ev-col-start3\'></div>");\n      if (isCol3) _curParent = $td3 = $("<div class=\'vis-ev-col vis-ev-col-start4\'></div>");\n    }\n    ;\n    function reset(col) {\n      if (!col) {\n        col0 = {\n          rSpan: 1,\n          cSpan: 0,\n          cSpace: 0,\n          set: false\n        };\n        col1 = {\n          rSpan: 1,\n          cSpan: 0,\n          cSpace: 0,\n          set: false\n        };\n        col2 = {\n          rSpan: 1,\n          cSpan: 0,\n          cSpace: 0,\n          set: false\n        };\n        col3 = {\n          rSpan: 1,\n          cSpan: 0,\n          cSpace: 0,\n          set: false\n        };\n      } else if (col.rSpan <= 1) {\n        col = {\n          rSpan: 1,\n          cSpan: 0,\n          cSpace: 0,\n          set: false\n        };\n      }\n    }\n    ;\n    function adjustRowSpanForSameLine(colIndex) {\n      // if(colIndex)\n    }\n    function adjustRowSpan(colIndex) {\n      if (col0.rSpan > 1) {\n        //skip column \n        //if (col0.set && colIndex == 1 &&  col0.cSpan < 4) { //special case\n        //    col0.set = false;\n        //}\n        //else\n        --col0.rSpan;\n        reset(col0);\n      }\n      if (col1.rSpan > 1) {\n        //skip column \n        //if (colIndex == 2 && col1.set &&  col1.cSpan < 3) { //special case\n        //    col1.set = false;\n        //}\n        //else\n        --col1.rSpan;\n        reset(col1);\n      }\n      if (col2.rSpan > 1) {\n        //skip column \n        //if (colIndex == 3 && col2.set && col2.cSpan <2) { //special case\n        //    col2.set = false;\n        //}\n        //else\n        --col2.rSpan;\n        reset(col2);\n      }\n      if (col3.rSpan > 1) {\n        //skip column \n        --col3.rSpan;\n        reset(col3);\n      }\n    }\n    ;\n    function adjustLayout(mField, isNewRow) {\n      var rowSpan = mField.getFieldBreadth();\n      var colSpan = mField.getFieldColSpan();\n      var cellSpace = mField.getCellSpace();\n      var isLongFiled = mField.getIsLongField();\n      var isLineBreak = mField.getIsLineBreak();\n      if (isLineBreak) {\n        reset();\n        isNewRow = true;\n      }\n      if (isNewRow) {\n        adjustRowSpan(columnIndex);\n        addRow();\n        columnIndex = 0;\n      }\n      if (columnIndex == 0) {\n        if (isLongFiled) {\n          addRow(); //add last row;\n          reset();\n          initCols(true);\n          $td0.addClass("vis-ev-col-end4");\n          columnIndex = 4;\n        } else {\n          // check for row span\n          if (col0.rSpan > 1) {\n            //skip column \n            columnIndex += col0.cSpan;\n            //--col0.rSpan;\n            //reset(col0);\n          } else if (cellSpace > 0) {\n            if (cellSpace > 3) cellSpace = 3;\n            columnIndex += cellSpace;\n            cellSpace = 0; //reset\n          } else if ($td0) {\n            columnIndex += 1;\n          } else {\n            initCols(true);\n            if (colSpan == 2) {\n              if (col1.rSpan <= 1)\n                //if nor row span on on colujn 1\n                $td0.addClass("vis-ev-col-end2");\n            } else if (colSpan == 3) {\n              if (col1.rSpan <= 1 && col2.rSpan <= 1) $td0.addClass("vis-ev-col-end3");else if (col1.cSpan < 1) $td0.addClass("vis-ev-col-end2");\n            } else if (colSpan > 3) {\n              if (col1.rSpan <= 1 && col2.rSpan <= 1 && col3.rSpan <= 1) $td0.addClass("vis-ev-col-end4");else if (col1.rSpan <= 1 && col2.rSpan <= 1) $td0.addClass("vis-ev-col-end3");else if (col1.rSpan <= 1) $td0.addClass("vis-ev-col-end2");\n            }\n            columnIndex += colSpan - 1;\n            if (rowSpan > 1) {\n              col0.rSpan = rowSpan + 1; //extra to fill addnew minus\n              col0.set = true;\n              col0.cSpan = colSpan;\n              col0.cSpace = cellSpace;\n              $td0.css("grid-row", "span " + rowSpan);\n            }\n            return;\n          }\n        }\n      }\n      if (columnIndex == 1) {\n        // check for row span\n        if (col1.rSpan > 1) {\n          //skip column \n          columnIndex += col1.cSpan;\n          //--col1.rSpan;\n          //reset(col1);\n        } else if (cellSpace > 0) {\n          if (cellSpace > 2) cellSpace = 2;\n          columnIndex += cellSpace;\n          cellSpace = 0;\n        } else if ($td1) {\n          columnIndex += 1;\n        } else {\n          initCols(false, true);\n          if (colSpan == 2) {\n            if (col2.rSpan <= 1)\n              //if nor row span on on colujn 1\n              $td1.addClass("vis-ev-col-end3");\n          } else if (colSpan >= 3) {\n            if (col2.rSpan <= 1 && col3.rSpan <= 1) $td1.addClass("vis-ev-col-end4");else if (col2.cSpan < 1) $td1.addClass("vis-ev-col-end3");\n          }\n          columnIndex += colSpan - 1;\n          if (rowSpan > 1) {\n            col1.rSpan = rowSpan + 1;\n            col1.set = true;\n            col1.cSpan = colSpan;\n            col1.cSpace = cellSpace;\n            $td1.css("grid-row", "span " + rowSpan);\n          }\n          return;\n        }\n      }\n      if (columnIndex == 2) {\n        // check for row span\n        if (col2.rSpan > 1) {\n          //skip column \n          columnIndex += col2.cSpan;\n          //--col2.rSpan;\n          //reset(col2);\n        } else if (cellSpace > 0) {\n          if (cellSpace > 1) cellSpace = 1;\n          columnIndex += cellSpace;\n          cellSpace = 0;\n        } else if ($td2) {\n          columnIndex += 1;\n        } else {\n          initCols(false, false, true);\n          if (colSpan >= 2) {\n            if (col3.rSpan <= 1)\n              //if nor row span on on colujn 1\n              $td2.addClass("vis-ev-col-end4");\n          }\n          columnIndex += colSpan - 1;\n          if (rowSpan > 1) {\n            col2.rSpan = rowSpan + 1;\n            col2.set = true;\n            col2.cSpan = colSpan;\n            col2.cSpace = cellSpace;\n            $td2.css("grid-row", "span " + rowSpan);\n          }\n          return;\n        }\n      }\n      if (columnIndex == 3) {\n        // check for row span\n        if (col3.rSpan > 1) {//skip column \n          //--col3.rSpan;\n          //reset(col3);\n        } else if ($td3) {\n          isNewRow = true;\n          //addRow();\n          //columnIndex = 0;\n        } else {\n          initCols(false, false, false, true);\n          if (colSpan >= 2) {\n            $td3.addClass("vis-ev-col-end4");\n          }\n          if (rowSpan > 1) {\n            col3.rSpan = rowSpan + 1;\n            col3.set = true;\n            col3.cSpan = colSpan;\n            col3.cSpace = cellSpace;\n            $td3.css("grid-row", "span " + rowSpan);\n          }\n        }\n        return;\n      }\n\n      //if all col index are skipped\n      if (!$td0 && !$td1 && !$td2 && !$td3) {\n        //columnIndex = 0;\n        adjustLayout(mField, isNewRow);\n      } else if (!isLongFiled && columnIndex > 3) {\n        adjustLayout(mField, true);\n      }\n    }\n    ;\n    function addRow() {\n      if ($td0) $table.append($td0);\n      if ($td1) $table.append($td1);\n      if ($td2) $table.append($td2);\n      if ($td3) $table.append($td3);\n      $td0 = $td1 = $td2 = $td3 = $td4 = null;\n      //if (td3RSpan < 0)\n      //    $table.append($td3)\n      //else if (td3RSpan > 100) {\n      //    td3RSpan = td3RSpan - 100;\n      //    $table.append($td3.css(\'grid-row\', \'span \' + td3RSpan));\n      //}\n    }\n    ;\n    function onGroupClick(e) {\n      e.stopPropagation();\n      var divGroup = $(this);\n      var target = $(e.target);\n      var name = divGroup.data("name") + "_" + divGroup.data("seqno");\n      // var idx = div.Group.data("seqno");\n      var dis = divGroup.data("display");\n      var viewMore = $(divGroup.find(\'.vis-ev-col-fg-more\')[0]);\n      //console.log(name);\n      //console.log(dis);\n      var show = false;\n      var showGroupFieldDefault = false;\n      if (target.is(\'span\') || target.hasClass(\'vis-ev-col-fg-more\')) {\n        if (dis !== "show") {\n          // If group is vlosed and user click on show more then no processing.\n          return;\n        }\n        show = true;\n        if (divGroup.data("showmore") == \'Y\') {\n          showGroupFieldDefault = true;\n          divGroup.data("showmore", "N");\n          viewMore.text(VIS.Msg.getMsg("ShowLess"));\n        } else {\n          divGroup.data("showmore", "Y");\n          viewMore.text(VIS.Msg.getMsg("ShowMore"));\n        }\n      } else {\n        if (divGroup.data("showmore") == \'N\') {\n          showGroupFieldDefault = true;\n        }\n        if (dis === "show") {\n          divGroup.data("display", "hide");\n          viewMore.hide();\n          $(divGroup.children()[2]).addClass("vis-ev-col-fg-rotate");\n        } else {\n          divGroup.data("display", "show");\n          viewMore.show();\n          show = true;\n          $(divGroup.children()[2]).removeClass("vis-ev-col-fg-rotate");\n        }\n      }\n      displayFieldGroupControls(name, show, showGroupFieldDefault);\n    }\n    ;\n\n    /**\r\n     * show/hide controls\r\n     * @param {any} name nam of group\r\n     * @param {any} show flag to show controls\r\n     * @param {any} showGroupFieldDefault  default state of field gp controls\r\n     */\n    function displayFieldGroupControls(name, show, showGroupFieldDefault) {\n      var list = groupToCompsMap[name];\n      for (var i = 0; i < list.length; i++) {\n        var field = list[i];\n        var ctrls = compToFieldMap[field.getColumnName()];\n        for (var j = 0; j < ctrls.length; j++) {\n          ctrls[j].tag = show;\n          ctrls[j].setVisible(show && field.getIsDisplayed(true));\n        }\n        if (show && field.getIsDisplayed(true) && (field.getIsFieldgroupDefault() || showGroupFieldDefault)) fieldToCompParentMap[field.getColumnName()].show();else fieldToCompParentMap[field.getColumnName()].hide();\n      }\n    }\n    function addGroup(fieldGroup) {\n      if (oldFieldGroup == null) {\n        //addTop();\n        oldFieldGroup = "";\n      }\n      if (fieldGroup == null || fieldGroup.length == 0 || fieldGroup.equals(oldFieldGroup)) return false;\n      var seqSuffix = Object.keys(groupToCompsMap).length + 1;\n      oldFieldGroup = fieldGroup; // + "_" + seqSuffix;\n\n      //setColumns(columnIndex);\n      // clearRowSpan();\n      addRow();\n      reset();\n      initCols(true);\n      //<i class="fa fa-ellipsis-h"></i>\n      var gDiv = $(\'<div class="vis-ev-col-fieldgroup" data-showmore="Y" data-name="\' + fieldGroup + \'" data-display="show" data-seqno="\' + seqSuffix + \'">\' + \'<span class="vis-ev-col-fg-hdr"  >\' + fieldGroup + \' </span> \' + \'<button class="vis-ev-col-fg-more">\' + VIS.Msg.getMsg("ShowMore") + \'</button>\' + \'<button class="vis-ev-fg-arrowBtn"><i class= "fa fa-angle-up"></button>\' + \'</span>\' + \'</div>\');\n      $td0.append(gDiv);\n      $td0.addClass("vis-ev-col-end4");\n      columnIndex = 0;\n\n      //VLine fp = new VLine(fieldGroup);\n      gDiv.on("click", onGroupClick);\n      return true;\n    }\n    ;\n    function addToCompList(comp) {\n      if (oldFieldGroup != null && !oldFieldGroup.equals("")) {\n        var compList = null;\n        if (groupToCompsMap[oldFieldGroup]) {\n          compList = groupToCompsMap[oldFieldGroup];\n        }\n        if (compList == null) {\n          compList = [];\n          groupToCompsMap[oldFieldGroup] = compList;\n        }\n        compList.push(comp);\n      }\n    }\n    ;\n    function addCompToFieldList(name, comp) {\n      if (compToFieldMap[name]) compToFieldMap[name].push(comp);else {\n        compToFieldMap[name] = [];\n        compToFieldMap[name].push(comp);\n      }\n    }\n    function addFieldToGroupList(mField) {\n      if (oldFieldGroup != null && !oldFieldGroup.equals("")) {\n        var fieldList = null;\n        var seqSuffix = Object.keys(groupToCompsMap).length;\n        var oldFg = oldFieldGroup + "_" + seqSuffix;\n        if (groupToCompsMap[oldFg]) {\n          fieldList = groupToCompsMap[oldFg];\n        }\n        if (fieldList == null) {\n          //add unique entry\n          fieldList = [];\n          groupToCompsMap[oldFieldGroup + "_" + (seqSuffix + 1)] = fieldList;\n        }\n        fieldList.push(mField);\n        if (!mField.getIsFieldgroupDefault()) {\n          fieldToCompParentMap[mField.getColumnName()].hide();\n        }\n      }\n    }\n    ;\n\n    /**\r\n     * Show hide field group\r\n     * \r\n     * @param {any} hideFGFrom\r\n     */\n    function addFGDisplayBtn(hideFGFrom) {\n      //addRow();\n      reset();\n      initCols(false, false, false, true);\n      $spndisplayFG.data(\'position\', hideFGFrom);\n      _curParent.append($spndisplayFG);\n      //hide fg group\n      addRow();\n      displayFiledGroup(hideFGFrom, true);\n    }\n\n    /**\r\n     * show hide Field Group based on position\r\n     * @param {any} position start seq no\r\n     * @param {any} hide true if hide\r\n     */\n    function displayFiledGroup(position, hide) {\n      var idx = 1;\n      for (var prop in groupToCompsMap) {\n        if (idx >= position) {\n          var ele = $table.find("[data-name=\'" + prop + "\'],[data-seqno=" + idx + "]");\n          if (ele && ele.length > 0) {\n            if (hide) {\n              ele.hide();\n              displayFieldGroupControls(prop, false, false);\n            } else {\n              ele.show();\n              displayFieldGroupControls(prop, true, ele.data("showmore") == \'N\');\n            }\n          }\n        }\n        idx++;\n      }\n    }\n    function onBtnFGClick() {\n      var state = $spndisplayFG.data("state");\n      var pos = $spndisplayFG.data("position");\n      if (state == "Y") {\n        //var scrollDiv = $table.parent();\n        displayFiledGroup(pos, true);\n        state = "N";\n        $spndisplayFG.text(VIS.Msg.getMsg("More"));\n      } else {\n        var sPos = $table.parent().scrollTop();\n        displayFiledGroup(pos, false);\n        state = "Y";\n        $spndisplayFG.text(VIS.Msg.getMsg("Less"));\n        $table.parent().scrollTop(sPos);\n      }\n      $spndisplayFG.data("state", state);\n    }\n    ;\n    this.addField = function (editor, mField) {\n      var insertRow = false;\n\n      /* Dont Add in control panel */\n      if (mField.getIsLink() && mField.getIsRightPaneLink()) {\n        allControls[++allControlCount] = editor;\n        //allControls.push(editor);\n        allLinkControls.push(editor);\n        return;\n      }\n      if (mField.getDisplayType() == VIS.DisplayType.Button && mField.getAD_Reference_Value_ID() == 435) {\n        var defaultValue = mField.getDefault(VIS.context, this.windowNo);\n        toolbarButtonList[defaultValue] = editor;\n      }\n      var label = VIS.VControlFactory.getLabel(mField);\n      if (label == null && editor == null) return;\n      var sameLine = mField.getIsSameLine();\n      if (addGroup(mField.getFieldGroup(), columnIndex)) {\n        sameLine = false;\n      }\n      if (sameLine) {\n        ++columnIndex;\n        if (columnIndex > 3) {\n          sameLine = false;\n          insertRow = true;\n          // columnIndex = 0;\n        } else if (columnIndex < 0) {\n          //addRow();\n          insertRow = true;\n          //columnIndex = 0;\n        }\n      } else {\n        //columnIndex = 0;\n        insertRow = true;\n        //addRow();\n      }\n      adjustLayout(mField, insertRow);\n      if (label != null) {\n        if (mField.getDescription().length > 0) {\n          //label.getControl().prop(\'title\', mField.getDescription());\n        }\n\n        //addToCompList(label);\n        //compToFieldMap[label.getName()] = mField;\n        addCompToFieldList(mField.getColumnName(), label);\n        allControls[++allControlCount] = label;\n      }\n      if (editor != null) {\n        var fieldVFormat = mField.getVFormat();\n        var formatErr = mField.getVFormatError();\n        switch (fieldVFormat) {\n          case \'\':\n            {\n              break;\n            }\n          default:\n            {\n              editor.getControl().on("focusout", function (e) {\n                var patt = new RegExp(fieldVFormat);\n                if (VIS.DisplayType.IsString(mField.getDisplayType())) {\n                  if ($(e.target).val() != null) {\n                    if ($(e.target).val().toString().trim().length > 0) {\n                      if (!patt.test($(e.target).val())) {\n                        if (!formatErr && formatErr.length > 0) {\n                          formatErr = VIS.Msg.getMsg(\'RegexFailed\') + ":" + mField.getHeader();\n                        }\n                        //Work DOne to set focus in field whose value does not match with regular expression.\n                        VIS.ADialogUI.warn(formatErr, "", function () {\n                          $(e.target).focus();\n                        });\n                      }\n                    }\n                  }\n                }\n              });\n            }\n        }\n        var count = editor.getBtnCount();\n\n        //addToCompList(editor);\n        // compToFieldMap[editor.getName()] = mField;\n        addCompToFieldList(mField.getColumnName(), editor);\n        allControls[++allControlCount] = editor;\n      }\n\n      //new design container\n      if (label != null || editor != null) {\n        var ctnr = _curParent;\n        insertCWrapper(label, editor, ctnr, mField);\n        fieldToCompParentMap[mField.getColumnName()] = ctnr;\n        addFieldToGroupList(mField);\n        colDescHelpList[mField.getColumnName()] = {\n          // \'desc\': mField.getDescription(),\n          \'help\': mField.getHelp()\n        };\n      }\n    };\n    this.flushLayout = function (hideFGFrom) {\n      addRow();\n      if (hideFGFrom > 0 && Object.keys(groupToCompsMap).length >= hideFGFrom) {\n        addFGDisplayBtn(hideFGFrom);\n      }\n    };\n    this.getRoot = function () {\n      return $table;\n    };\n    this.getComponents = function () {\n      return allControls;\n    };\n    this.getLinkComponents = function () {\n      return allLinkControls;\n    };\n    this.setEnabled = function (action, enable) {\n      if (Object.keys(toolbarButtonList).length > 0 && toolbarButtonList[action]) {\n        //toolbarButtonList[action].css({\n        //    "opacity": (enable ? 1 : .6),\n        //    "pointer-events": (enable ? "unset" : "none")\n        //});\n        toolbarButtonList[action].setReadOnly(!enable);\n      }\n    };\n    this.setVisible = function (colName, show) {\n      if (fieldToCompParentMap[colName]) show ? fieldToCompParentMap[colName].show() : fieldToCompParentMap[colName].hide();\n    };\n    this.dispose = function () {\n      $table.off("click", "span.vis-ev-ctrlinfowrap", onInfoClick);\n      $table.off();\n      colDescHelpList = {};\n      if (lastPopover) {\n        lastPopover.popover(\'dispose\');\n      }\n      lastPopover = null;\n      allLinkControls.length = 0;\n      allLinkControls = null;\n      while (allControls.length > 0) {\n        allControls.pop().dispose();\n      }\n      ;\n\n      // console.log(compToFieldMap);\n      for (var p in compToFieldMap) {\n        compToFieldMap[p] = null;\n        delete compToFieldMap[p];\n      }\n      compToFieldMap = null;\n      fieldToCompParentMap = {};\n      fieldToCompParentMap = null;\n\n      // console.log(groupToCompsMap);\n      for (var p1 in groupToCompsMap) {\n        groupToCompsMap[p1].length = 0;\n        groupToCompsMap[p1] = null;\n        delete groupToCompsMap[p];\n      }\n      groupToCompsMap = null;\n      allControlCount = null;\n      allControls = null;\n      $table.remove();\n      $table = null;\n      this.addField = null;\n      $spndisplayFG = null;\n      // addRow = null;\n      //addToCompList = null;\n    };\n  };\n\n  /**\r\n   * create wrapeer div and add conrols and label in parent div\r\n   * @param {any} label label to add\r\n   * @param {any} editor controls to add\r\n   * @param {any} parent current row/column div\r\n   * @param {any} mField model field \r\n   */\n  function insertCWrapper(label, editor, parent, mField) {\n    var customStyle = mField.getHtmlStyle();\n    var wraper = \'<div class="input-group vis-input-wrap">\';\n    //special case for textarea and image button strech height to 100%\n    if (editor && (editor.getControl()[0].tagName == \'TEXTAREA\' || editor.getControl().hasClass("vis-ev-col-img-ctrl"))) {\n      wraper = \'<div class="input-group vis-input-wrap vis-ev-full-h">\';\n    }\n    var ctrl = $(wraper);\n    if (!mField.getIsLink() && mField.getDisplayType() != VIS.DisplayType.Button) {\n      if (mField.getShowIcon() && (mField.getFontClass() != \'\' || mField.getImageName() != \'\')) {\n        var btns = [\'<div class="input-group-prepend"><span class="input-group-text vis-color-primary">\'];\n        if (mField.getFontClass() != \'\') btns.push(\'<i class="\' + mField.getFontClass() + \'"></i>\');else btns.push(\'<img src="\' + VIS.Application.contextUrl + \'Images/Thumb16x16/\' + mField.getImageName() + \'"></img>\');\n        btns.push(\'</span></div>\');\n        ctrl.append(btns.join(\' \'));\n      }\n    }\n    if (editor != null && customStyle != "") {\n      if (mField.getDisplayType() == VIS.DisplayType.ProgressBar) {\n        editor.setHtmlStyle(customStyle);\n      } else {\n        editor.getControl().attr(\'style\', customStyle);\n      }\n    }\n    var ctrlP = $("<div class=\'vis-control-wrap\'>");\n    if (editor && (editor.getControl()[0].tagName == \'INPUT\' || editor.getControl()[0].tagName == "SELECT" || editor.getControl()[0].tagName == \'TEXTAREA\' || editor.getControl()[0].className == \'vis-progressCtrlWrap\') && editor.getControl()[0].type != \'checkbox\') {\n      //editor.getControl().addClass("custom-select");\n      ctrlP.append(editor.getControl().attr("placeholder", " ").attr("data-placeholder", ""));\n      if (label != null) {\n        // && mField.getDisplayType() != VIS.DisplayType.TelePhone)\n        ctrlP.append(label.getControl());\n      }\n    } else {\n      if (label != null) ctrlP.append(label.getControl());\n      if (editor) ctrlP.append(editor.getControl());\n    }\n    if (mField.getDisplayType() != VIS.DisplayType.Label && !mField.getIsLink() && mField.getDisplayType() != VIS.DisplayType.TelePhone) {\n      // exclude Label display type\n      ctrlP.append("<span class=\'vis-ev-ctrlinfowrap\' data-colname=\'" + mField.getColumnName() + "\' title=\'" + mField.getDescription() + "\'  tabindex=\'-1\' data-toggle=\'popover\' data-trigger=\'focus\'>" + "<i class=\'vis vis-info\' aria-hidden=\'true\'></i></span\'>");\n    }\n\n    //if (editor && mField.getDisplayType() == VIS.DisplayType.ProgressBar) {\n    //    if (customStyle != "") {\n    //        editor.getProgressOutput().attr(\'style\', customStyle);\n    //    }\n    //    ctrlP.prepend(editor.getProgressOutput());\n    //}\n\n    ctrlP.append("<span class=\'vis-ev-col-msign\'><i class=\'fa fa-exclamation\' aria-hidden=\'true\'></span\'>");\n    ctrl.append(ctrlP);\n    if (editor) {\n      var count = editor.getBtnCount();\n      if (count > 0) {\n        editor.getControl().attr("data-hasBtn", " ");\n        var i = 0;\n        while (i < count) {\n          var btn = editor.getBtn(i);\n          if (btn != null) {\n            ctrl.append($(\'<div class="input-group-append">\').append(btn));\n          }\n          ++i;\n        }\n        count = -1;\n        i = 0;\n      }\n    }\n    parent.append(ctrl);\n\n    //Init Control\n    if (mField.getDisplayType() == VIS.DisplayType.TelePhone) {\n      editor.init();\n      ctrlP.css("z-index", "auto");\n    }\n  }\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/veditview.js?')},"./Areas/VIS/Scripts/F20/vgridview.js":()=>{eval(";\n(function (VIS, $) {\n  //****************************************************//\n  //**             VTable                            **//\n  //**************************************************//\n\n  function VTable() {\n    /*int Default */\n\n    this.grid = null;\n    this.id = null;\n    this.$container = null;\n    this.aPanel = null;\n    this.gc = null;\n    this.rendered = false;\n    this.onSelect = null;\n    this.onCellEditing = null;\n    this.onCellValueChanged = null;\n    this.onSort = null;\n    this.onEdit = null;\n    this.onAdd = null;\n    this.hyperLinkCell = null;\n    this.editColumnIndex = -1;\n    var clickCount = 0;\n    var self = this;\n    var editColumn = {\n      caption: \"\",\n      sortable: false,\n      render: function (record) {\n        return '<img src=\"' + VIS.Application.contextUrl + 'Areas/VIS/Images/base/pencil.png\"  />';\n      },\n      size: '25px'\n    };\n    function onGridCellClick(evt) {\n      try {\n        if (self.grid.columns[evt.column].columnName == self.hyperLinkCell) {\n          self.grid.select(Number(evt.recid));\n          var isCompositView = self.aPanel.getRoot().find('[name=' + evt.target + ']').closest('.vis-ad-w-p-center-inctab');\n          if (isCompositView.length > 0) {\n            if (isCompositView.find('.vis-multi').length > 0) {\n              isCompositView.find('.vis-multi').click();\n            } else {\n              isCompositView.find('.vis-edit').click();\n            }\n          } else {\n            // main view\n            //self.aPanel.getRoot().find(' .vis-multi:first').click();\n            self.aPanel.actionPerformedCallback(self.aPanel, \"Single\");\n            //self.aPanel.setLastView(\"Multi\");\n          }\n        } else if (self.grid.columns[evt.column].gridField.getDisplayType() == VIS.DisplayType.TelePhone) {\n          self.grid.select(Number(evt.recid));\n          if (window.VA048) {\n            //check for  module\n\n            var row = self.grid.get(evt.recid);\n            var val = row[self.grid.columns[evt.column].columnName.toLowerCase()];\n\n            // var val = self.getValue();\n            if (!val || val === \"\") return;\n            var numberinfo = {};\n            numberinfo[\"tonumbers\"] = val;\n            numberinfo[\"username\"] = \"\";\n            numberinfo[\"userimg\"] = \"\";\n            numberinfo[\"isconference\"] = false;\n            numberinfo[\"reftableid\"] = -1;\n            numberinfo[\"refrecordid\"] = -1;\n            numberinfo[\"windowno\"] = 0;\n            numberinfo[\"windowid\"] = 0;\n            numberinfo[\"tableid\"] = 0;\n            numberinfo[\"recordid\"] = 0;\n            numberinfo[\"withrecording\"] = false;\n            numberinfo[\"withcall\"] = true;\n            VA048.Apps.GetCallingInstance(true, numberinfo, false);\n          } else VIS.ADialog.info(\"ComModuleNotInstalled\");\n        } else if (self.grid.columns[evt.column].gridField.getDisplayType() == VIS.DisplayType.Button) {\n          self.grid.select(Number(evt.recid));\n          self.grid.columns[evt.column].editable.ctrl.getControl().click();\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    this.getEditColumn = function () {\n      return editColumn;\n    };\n    this.onClick = function (evt) {\n      clickCount++;\n      // console.log(evt);\n      if (this.readOnly) return;\n      self.skipEditing = false;\n      if (this.records.length > 0) {\n        if (this.records[self.mTab.getCurrentRow()].recid != evt.recid) {\n          self.skipEditing = true;\n        }\n      }\n      ;\n\n      //if (isNaN(evt)) {\n      //    if (evt.column === self.editColumnIndex) {\n      //        var recids = self.grid.getSelection();\n      //        if (recids.indexOf(parseInt(evt.recid)) > -1) {\n      //            if (self.onEdit) {\n      //                self.onEdit(evt.recid);\n      //            }\n      //        }\n      //        //evt.isCancelled = true;\n\n      //    }\n      // }\n      //else alert(evt);\n      //console.log(\" double click\");\n    };\n    this.onSingleClick = function (evt) {\n      //this.cRecid = evt.recid;\n      clickCount++;\n      singleClickTimer = setTimeout(function () {\n        if (clickCount === 1) {\n          clickCount = 0;\n          onGridCellClick(evt);\n        } else if (clickCount === 2) {\n          clearTimeout(singleClickTimer);\n          clickCount = 0;\n        }\n      }, 400);\n    };\n    this.onSelectLocal = function (evt) {\n      if (self.blockSelect) {\n        self.blockSelect = false;\n        return;\n      }\n      if (self.onSelect) {\n        self.onSelect(evt);\n      }\n    };\n    this.checkCellEditable = true;\n    function isCellEditable(column) {\n      if (self.readOnly) return false;\n      var col = self.grid.columns[column];\n      if (!self.mTab.getTableModel().getIsInserting() && col.readOnly) {\n        return false;\n      } else {\n        var field = col.gridField; // .Column.  CurrentCell.OwningColumn.Name);\n        if (field.getIsEditable(true, true))\n          //|| _headerClicked)\n          {\n            return true;\n          }\n      }\n      return false;\n    }\n    ;\n    this.onEditField = function (evt) {\n      if (self.skipEditing) {\n        self.skipEditing = false;\n        evt.isCancelled = true;\n        this.select({\n          recid: evt.recid\n        });\n        return;\n      }\n      evt.isCancelled = !isCellEditable(evt.column) || evt.originalEvent && evt.originalEvent.altKey;\n      //self.checkCellEditable = false; // if cell is checked for edit then mark flag to false to skip repeateable check\n      self.blockSelect = !evt.isCancelled;\n    };\n    this.onChange = function (evt) {\n      if (self.grid.columns[evt.column].editable.type == 'checkbox') {\n        // check box field on fire on edit field event\n        if (this.records.length > 0) {\n          if (this.records[self.mTab.getCurrentRow()].recid != evt.recid) {\n            evt.isCancelled = true;\n            //window.setTimeout(function(t){\n            //    t.onChange(evt);\n            //},1,this);\n            return;\n          }\n        }\n        ;\n        evt.isCancelled = !isCellEditable(evt.column);\n      }\n      //self.checkCellEditable = true;\n\n      evt.onComplete = function (event) {\n        // if (event.value_original != event.value_new) {\n        var evta = {\n          newValue: event.value_new,\n          propertyName: self.grid.columns[event.column].field\n        };\n        if (self.onCellValueChanged) {\n          self.onCellValueChanged(evta, self.grid.columns[event.column].editable.type == 'checkbox');\n        }\n        //  }\n      };\n    };\n    this.onUnSelect = function (evt) {\n      //var recids = self.grid.getSelection();\n      //if (recids.length == 1 && this.cRecid === recids[0]) {\n      //    evt.isCancelled = true;\n      //}\n    };\n    this.onRowAdd = function (evt) {\n      self.paintRow(evt.index);\n    };\n\n    /**\r\n     * cell render handler \r\n     * @param {any} rIndex row index\r\n     * @param {any} cIndex cell index\r\n     */\n    this.cellStyleRender = function (rIndex, cIndex) {\n      var col = self.grid.columns[cIndex];\n      if (!col.selfCellStyleRender && col.gridField && col.gridField.getStyleLogic() != '')\n        // get from property\n        {\n          return self.evaluateStyleLogic(rIndex, col.gridField.getStyleLogic());\n        }\n      return null;\n    };\n    this.paintRow = function (index) {\n      var rec = this.grid.records[index];\n      if (!checkRowEditable(index, 0)) {\n        rec.style = \"background-color:rgba(var(--v-c-secondary), .7)\";\n        return;\n      }\n      if (rec && rec.style) delete rec['style'];\n    };\n    function checkRowEditable(index, col) {\n      if (self.readOnly) return false;\n\n      //  IsActive Column always editable if no processed exists\n      if (col == self.indexActiveColumn && self.indexProcessedColumn == -1) return true;\n      //\tRow\n      if (!isRowEditable(index)) return false;\n      return true;\n    }\n    ;\n    function isRowEditable(row) {\n      if (self.readOnly || row < 0) return false;\n      //\tIf not Active - not editable\n      if (self.indexActiveColumn && self.indexActiveColumn > 0)\n        //\t&& m_TabNo != Find.s_TabNo)\n        {\n          //Object value = GetCellValue(this.Rows[row], _indexActiveColumn);\n          var value = self.grid.getCellValue(row, self.indexActiveColumn);\n          if (typeof value == \"boolean\") {\n            if (!value) return value;\n          } else if (!\"True\".equals(value))\n            // instanceof Boolean)\n            {\n              //if (!((Boolean)value).booleanValue())\n              return false;\n            } else if (\"N\".equals(value)) return false;\n        }\n      //\tIf Processed - not editable (Find always editable)\n      if (self.indexProcessedColumn && self.indexProcessedColumn > 0)\n        //\t&& m_TabNo != Find.s_TabNo)\n        {\n          //Object processed = GetCellValue(this.Rows[row], _indexProcessedColumn);\n          var processed = self.grid.getCellValue(row, self.indexProcessedColumn);\n          if (typeof processed == \"boolean\") {\n            if (processed) return false;\n          } else if (\"True\".equals(processed))\n            // instanceof Boolean)\n            {\n              return false;\n            } else if (\"Y\".equals(processed)) return false;\n        }\n      //\n      //int[] co = GetClientOrgRecordID(this.Rows[row]);\n      var co = getClientOrgRecordID(row);\n      var AD_Client_ID = co[0];\n      var AD_Org_ID = co[1];\n      var Record_ID = co[2];\n      return VIS.MRole.canUpdate(AD_Client_ID, AD_Org_ID, self.AD_Table_ID, Record_ID, false);\n    }\n    ;\n    function getClientOrgRecordID(row) {\n      var AD_Client_ID = -1;\n      if (typeof self.indexClientColumn != \"undefined\" && self.indexClientColumn != -1) {\n        var ii = self.grid.getCellValue(row, self.indexClientColumn); //].Value;\n        if (ii != null && ii !== \"\") AD_Client_ID = VIS.Utility.Util.getValueOfInt(ii);\n      }\n      var AD_Org_ID = 0;\n      if (typeof self.indexOrgColumn != \"undefined\" && self.indexOrgColumn != -1) {\n        var ii = self.grid.getCellValue(row, self.indexOrgColumn);\n        if (ii != null && ii !== \"\") AD_Org_ID = VIS.Utility.Util.getValueOfInt(ii);\n      }\n      var Record_ID = 0;\n      if (typeof self.indexKeyColumn != \"undefined\" && self.indexKeyColumn != -1) {\n        var ii = self.grid.getCellValue(row, self.indexKeyColumn);\n        if (ii != null && ii !== \"\") Record_ID = VIS.Utility.Util.getValueOfInt(ii);\n      }\n      return [AD_Client_ID, AD_Org_ID, Record_ID];\n    }\n    ;\n\n    //this.onToolBarClick = function (target, data) {\n    //    //self.$editBtn.img = \"icon-reload\";\n    //    if (target.startsWith(\"Edit\")) {\n    //        if (self.onEdit) {\n    //            self.onEdit();\n    //        }\n    //    }\n    //    else if (target.startsWith(\"Add\")) {\n    //        if (self.onAdd) {\n    //            self.onAdd();\n    //        }\n    //    }\n    //};\n\n    this.disposeComponenet = function () {\n      self = null;\n      editColumn = null;\n      this.getEditColumn = null;\n      this.onClick = null;\n    };\n  }\n  ;\n  VTable.prototype.ROW_ADD = 'A';\n  VTable.prototype.ROW_DELETE = 'D';\n  VTable.prototype.ROW_REFRESH = 'F';\n  VTable.prototype.ROW_UNDO = 'U';\n\n  /**\r\n   * Evaluate style logic\r\n   * @param {any} rIndex row Index\r\n   * @param {any} styleLogic logic string {expression [,]}\r\n   */\n  VTable.prototype.evaluateStyleLogic = function (rIndex, styleLogic) {\n    this.cellRowIndex = rIndex;\n    var arr = styleLogic.split(',');\n\n    //this.cellColumnName = col.field;\n    var ret = null;\n    for (var j = 0; j < arr.length; j++) {\n      var cArr = arr[j].split(\"?\");\n      if (cArr.length != 2) continue;\n      if (VIS.Evaluator.evaluateLogic(this, cArr[0])) {\n        ret = cArr[1];\n        break;\n      }\n    }\n    return ret;\n  };\n  VTable.prototype.setupGridTable = function (aPanel, grdFields, $container, name, mTab, gc) {\n    if (!mTab.getIsDisplayed(true)) return 0;\n    this.id = name;\n    this.aPanel = aPanel;\n    this.gc = gc;\n    this.$container = $container;\n    this.mTab = mTab;\n    this.AD_Table_ID = this.mTab.getAD_Table_ID();\n    var oColumns = [];\n    var mField = null;\n    var size = grdFields.length;\n    var visibleFields = 0;\n    var mFields = grdFields.slice(0);\n    mFields.sort(function (a, b) {\n      return a.getMRSeqNo() - b.getMRSeqNo();\n    });\n    var j = -1;\n    for (var i = 0; i < mFields.length; i++) {\n      mField = mFields[i];\n      if (mField == null) continue;\n      var columnName = mField.getColumnName();\n      var displayType = mField.getDisplayType();\n\n      //if (VIS.DisplayType.ID == displayType || columnName == \"Created\" || columnName == \"CreatedBy\"\n      //                                    || columnName == \"Updated\" || columnName == \"UpdatedBy\") {\n      //    if (!mField.getIsDisplayed()) {\n      //        continue;\n      //    }\n      //}\n\n      ++j;\n      if (mField.getIsKey()) this.indexKeyColumn = j;else if (columnName.equals(\"IsActive\")) this.indexActiveColumn = j;else if (columnName.equals(\"Processed\")) this.indexProcessedColumn = j;else if (columnName.equals(\"AD_Client_ID\")) this.indexClientColumn = j;else if (columnName.equals(\"AD_Org_ID\")) this.indexOrgColumn = j;\n      var isDisplayed = mField.getIsDisplayedMR ? mField.getIsDisplayedMR() : mField.getIsDisplayed();\n      var mandatory = mField.getIsMandatory(false); //  no context check\n      var readOnly = mField.getIsReadOnly();\n      var updateable = mField.getIsEditable(false); //  no context check\n      //int WindowNo = mField.getWindowNo();\n\n      //  Not a Field\n      if (mField.getIsHeading()) continue;\n      var oColumn = {\n        resizable: true,\n        selfCellStyleRender: false /* self evalauate Style conditions*/\n      };\n      oColumn.gridField = mField;\n      if (readOnly || !updateable) {\n        oColumn.readOnly = true; //\n      }\n      oColumn.caption = mField.getHeader();\n      if (mandatory) {\n        oColumn.caption += '<sup style=\"color:red;font-size: 11px;top: 0;\">*</sup>';\n      }\n      oColumn.field = columnName.toLowerCase();\n      oColumn.hidden = !isDisplayed;\n      var columnWidth = oColumn.gridField.getColumnWidth();\n      if (columnWidth) {\n        oColumn.size = columnWidth + 'px';\n      } else {\n        oColumn.size = '100px';\n      }\n      if (mField.getIsIdentifier() && mField.getDisplayType() != VIS.DisplayType.Image && this.hyperLinkCell == null) {\n        if (oColumn.hidden == false) {\n          this.hyperLinkCell = columnName;\n          oColumn.style = 'text-decoration:underline; color:rgba(var(--v-c-primary), 1) !important; cursor:pointer';\n        }\n      } else if (mField.getDisplayType() == VIS.DisplayType.TelePhone) {\n        if (oColumn.hidden == false) oColumn.style = 'text-decoration:underline; color:rgba(var(--v-c-primary), 1) !important; ';\n      }\n      if (displayType == VIS.DisplayType.Amount) {\n        oColumn.sortable = true;\n        oColumn.customFormat = VIS.DisplayType.GetNumberFormat(displayType);\n        oColumn.render = function (record, index, colIndex) {\n          var f = oColumns[colIndex].field;\n          var val = record[f];\n          if (!val) {\n            val = 0; // show zero if null\n          }\n          //if (record.changes && typeof record.changes[f] != 'undefined') val = record.changes[f];\n          val = parseFloat(val).toLocaleString(undefined, {\n            'minimumFractionDigits': oColumns[colIndex].customFormat.getMinFractionDigit(),\n            'maximumFractionDigits': oColumns[colIndex].customFormat.getMaxFractionDigit()\n          });\n          return '<div data-type=\"int\">' + val + '</div>';\n        };\n        //oColumn.caption = 'class=\"vis-control-wrap-int-amount\"';\n      } else if (displayType == VIS.DisplayType.Integer) {\n        oColumn.sortable = true;\n        oColumn.customFormat = VIS.DisplayType.GetNumberFormat(displayType);\n        oColumn.render = function (record, index, colIndex) {\n          var f = oColumns[colIndex].field;\n          var val = record[f];\n          if (!val) return;\n\n          //if (record.changes && typeof record.changes[f] != 'undefined') val = record.changes[f];\n          //val = parseFloat(val).toLocaleString(undefined, {\n          //    'minimumFractionDigits': oColumns[colIndex].customFormat.getMinFractionDigit(),\n          //    'maximumFractionDigits': oColumns[colIndex].customFormat.getMaxFractionDigit()\n          //});\n          return '<div data-type=\"int\">' + val + '</div>';\n        };\n        //oColumn.caption = 'class=\"vis-control-wrap-int-amount\"';\n      } else if (displayType == VIS.DisplayType.ProgressBar) {\n        oColumn.sortable = true;\n        oColumn.selfCellStyleRender = true;\n        oColumn.render = function (record, index, colIndex) {\n          var f = oColumns[colIndex].field;\n          var gField = oColumns[colIndex].gridField;\n          var style = '';\n          if (gField.getStyleLogic() != '') style = self.evaluateStyleLogic(index, gField.getStyleLogic());\n          if (!style) style = '';\n          var val = record[f];\n          //var maxVal = gField.getMaxValue();\n          //var minVal = gField.getMinValue();\n          if (record.changes && typeof record.changes[f] != 'undefined') {\n            val = record.changes[f];\n          }\n          //return '<input id=\"rng' + index + '\" type=\"range\" min=\"' + minVal + '\" max=\"' + maxVal + '\" disabled=\"disabled\" value=\"' + val + '\" /><div style=\"position: absolute\"><output class=\"vis-grid_progress_output\"> ' + val+'</output></div>';\n\n          return '<div class=\"vis-progress-gridbar\" style=\"' + style + '\">' + '<div class=\"vis-progress-percent-bar\" style = \"width:' + (val || 0) + '%;' + style + '\" ></div>' + '<div class=\"vis-progress-gridoutput\" > ' + (val || '') + '</div></div >';\n        };\n      } else if (VIS.DisplayType.IsNumeric(displayType)) {\n        oColumn.sortable = true;\n        oColumn.customFormat = VIS.DisplayType.GetNumberFormat(displayType);\n        oColumn.render = function (record, index, colIndex) {\n          var f = oColumns[colIndex].field;\n          var val = record[f];\n          if (!val) return;\n          //if (record.changes && typeof record.changes[f] != 'undefined') val = record.changes[f];\n          // return  Globalize.format(Number(oColumns[colIndex].customFormat.GetFormatedValue(val)));\n          val = parseFloat(val).toLocaleString(undefined, {\n            'minimumFractionDigits': oColumns[colIndex].customFormat.getMinFractionDigit(),\n            'maximumFractionDigits': oColumns[colIndex].customFormat.getMaxFractionDigit()\n          });\n          return '<div data-type=\"int\">' + val + '</div>';\n        };\n        // oColumn.style = 'text-align: right';\n        // oColumn.caption = 'class=\"vis-control-wrap-int-amount\"';\n      }\n      //\tYesNo\n      else if (displayType == VIS.DisplayType.YesNo) {\n        oColumn.sortable = true;\n        var lCol = columnName.toLowerCase();\n        if (oColumn.gridField.getIsSwitch()) {\n          oColumn.render = \"switch\";\n          //oColumn.render = function (record, index, colIndex) {\n\n          //    var chk = (record[oColumns[colIndex].field]) ? \"checked\" : \"\";\n          //    //console.log(chk);\n          //   // return '<input type=\"checkbox\" ' + chk + ' onclick=\"var obj = w2ui[\\'' + name + '\\'];     obj.editChange.call(obj, this, ' + index + ', ' + colIndex +', event)\" class=\"vis-switch\"><i for=\"switch\" onclick=\"$(this).prev().click();\"   class=\"vis-switchSlider\">Toggle</i></div>';\n          //}\n        }\n        oColumn.editable = {\n          type: 'checkbox'\n        };\n      }\n      //\tString (clear/password)\n      else if (displayType == VIS.DisplayType.String || displayType == VIS.DisplayType.Text || displayType == VIS.DisplayType.TextLong || displayType == VIS.DisplayType.Memo) {\n        oColumn.sortable = true;\n        //if (oColumn.hidden == false && (this.hyperLinkCell[name] == \"undefined\" || this.hyperLinkCell[name] == null)) {\n        //    if (columnName.toLowerCase() == \"value\" || columnName.toLowerCase() == \"name\" || columnName.toLowerCase() == \"documentno\") {\n        //        this.hyperLinkCell[name] = columnName;\n        //        oColumn.style = 'text-decoration:underline; color:rgba(var(--v-c-primary), 1) !important; cursor:pointer';\n        //    }\n        //}\n\n        if (mField.getIsEncryptedField()) {\n          oColumn.render = function (record, index, colIndex) {\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            var val = record[oColumns[colIndex].field];\n            if (val || val === 0) return val.replace(/\\w|\\W/g, \"*\");\n            return \"\";\n          };\n        } else if (mField.getObscureType()) {\n          oColumn.render = function (record, index, colIndex) {\n            var val = record[oColumns[colIndex].field];\n            if (val || val === 0) return VIS.Env.getObscureValue(oColumns[colIndex].gridField.getObscureType(), val);\n            return \"\";\n          };\n        } else {\n          oColumn.render = function (record, index, colIndex) {\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            if (val || val == 0) {\n              //if (d.toString().indexOf('<') > -1)\n              //    return \"\";\n              val = w2utils.encodeTags(val);\n              return val;\n            }\n            return \"\";\n          };\n        }\n      } else if (VIS.DisplayType.IsLookup(displayType) || displayType == VIS.DisplayType.ID) {\n        oColumn.sortable = true;\n        oColumn.lookup = mField.getLookup();\n        if (isDisplayed) {\n          oColumn.render = function (record, index, colIndex) {\n            var l = oColumns[colIndex].lookup;\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            var customStyle = oColumns[colIndex].gridField.getGridImageStyle();\n            var winNo = oColumns[colIndex].gridField.getWindowNo();\n            oColumns[colIndex]['customClass'] = '';\n            var customClass;\n            if (customStyle) {\n              customClass = oColumns[colIndex]['customClass'];\n              if (!customClass) {\n                oColumns[colIndex]['customClass'] = 'vis-grd-custom-' + oColumns[colIndex].gridField.getAD_Column_ID() + winNo;\n                customClass = '.vis-grd-custom-' + oColumns[colIndex].gridField.getAD_Column_ID() + winNo + \"{\" + customStyle + \"}\";\n                var styleTag = document.createElement('style');\n                styleTag.type = 'text/css';\n                styleTag.innerHTML = customClass;\n                $($('head')[0]).append(styleTag);\n              }\n            }\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              //val = record.changes[f];\n            }\n            var d;\n            if (l) {\n              // In case of multisearch, show all names separated by commas in gridview.\n              if (l.displayType == VIS.DisplayType.MultiKey) {\n                if (val) {\n                  var arr = val.toString().split(',');\n                  var sb = \"\";\n                  for (var i = 0, j = arr.length; i < j; i++) {\n                    var valu = arr[i];\n                    if (!isNaN(valu)) {\n                      valu = Number(valu);\n                    }\n                    if (sb.length == 0) {\n                      sb += l.getDisplay(valu);\n                      continue;\n                    }\n                    sb += \", \" + l.getDisplay(valu);\n                  }\n                  d = sb;\n                } else {\n                  d = l.getDisplay(val, true, true);\n                }\n              } else {\n                d = l.getDisplay(val, true, true);\n              }\n              //if (d.startsWith(\"<\"))\n              //  d = l.getDisplay(nd, false);\n              //d = w2utils.encodeTags(d);\n            }\n            var strDiv = \"\";\n            if (l && VIS.DisplayType.List == l.displayType) {\n              var hue = Math.floor(Math.random() * (360 - 0)) + 0;\n              var v = Math.floor(Math.random() * (75 - 60 + 1)) + 60; //Math.floor(Math.random() * 16) + 75;\n              var pastel = 'hsl(' + hue + ', 100%,' + v + '%)';\n              var lType = l.getLovIconType(val, true);\n              var listIcon = l.getLOVIconElement(val, true);\n              var highlightChar = '';\n              if (!listIcon) {\n                //highlightChar = d.substring(0, 1);\n\n                if (highlightChar.length == 0) var txt = d.trim().split(' ');\n                highlightChar = txt[0].substring(0, 1).toUpper();\n                if (txt.length > 1) {\n                  highlightChar += txt[txt.length - 1].substring(0, 1).toUpper();\n                } else {\n                  highlightChar = txt[0].substring(0, 2).toUpper();\n                }\n              }\n              // If both , then show text and image\n              if (lType == \"B\") {\n                strDiv = \"<div class='vis-grid-td-icon-grp'>\";\n                if (listIcon) {\n                  strDiv += \"<div class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon'> \" + listIcon + \"</div> \";\n                } else {\n                  strDiv += \"<div style='background-color:\" + pastel + \"' class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon'><span>\" + highlightChar + \"</span></div>\";\n                }\n                strDiv += \"<span> \" + d + \"</span ><div>\";\n              }\n              // if Text, then show text only\n              else if (lType == \"T\") {\n                return d;\n              }\n              //Show icon only\n              else if (lType == \"I\") {\n                strDiv = \"<div class='vis-grid-td-icon-grp' style='Justify-Content:center'>\";\n                if (listIcon) {\n                  strDiv += \"<div class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon'> \" + listIcon + \"</div> \";\n                } else {\n                  strDiv += \"<div style='background-color:\" + pastel + \"' class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon'><span>\" + highlightChar + \"</span></div>\";\n                }\n                strDiv += \"<div>\";\n              }\n            } else\n              // Based on sequence of image in idenitifer, perform logic and display image with text\n              if (l && l.gethasImageIdentifier()) {\n                var imgIndex = d.indexOf(\"Images/\");\n                if (imgIndex == -1) return d;\n\n                //Find Image from Identifier string \n                var img = d.substring(imgIndex + 7, d.lastIndexOf(\"^^\"));\n                img = VIS.Application.contextUrl + \"Images/Thumb32x32/\" + img;\n\n                //Replace Image string with ^^^, so that ^^^ can be used to split Rest of identifer value\n                d = d.replace(\"^^\" + d.substring(imgIndex, d.lastIndexOf(\"^^\") + 2), \"^^^\");\n                if (d.indexOf(\"Images/\") > -1) d = d.replace(d.substring(imgIndex, d.lastIndexOf(\"^^\") + 2), \"^^^\");\n                d = d.split(\"^^^\");\n\n                //Start HTMl string to be rendered inside Cell\n                strDiv = \"<div class='vis-grid-td-icon-grp'>\";\n                var highlightChar = '';\n\n                //Now 'd' may contains identifier values to be displayed before and after image\n                for (var c = 0; c < d.length; c++) {\n                  //random pastel color generator \n                  var hue = Math.floor(Math.random() * (360 - 0)) + 0;\n                  var v = Math.floor(Math.random() * (75 - 60 + 1)) + 60; //Math.floor(Math.random() * 16) + 75;\n                  var pastel = 'hsl(' + hue + ', 100%,' + v + '%)';\n                  if (d[c].trim().length > 0) {\n                    //If highlightChar is not found, then get it from first item encounterd.\n                    if (highlightChar.length == 0) var txt = d[c].trim().split(' ');\n                    highlightChar = txt[0].substring(0, 1).toUpper();\n                    if (txt.length > 1) {\n                      highlightChar += txt[txt.length - 1].substring(0, 1).toUpper();\n                    } else {\n                      highlightChar = txt[0].substring(0, 2).toUpper();\n                    }\n                    //If image contains nothing.png that means image not found in identfier and \n                    //we will Display highlightChar\n                    if (c > 0 && img.indexOf(\"nothing.png\") > -1 && highlightChar.length > 0) {\n                      strDiv += \"<div style='background-color:\" + pastel + \"' class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon' ><span>\" + highlightChar + \"</span></div>\";\n                    }\n                    strDiv += \"<span>\" + d[c] + \"</span>\";\n                  } else if (img.indexOf(\"nothing.png\") > -1 && highlightChar.length > 0) {\n                    strDiv += \"<div style='background-color:\" + pastel + \"' class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon' ><span>\" + highlightChar + \"</span></div>\";\n                  }\n\n                  //If image found, then display that image.\n                  if (c == 0 || img.indexOf(\"nothing.png\") > -1) {\n                    if (img.indexOf(\"nothing.png\") == -1) {\n                      strDiv += \"<div style='background-color:\" + pastel + \"' class='\" + oColumns[colIndex]['customClass'] + \" vis-grid-row-td-icon'\" + \" > <img src='\" + img + \"'></div > \";\n                      // \"' onerror='this.style.display=\\\"none\\\"' ></img></div > \";\n                    }\n                  }\n                }\n                +\"</div > \";\n              }\n            if (strDiv == \"\") return d;\n            return strDiv;\n            //return '<span>' + d + '</span>';\n          };\n        }\n      }\n      //Date /////////\n      else if (VIS.DisplayType.IsDate(displayType)) {\n        oColumn.sortable = true;\n        oColumn.displayType = displayType;\n\n        //oColumn.render = 'date';\n        oColumn.render = function (record, index, colIndex) {\n          var col = oColumns[colIndex];\n          var f = oColumns[colIndex].field;\n          var val = record[f];\n          if (record.changes && typeof record.changes[f] != 'undefined') {\n            val = record.changes[f];\n          }\n          if (val) {\n            if (col.displayType == VIS.DisplayType.Date) {\n              var d = new Date(val);\n              d.setMinutes(d.getTimezoneOffset() + d.getMinutes());\n              //val = Globalize.format(d, 'd');\n              val = d.toLocaleDateString();\n            } else if (col.displayType == VIS.DisplayType.DateTime) val = new Date(val).toLocaleString();\n            //val = Globalize.format(new Date(val), 'f');\n            else val = new Date(val).toTimeString();\n            //val = Globalize.format(new Date(val), 't');\n          } else val = \"\";\n          return val;\n        };\n      } else if (displayType == VIS.DisplayType.Location || displayType == VIS.DisplayType.Locator) {\n        oColumn.sortable = true;\n        oColumn.lookup = mField.getLookup();\n        if (isDisplayed) {\n          oColumn.render = function (record, index, colIndex) {\n            var l = oColumns[colIndex].lookup;\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            if (l) {\n              val = l.getDisplay(val, true);\n              val = w2utils.encodeTags(val);\n            }\n            return val;\n          };\n        }\n      } else if (displayType == VIS.DisplayType.AmtDimension) {\n        oColumn.sortable = true;\n        oColumn.lookup = mField.getLookup();\n        if (isDisplayed) {\n          oColumn.render = function (record, index, colIndex) {\n            var l = oColumns[colIndex].lookup;\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            if (l) {\n              val = l.getDisplay(val, true);\n              val = w2utils.encodeTags(val);\n            }\n            return val;\n          };\n        }\n      } else if (displayType == VIS.DisplayType.ProductContainer) {\n        oColumn.sortable = true;\n        oColumn.lookup = mField.getLookup();\n        if (isDisplayed) {\n          oColumn.render = function (record, index, colIndex) {\n            var l = oColumns[colIndex].lookup;\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            if (l) {\n              val = l.getDisplay(val, true);\n              val = w2utils.encodeTags(val);\n            }\n            return val;\n          };\n        }\n      } else if (displayType == VIS.DisplayType.Account || displayType == VIS.DisplayType.PAttribute) {\n        oColumn.sortable = true;\n        oColumn.lookup = mField.getLookup();\n        if (isDisplayed) {\n          oColumn.render = function (record, index, colIndex) {\n            var l = oColumns[colIndex].lookup;\n            var f = oColumns[colIndex].field;\n            var val = record[f];\n            if (record.changes && typeof record.changes[f] != 'undefined') {\n              val = record.changes[f];\n            }\n            if (l) {\n              val = l.getDisplay(val, true);\n              val = w2utils.encodeTags(val);\n            }\n            return val;\n          };\n        }\n      } else if (displayType == VIS.DisplayType.PAttribute) {\n        oColumn.sortable = true;\n        oColumn.render = 'int';\n      } else if (displayType == VIS.DisplayType.Button) {\n        oColumn.sortable = true;\n        oColumn.render = function (record, index, colIndex) {\n          var f = oColumns[colIndex].field;\n          var val = record[f];\n          return '<span style=\"cursor:pointer\" class=\"vis-ev-col-linkbutton\">' + oColumns[colIndex].gridField.getHeader() + '</span>';\n        };\n      } else if (displayType == VIS.DisplayType.Image) {\n        oColumn.sortable = true;\n        oColumn.render = function (record, index, colIndex) {\n          var f = oColumns[colIndex].field;\n          var customStyle = oColumns[colIndex].gridField.getGridImageStyle();\n          var winNo = oColumns[colIndex].gridField.getWindowNo();\n          var customClass;\n          if (customStyle) {\n            customClass = oColumns[colIndex]['customClass'];\n            if (!customClass) {\n              oColumns[colIndex]['customClass'] = 'vis-grd-custom-' + oColumns[colIndex].gridField.getAD_Column_ID() + winNo;\n              customClass = '.vis-grd-custom-' + oColumns[colIndex].gridField.getAD_Column_ID() + winNo + \"{\" + customStyle + \"}\";\n              var styleTag = document.createElement('style');\n              styleTag.type = 'text/css';\n              styleTag.innerHTML = customClass;\n              $($('head')[0]).append(styleTag);\n            }\n          }\n          var val = record[\"imgurlcolumn\" + f];\n          if (record.changes && typeof record.changes[f] != 'undefined') {\n            val = record.changes[f];\n          }\n          if (!val) {\n            val = '<div class=\"vis-grid-row-td-icon-center\"><div class=\"vis-grid-row-td-icon vis-grid-defualtImage\"><i class=\"fa fa-camera\"></div></div>';\n            return val;\n          }\n          //return VIS.Msg.getElement1('AD_Image_ID') + '-' + val;\n          val = val.toString().replace(\"Images/\", \"Images/Thumb32x32/\");\n          //var img = $('<img>').attr(\"src\", VIS.Application.contextUrl + val);\n          var img;\n          if (customClass) {\n            img = '<div class=\"vis-grid-row-td-icon-center\"><div class=\"' + oColumns[colIndex]['customClass'] + ' vis-grid-row-td-icon\"><img src=\"' + VIS.Application.contextUrl + val + '\"></div></div>';\n          } else {\n            img = '<div class=\"vis-grid-row-td-icon-center\"><div class=\"vis-grid-row-td-icon\"><img src=\"' + VIS.Application.contextUrl + val + '\"></div></div>';\n          }\n          return img;\n        };\n      } else if (VIS.DisplayType.IsLOB(displayType)) {\n        oColumn.sortable = true;\n        oColumn.render = function (record, index, colIndex) {\n          var f = oColumns[colIndex].field;\n          var val = record[f];\n          if (record.changes && typeof record.changes[f] != 'undefined') {\n            val = record.changes[f];\n          }\n          if (!val) {\n            val = \"\";\n          }\n          return \"#\" + val.toString().length;\n        };\n      } else if (VIS.DisplayType.TelePhone == displayType) {\n        oColumn.sortable = true;\n        oColumn.render = function (record, index, colIndex) {\n          var f = oColumns[colIndex].field;\n          var val = record[f];\n          if (record.changes && typeof record.changes[f] != 'undefined') {\n            val = record.changes[f];\n          }\n          if (val) {\n            return VIS.VTelePhoneInstance.getHtml(val, true);\n          }\n          return \"\";\n        };\n      } else if (VIS.DisplayType.Color == displayType) {\n        oColumn.sortable = true;\n        oColumn.render = function (record, index, colIndex) {\n          var f = oColumns[colIndex].field;\n          var val = record[f];\n          if (record.changes && typeof record.changes[f] != 'undefined') {\n            val = record.changes[f];\n          }\n          if (val) {\n            return '<div style=\"background-color:' + val + ';\" ></div>';\n          }\n          return \"\";\n        };\n      } else {\n        //all text Type Columns\n\n        oColumn.sortable = true;\n        oColumn.render = function (record, index, colIndex) {\n          var f = oColumns[colIndex].field;\n          var val = record[f];\n          if (record.changes && typeof record.changes[f] != 'undefined') {\n            val = record.changes[f];\n          }\n          if (val || val == 0) {\n            //if (d.toString().indexOf('<') > -1)\n            //    return \"\";\n            val = w2utils.encodeTags(val);\n            return val;\n          }\n          return \"\";\n        };\n      }\n      if (mField.getHtmlStyle() != \"\" && displayType != VIS.DisplayType.Button) {\n        oColumn.style = mField.getHtmlStyle();\n      }\n      if (!oColumn.hidden) {\n        visibleFields++;\n      }\n      oColumns.push(oColumn);\n      oColumn.columnName = columnName;\n      var iControl = VIS.VControlFactory.getControl(mTab, mField, false, false, false);\n      iControl.setReadOnly(false);\n      if (!oColumn.editable) {\n        oColumn.editable = {\n          type: 'custom',\n          ctrl: iControl\n        };\n      }\n      iControl.addVetoableChangeListener(gc);\n      if (iControl instanceof VIS.Controls.VButton) {\n        iControl.addActionListner(aPanel);\n      }\n    }\n    if (visibleFields > 0) {\n      var w = Math.floor(100 / visibleFields);\n      for (var p in oColumns) {\n        if (oColumns[p].hidden) {} else {\n          if (!oColumns[p].size < 0) {\n            oColumns[p].size = w + '%';\n            //oColumns[p].size = 150+'px';\n            //oColumns[p].size = w + '%';\n            oColumns[p].min = 100;\n          }\n          //if (oColumns[p].gridField.getIsSwitch()) {\n          //    oColumns[p].editable = { type: 'checkbox' };\n          //}\n\n          if (this.hyperLinkCell == null) {\n            this.hyperLinkCell = oColumns[p].columnName;\n            oColumns[p].style = 'text-decoration:underline; color:rgba(var(--v-c-primary), 1) !important; cursor:pointer';\n          }\n        }\n      }\n    }\n\n    //oColumns[oColumns.length - 1].size = \"100%\";\n    this.grid = $().w2grid({\n      name: name,\n      autoLoad: false,\n      columns: oColumns,\n      records: [],\n      show: {\n        toolbar: false,\n        // indicates if toolbar is v isible\n        columnHeaders: true,\n        // indicates if columns is visible\n        lineNumbers: false,\n        // indicates if line numbers column is visible\n        selectColumn: true,\n        // indicates if select column is visible\n        toolbarReload: false,\n        // indicates if toolbar reload button is visible\n        toolbarColumns: true,\n        // indicates if toolbar columns button is visible\n        toolbarSearch: false,\n        // indicates if toolbar search controls are visible\n        toolbarAdd: false,\n        // indicates if toolbar add new button is visible\n        toolbarDelete: false,\n        // indicates if toolbar delete button is visible\n        toolbarSave: false,\n        // indicates if toolbar save button is visible\n        selectionBorder: false,\n        // display border arround selection (for selectType = 'cell')\n        recordTitles: false // indicates if to define titles for records\n      },\n      //toolbar: {\n      //    items: [\n      //        //{ type: 'spacer' },\n      //        { type: 'break' },\n      //        //{ type: 'button', id: 'Add_' + name,  img: 'icon-Add' },\n      //        { type: 'button', id: 'Edit_' + name, img: 'icon-edit' },\n      //        { type: 'break' },\n      //        { type: 'button', id: 'Add_' + name, img: 'icon-add' }\n      //    ],\n      //    onClick: this.onToolBarClick\n      //    //{\n\n      //    //    console.log(data);\n      //    //}\n      //},\n      recordHeight: 41,\n      onSelect: this.onSelectLocal,\n      onUnselect: this.onUnSelect,\n      onSort: this.onSort,\n      onClick: this.onSingleClick,\n      onDblClick: this.onClick,\n      onEditField: this.onEditField,\n      onChange: this.onChange,\n      onRowAdd: this.onRowAdd,\n      onCellStyleRender: this.cellStyleRender\n      //onResize: function () { alert('resize') }\n    });\n    var self = this;\n\n    //this.grid.selectType = 'cell';;\n    return size;\n  };\n\n  /**\r\n   * return current cell-row value as string\r\n   * called form Evaluator class\r\n   * @param {any} field name of field /column \r\n   */\n  VTable.prototype.getValueAsString = function (field) {\n    var record = this.grid.records[this.cellRowIndex];\n    var data = this.grid.parseField(record, field.toLowerCase());\n    if (this.mTab && VIS.DisplayType.YesNo == this.mTab.getField(field).getDisplayType()) {\n      data = data ? \"Y\" : \"N\";\n    }\n    if (!data) return '';\n    return data.toString();\n  };\n  VTable.prototype.get = function (recid, isIndex) {\n    return this.grid.get(recid, isIndex);\n  };\n  VTable.prototype.activate = function (multiTabView) {\n    if (this.grid && !this.rendred) {\n      this.grid.fixedBody = true;\n      if (multiTabView) this.grid.fixedBody = false;\n      this.$container.w2render(this.grid['name']);\n      this.rendred = true;\n    } else {\n      if (this.grid.fixedBody !== !multiTabView) {\n        this.grid.fixedBody = !multiTabView;\n        if (this.grid.fixedBody) {\n          this.$container.height(this.$container.parent().height());\n        }\n      }\n      //this.grid.fixedBody = !multiTabView;\n      //window.setTimeout(function (tht) {\n      //    tht.grid.resize();\n      //   // that.grid.reload();\n      //},2000, this);\n      //this.grid.refresh();\n      //this.grid.resize();\n    }\n  };\n  VTable.prototype.setReadOnly = function (ro) {\n    this.readOnly = ro;\n  };\n  VTable.prototype.getGrid = function () {\n    return this.grid;\n  };\n  VTable.prototype.select = function (recid) {\n    var selIds = this.grid.getSelection();\n    if (selIds.indexOf(recid) != -1) return;\n    if (selIds.length == 1) {\n      this.grid.unselect(selIds[0]);\n    } else if (selIds.length > 1) {\n      while (selIds.length > 0) {\n        this.grid.unselect(selIds.pop());\n      }\n    }\n    return this.grid.select(recid);\n  };\n  VTable.prototype.add = function (records) {\n    this.grid.add(records);\n  };\n  VTable.prototype.clear = function () {\n    this.grid.clear(true);\n    this.grid.reset();\n  };\n  VTable.prototype.refresh = function () {\n    this.grid.refresh();\n    console.log(\"refresh\");\n  };\n  VTable.prototype.resize = function () {\n    this.grid.resize(); //\n  };\n  VTable.prototype.setRow = function (record) {\n    if (isNaN(record)) {\n      this.grid.set(record.recid, record);\n    } else {\n      this.grid.set(record);\n    }\n  };\n  VTable.prototype.refreshRow = function (row, isRecid) {\n    if (this.grid.records.length < 1) return;\n    var sel = this.mTab.getCurrentRow();\n    if (sel < 0) {\n      return;\n    }\n    if (typeof row != 'undefined') sel = row;\n    this.paintRow(isRecid ? this.grid.get(row, true) : sel);\n    this.grid.clearRowChanges(isRecid ? row : this.grid.records[sel].recid);\n  };\n  VTable.prototype.refreshCells = function () {\n    if (this.grid.records.length < 1) return;\n    var sel = this.mTab.getCurrentRow();\n    this.paintRow(sel);\n    this.grid.refreshRow(this.grid.records[sel].recid);\n  };\n  VTable.prototype.refreshUndo = function () {\n    if (this.grid.records.length < 1) return;\n    var sel = this.mTab.getCurrentRow();\n    this.grid.clearRowChanges(this.grid.records[sel].recid);\n    this.paintRow(sel);\n    this.grid.refreshRow(this.grid.records[sel].recid);\n  };\n  VTable.prototype.getSelection = function (retIndex) {\n    return this.grid.getSelection(retIndex);\n  };\n  VTable.prototype.getSelectedRows = function () {\n    var indexs = this.grid.getSelection(true);\n    var rows = [];\n    for (var i = 0, j = indexs.length; i < j; i++) {\n      rows.push(this.grid.records[indexs[i]]);\n    }\n    return rows;\n  };\n  VTable.prototype.getColumnNames = function () {\n    var cols = this.grid.columns;\n    var colObj = {};\n    for (var i = 0, j = cols.length; i < j; i++) {\n      colObj[cols[i].columnName] = cols[i].caption;\n    }\n    return colObj;\n  };\n  VTable.prototype.scrollInView = function (index) {\n    this.grid.scrollIntoView(index);\n  };\n\n  //VTable.prototype.setDefaultFocusField = function (field) {\n  //    this.defaultFocusField = field;\n  //};\n\n  VTable.prototype.tableModelChanged = function (action, args, actionIndexOrId) {\n    this.blockSelect = true;\n    if (action === VIS.VTable.prototype.ROW_REFRESH) {\n      this.setRow(args); //record \n      this.refreshRow(args.recid, true);\n    } else {\n      var id = null;\n      if (action === VIS.VTable.prototype.ROW_UNDO) {\n        this.grid.unselect(args);\n        this.grid.remove(args);\n        if (actionIndexOrId >= this.grid.records.length - 1 && this.grid.records.length > 0) {\n          this.blockSelect = false; //fire select event to update single layout\n          id = this.grid.records[this.grid.records.length - 1].recid;\n        } else if (actionIndexOrId < this.grid.records.length) {\n          id = this.grid.records[actionIndexOrId].recid; // just select grid row\n        }\n      } else if (action === VIS.VTable.prototype.ROW_ADD) {\n        this.grid.records.splice(actionIndexOrId, 0, args); // add at index\n        id = args.recid; // row to select\n        this.grid.refresh(); //refresh Grid\n        this.blockSelect = true; // forcefully block select changed event\n      } else if (action === VIS.VTable.prototype.ROW_DELETE) {\n        //var size = args.length;\n        var argsL = args.slice();\n        while (argsL.length > 0) {\n          var recid = argsL.pop();\n          this.grid.unselect(recid);\n          this.grid.remove(recid);\n        }\n        if (isNaN(actionIndexOrId))\n          //recid array In this case\n          {\n            id = actionIndexOrId[0];\n          } else {\n          if (this.grid.records.length > 0) id = this.grid.records[this.grid.records.length - 1 < actionIndexOrId ? this.grid.records.length - 1 : actionIndexOrId].recid;\n        }\n      }\n      if (id) {\n        this.select(id); //Select Row\n      }\n      if (action === VIS.VTable.prototype.ROW_ADD && !this.gc.getIsCardRow() && !this.gc.getIsSingleRow() && !this.gc.getIsMapRow()) {\n        this.setDefaultFocus();\n      }\n    }\n    this.blockSelect = false;\n  };\n\n  //Set Default Focus for grid... Not in use Yet.\n  VTable.prototype.setDefaultFocus = function (colName) {\n    if (!this.mTab.defaultFocusField) return;\n    if (!colName) colName = this.mTab.defaultFocusField.getColumnName();\n    var selIndices = this.grid.getSelection(); //this.grid.getSelection(true);\n    var colIndex = this.grid.getColumn(colName.toLower(), true);\n    if (selIndices && selIndices.length > 0) {\n      window.setTimeout(function () {\n        this.grid.editField(selIndices[0], colIndex);\n      }.bind(this), 200);\n      //this.grid.dblClick(selIndices[colIndex], { metaKey: true });\n    }\n  };\n  VTable.prototype.dispose = function () {\n    this.grid.off(\"select\", this.onSelect);\n    this.grid.off(\"sort\", this.onSort);\n    this.grid.off(\"click\", this.onClick);\n    this.onSelect = null;\n    this.onSort = null;\n    var cols = this.grid.columns;\n    for (var col in cols) {\n      if (cols[col].editable.ctrl) cols[col].editable.ctrl.dispose();\n    }\n\n    // console.log(this.grid);\n    this.grid.destroy();\n    // console.log(this.grid);\n    this.grid = null;\n    this.id = null;\n    this.$container = null;\n    this.rendered = null;\n    this.disposeComponenet();\n  };\n\n  //*************** END VTABLE   *********************//\n  //Assignment Gobal Namespace\n\n  VIS.VTable = VTable;\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/vgridview.js?")},"./Areas/VIS/Scripts/F20/vlandingpage.js":()=>{eval("/**\r\n * Window Landing page\r\n * VIS228 Date 06-May-2024\r\n * purpose - Show widget on landing page\r\n */\n;\n(function (VIS, $) {\n  function VLandingPage(apanel, curWindowNo) {\n    this.apanel = apanel;\n    var windowID = apanel.curTab.getAD_Window_ID();\n    var $root = $('<div class=\"vis-ad-w-p-landing\">');\n    var $spnTitle = \"\";\n    var $widgetBody = \"\";\n    var $btnClose = \"\";\n    var openRightPanel = \"\";\n    var $container = \"\";\n    var isEditMode = false;\n    var $btnlandingpageEdit = \"\";\n    var self = this;\n    var isEditMode = false;\n    var btnCloseWidget = \"\";\n    var isChanged = false;\n    var widgetList = {};\n    var widgetWidth = null;\n    var homeItems = {};\n    function init() {\n      $spnTitle = $root.find('.vis-ad-w-p-t-name h5');\n      $widgetBody = $root.find('.vis-landingpage-body');\n      $btnClose = $root.find('.vis-ad-w-p-t-close');\n      $btnlandingpageEdit = $root.find('.vis-landingpageEdit');\n      btnCloseWidget = $root.find('.btnCloseWidget');\n      $spnTitle.append(VIS.Env.getHeader(apanel.ctx, curWindowNo));\n\n      // Create and configure the open right panel button\n      openRightPanel = $('<div class=\"vis-add-widgetContainer\" style=\"display:none\"><button class=\"vis-add-widgetButton\">+</button><p>' + VIS.Msg.getMsg(\"VISEditHomeMsg\") + '</p></div>');\n      // Create the widget container\n      $container = $('<div class=\"vis-widget-container\" style=\"--rowheight:' + ($root.width() - 25) / 9 + 'px\">');\n      events();\n      loadWidgets();\n    }\n    /**\r\n     * Resize window\r\n     */\n    function resizeWidgetContainer() {\n      var wd = $root.find('.vis-home-leftPanel').width();\n      if (wd < 300) {\n        wd = $(window).width();\n      }\n      var w = (wd - 25) / 9;\n      if ($(window).width() <= 500) {\n        w = (wd - 25) / 3;\n      } else if ($(window).width() <= 960) {\n        w = (wd - 25) / 6;\n      }\n      widgetWidth = w;\n      $root.find('.vis-widget-container').attr('style', '--rowheight:' + w + 'px');\n      var itm = Object.keys(homeItems);\n      for (var i = 0; i < itm.length; i++) {\n        var obj = {\n          AD_UserHomeWidgetID: homeItems[itm[i]].AD_UserHomeWidgetID,\n          editMode: isEditMode,\n          windowSpecific: homeItems[itm[i]].WindowSpecific,\n          rows: homeItems[itm[i]].rows,\n          Cols: homeItems[itm[i]].cols,\n          width: ((homeItems[itm[i]].Cols || 1) * widgetWidth).toFixed(2) + 'px',\n          height: ((homeItems[itm[i]].Rows || 1) * widgetWidth).toFixed(2) + 'px'\n        };\n        homeItems[itm[i]].wform.widgetSizeChange(obj);\n      }\n    }\n    function adjustWidgetDivSize() {\n      var windowWidth = $(window).width() - 7;\n      $root.find('.scrollerHorizontalWidget').width(windowWidth);\n      resizeWidgetContainer();\n    }\n\n    /**\r\n     * Handle Events\r\n     */\n    function events() {\n      var $leftPanel = $root.find('.vis-home-leftPanel');\n      var $rightPanel = $root.find('.vis-home-rightPanel');\n      $root.find('.vis-landingpage').on('click', function () {\n        apanel.showLandingPage(true);\n      });\n      $root.find('.vis-windowpage').on('click', function () {\n        apanel.showLandingPage(false);\n      });\n      $btnClose.on('click', function (e) {\n        apanel.$parentWindow.dispose(); //dispose\n      });\n      $btnlandingpageEdit.find('u').on('click', function () {\n        var leftPanelWidth = '70%';\n        isChanged = false;\n        $leftPanel.animate({\n          width: leftPanelWidth\n        }, 300);\n        $root.find('.vis-add-widgetContainer').hide('slide', {\n          direction: 'left'\n        }, 300);\n        $rightPanel.show('slide', {\n          direction: 'right'\n        }, 200);\n        $root.find('.vis-home-leftPanel').sortable(\"enable\");\n        isEditMode = true;\n        $container.addClass('vis-editModeWidget');\n        $root.find('.vis-widgetDelete').show();\n        $btnlandingpageEdit.hide();\n        setTimeout(function () {\n          resizeWidgetContainer();\n        }, 300);\n      });\n      btnCloseWidget.on('click', function () {\n        $leftPanel.animate({\n          width: '100%'\n        }, 300);\n        if ($root.find('.vis-widget-container .vis-widget-item').length > 0) {\n          $root.find('.vis-add-widgetContainer').hide();\n        } else {\n          $root.find('.vis-add-widgetContainer').show();\n        }\n        $container.removeClass('vis-editModeWidget');\n        $rightPanel.hide('slide', {\n          direction: 'left'\n        }, 300);\n        $root.find('.vis-home-leftPanel').sortable(\"disable\");\n        $root.find('.vis-widgetDelete').hide();\n        $btnlandingpageEdit.show();\n        isEditMode = false;\n        saveDashboard();\n        setTimeout(function () {\n          resizeWidgetContainer();\n        }, 300);\n      });\n\n      // Event handler for deleting a widget\n      $leftPanel.on('click', '.vis-widgetDelete', function (e) {\n        var ui = $(this).closest('.vis-widget-item');\n        isChanged = true;\n        if (ui.data('wid') && ui.data('wid').toString().indexOf('temp_') == -1) {\n          var obj = {\n            id: ui.data('wid')\n          };\n          VIS.dataContext.getJSONData(VIS.Application.contextUrl + \"Home/DeleteWidgetFromHome\", obj, function (result) {});\n        }\n        if (homeItems && homeItems[ui.data('wid')]) {\n          homeItems[ui.data('wid')].wform.dispose();\n          delete homeItems[ui.data('wid')];\n        }\n        ui.slideUp(function () {\n          $(this).remove();\n        });\n      });\n      $leftPanel.on('click', '.vis-linksWidget', function () {\n        if (isEditMode) {\n          return;\n        }\n        var ui = $(this).closest('.vis-widget-item');\n\n        //var dsi = $.grep(widgetList, function (element, index) {\n        //    return element.KeyID == ui.data('ws') && element.Type == ui.data('type');\n        //});\n\n        var dsi = widgetList[ui.data('ws') + '_' + ui.data('type')];\n\n        //1   Contain Child ShortCut\n        if (dsi) {\n          //dsi = dsi[0];\n          if (dsi.HasChild) {\n            // alert(\"setting Dialog\");\n            var sd = new VIS.shortcutMgr.SettingDialog(dsi.KeyID); // new SettingDialog(dsi.KeyID);\n            sd.show();\n            sd = null;\n          }\n\n          //2 If URL\n          else if (dsi.Url || dsi.Url.length > 0) {\n            VIS.Env.startBrowser(dsi.Url);\n          }\n\n          // 3 Special Class\n          else if (dsi.SpecialAction && dsi.SpecialAction.length > 0) {\n            //check name has moduleprefix\n            var className = dsi.SpecialAction;\n            //Get form Name\n            var formName = dsi.ActionName; // className.Substring(className.LastIndexOf('.') + 1);\n\n            try {\n              //className = \"VIS.Apps.TestForm\";\n              var type = VIS.Utility.getFunctionByName(className, window);\n              var o = new type();\n              o.show();\n              o = null;\n            } catch (e) {\n              log.log(VIS.Logging.Level.WARNING, \"Class=\" + className + \", Action Class Name=\" + className, e);\n              return false;\n            }\n          } else\n            //Entity Action\n            {\n              if (dsi.Action == null || dsi.Action.length <= 0 || dsi.ActionID < 1) {\n                return;\n              }\n              VIS.viewManager.startAction(dsi.Action, dsi.ActionID);\n            }\n        }\n      });\n    }\n\n    // Function to enable drag and drop functionality\n    function dragDrop() {\n      // Make the .vis-widgetDrag-item elements draggable\n      $root.find('.vis-widgetDrag-item').draggable({\n        helper: 'clone',\n        // Use a clone of the dragged element\n        start: function (event, ui) {\n          originalPosition = ui.helper.position();\n        },\n        revert: 'invalid'\n      });\n\n      // Make the .vis-home-leftPanel droppable\n      $root.find('.vis-home-leftPanel').droppable({\n        accept: '.vis-widgetDrag-item',\n        // Only accept .vis-widgetDrag-item elements\n        drop: function (event, ui) {\n          isChanged = true;\n          // Clone the dragged element and append it to the .vis-home-leftPanel\n          var type = $(ui.helper).data('type');\n          var keyid = $(ui.helper).data('keyid');\n          var widgetSizes = [];\n          widgetSizes.push({\n            SRNO: 99,\n            KeyID: $(ui.helper).data('keyid'),\n            Type: $(ui.helper).data('type')\n          });\n          VIS.dataContext.getJSONData(VIS.Application.contextUrl + \"Home/SaveSingleWidget\", {\n            widgetSizes: widgetSizes,\n            windowID: windowID\n          }, function (result) {\n            renderWidgets(widgetList[keyid + '_' + type], result, null);\n          });\n        }\n      });\n      makeSortable($root.find('.vis-home-leftPanel'));\n    }\n\n    // Function to make a container sortable\n    function makeSortable($container) {\n      $container.sortable({\n        items: \".vis-widget-item\",\n        cursor: \"grabbing\",\n        /* connectWith: \".editPanel\",*/\n        disabled: true,\n        sort: function (event, ui) {\n          // Update the original position during sorting\n          originalPosition = ui.helper.position();\n          $(ui.placeholder).addClass(\"ui-sortable-placeholder\");\n        },\n        start: function (event, ui) {\n          // Capture the original position when sorting starts\n          originalPosition = ui.helper.position();\n          $(ui.helper).addClass(\"ui-sortable-helper\");\n        },\n        stop: function (event, ui) {\n          isChanged = true;\n          $(ui.helper).removeClass(\"ui-sortable-helper\");\n        }\n      });\n    }\n\n    // Function to render widgets\n    function renderWidgets(widget, wid, AdditionalInfo) {\n      //var hue = Math.floor(Math.random() * 360);\n      //var v = Math.floor(Math.random() * 16) + 85;\n      //var pastel = 'hsl(' + hue + ', 100%, ' + v + '%)'\n      var info = {\n        AD_UserHomeWidgetID: wid,\n        windowSpecific: widget.WindowSpecific,\n        editMode: isEditMode,\n        rows: widget.Rows || 1,\n        cols: widget.Cols || 1,\n        width: ((widget.Cols || 1) * widgetWidth).toFixed(2) + 'px',\n        height: ((widget.Rows || 1) * widgetWidth).toFixed(2) + 'px',\n        additionalInfo: AdditionalInfo || null\n      };\n      if (wid == 0) {\n        wid = 'temp_' + Math.floor(Date.now());\n      }\n      var $item = $('<div>');\n      if (widget.Type == \"W\") {\n        var wform = new VIS.AForm();\n        wform.openWidget(widget.ClassName, curWindowNo, info);\n        wform.addChangeListener(self);\n        $item = wform.getRoot();\n        var obj = JSON.parse(JSON.stringify(info));\n        obj['wform'] = wform;\n        homeItems[wid] = obj;\n      } else if (widget.Type == \"L\") {\n        var $div = $('<div class=\"vis-linksWidget\">');\n        $div.append(widget.items).append('<div class=\"linktitle\">' + widget.DisplayName + '</div>');\n        $item.append($div);\n      }\n      $item.addClass(\"vis-widget-item\");\n      //$item.css(\"background-color\", pastel);\n      $item.attr('data-ws', widget.KeyID);\n      $item.attr('data-wid', wid || 0);\n      $item.attr('data-type', widget.Type);\n      $item.css({\n        gridRow: \"span \" + (widget.Rows || 1),\n        gridColumn: \"span \" + (widget.Cols || 1),\n        display: \"none\"\n      });\n      var trash = $('<i class=\"fa fa-trash-o vis-widgetDelete\" aria-hidden=\"true\" ></i>');\n      if (isEditMode) {\n        trash.show();\n      } else {\n        trash.hide();\n      }\n      $item.append(trash);\n      $container.append($item);\n      $item.slideDown(\"slow\");\n    }\n    function loadWidgets() {\n      $container.append(openRightPanel);\n      $root.find('.vis-home-leftPanel').append($container);\n      $root.find('.vis-widget-body').empty();\n      var url = VIS.Application.contextUrl + \"Home/GetWidgets\";\n      VIS.dataContext.getJSONData(url, {\n        windowID: windowID\n      }, function (result) {\n        if (!result) {\n          return;\n        }\n        result.sort((a, b) => a.DisplayName - b.DisplayName);\n        //var widgetLst = result;\n\n        for (var i = 0; i < result.length; i++) {\n          var moduelName = null;\n          var img = null;\n          var itm = result[i];\n          if (result[i].Type == 'L') {\n            moduelName = \"Links\";\n            if (itm.HasImage) {\n              if (!itm.IsImageByteArray && itm.IconUrl.indexOf('.') < 0) {\n                img = '<i data-index=\"' + i + '\" class=\"' + itm.IconUrl + '\"></i>';\n              } else {\n                var url = \"\";\n                if (itm.IsImageByteArray) {\n                  url = 'data:image/*;base64,' + itm.IconBytes;\n                } else {\n                  url = VIS.Application.contextUrl + itm.IconUrl;\n                }\n                img = '<img data-index=\"' + i + '\" src=\"' + url + '\"/>';\n              }\n            } else {\n              img = '<i data-index=\"' + i + '\" class=\"vis vis-shortcut\"></i>';\n            }\n            itm['items'] = img;\n          } else if (result[i].Type == 'W') {\n            moduelName = result[i].ModuleName;\n            img = '<img class=\"vis-widgetImg\" src=\"' + result[i].Img + '\" />';\n          }\n          widgetList[itm.KeyID + '_' + itm.Type] = itm;\n          if ($root.find('.vis-widget-body').find('div:contains(\"' + moduelName + '\")').length === 0) {\n            $root.find('.vis-widget-body').append($('<div class=\"vis-main-widget-heading\">' + moduelName + '</div>'));\n            $root.find('.vis-widget-body').append($('<div class=\"vis-widgetDrag-container\">'));\n          }\n          var witem = $('<div class=\"vis-widgetDrag-item\" data-type=\"' + result[i].Type + '\" data-keyid=\"' + itm.KeyID + '\">' + img + '<div class=\"vis-widgetSize\"><span class=\"vis-dotdot\">' + result[i].DisplayName + '</span><span style=\"display:block\">' + (result[i].Rows || 1) + 'X' + (result[i].Cols || 1) + '</span></div></div>');\n          $root.find('.vis-widgetDrag-container:last').append(witem);\n        }\n        dragDrop();\n        loadHomeWidgets();\n      });\n    }\n    function loadHomeWidgets() {\n      var url = VIS.Application.contextUrl + \"Home/GetUserWidgets\";\n      VIS.dataContext.getJSONData(url, {\n        windowID: windowID\n      }, function (result) {\n        if (result && result.length > 0) {\n          $root.find('.vis-add-widgetContainer').hide();\n          if (result && result.length > 0) {\n            for (var i = 0; i < result.length; i++) {\n              //var dsi = $.grep(widgetList, function (element, index) {\n              //    return element.KeyID == result[i].KeyID && element.Type==result[i].Type;\n              //});\n              var dsi = widgetList[result[i].KeyID + '_' + result[i].Type];\n              if (dsi) {\n                renderWidgets(dsi, result[i].ID, result[i].AdditionalInfo);\n              }\n            }\n          }\n          dragDrop();\n        }\n        //else {\n        //    $root.find('.vis-add-widgetContainer').show();\n        //}\n        else {\n          var lst = Object.values(widgetList);\n          var filteredArray = $.grep(lst, function (item) {\n            return item.IsDefault === true;\n          });\n          filteredArray.sort(function (a, b) {\n            return a.SRNO - b.SRNO;\n          });\n          for (var j = 0; j < filteredArray.length; j++) {\n            renderWidgets(filteredArray[j], 0, filteredArray[j].AdditionalInfo);\n          }\n          dragDrop();\n        }\n      });\n    }\n\n    // Function to save the dashboard layout\n    function saveDashboard() {\n      if (!isChanged) {\n        return;\n      }\n      var widgetSizes = [];\n      $root.find('.vis-widget-item').each(function (index) {\n        var aInfo = null;\n        if ($(this).data('type') == \"W\") {\n          aInfo = homeItems[$(this).data('wid')].AdditionalInfo;\n        }\n        widgetSizes.push({\n          SRNO: index + 1,\n          KeyID: $(this).data('ws'),\n          Type: $(this).data('type'),\n          AdditionalInfo: aInfo\n        });\n      });\n      if (widgetSizes.length > 0) {\n        VIS.dataContext.getJSONData(VIS.Application.contextUrl + \"Home/SaveDashboard\", {\n          widgetSizes: widgetSizes,\n          windowID: windowID\n        }, function (result) {});\n      }\n    }\n    $root.load(VIS.Application.contextUrl + 'LandingPage/Index', function () {\n      init();\n      adjustWidgetDivSize();\n      $(window).resize(adjustWidgetDivSize);\n    });\n    this.getRoot = function () {\n      return $root;\n    };\n  }\n  VLandingPage.prototype.widgetFirevalueChanged = function (data) {\n    var ap = {\n      \"TabWhereClause\": \"Name Like '%Test%'\",\n      \"TabLayout\": \"Y\",\n      // 'N'[Grid],'Y'[Single],'C'[Card]}\n      \"TabIndex\": 0\n    };\n    this.apanel.showLandingPage(false, ap);\n    //tabactionperform\n  };\n  VIS.VLandingPage = VLandingPage;\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/vlandingpage.js?")},"./Areas/VIS/Scripts/F20/vmapview.js":()=>{eval(';\n(function (VIS, $) {\n  /* Map View */\n\n  function VMapView(lstCols) {\n    var map = null;\n    var root = $(\'<div class="vis-mv-main">\');\n    var mapDiv = "";\n    var busyDiv = "";\n    var markers = [];\n    var mapProp;\n    var bounds = null;\n    var cmbLoc = null;\n    var cmbDiv = null;\n    var searchText = $(\'<Input id="pac-input" class="controls" type="text" placeholder="Search Box"/>\');\n    var self = this;\n    this.locationID = \'\';\n    var isMapAvail = window.google && google.maps ? true : false;\n    var geocoder = new google.maps.Geocoder();\n    function addMarker(location, msg, lid, colName) {\n      var marker = new google.maps.Marker({\n        position: location,\n        animation: google.maps.Animation.DROP,\n        map: map,\n        title: msg,\n        draggable: true\n      });\n      marker.info = new google.maps.InfoWindow({\n        content: msg\n      });\n      marker.lid = lid;\n      marker.ColName = colName;\n      marker.info.open(map, marker); //(map, this);  \n\n      google.maps.event.addListener(marker, \'click\', function (point) {\n        //this = marker  \n        this.info.open(map, this); //(map, this);  \n      });\n\n      //google.maps.event.addListener(marker, \'dragend\', function (e) {\n\n      //    geocoder.geocode({\n      //        latLng: marker.getPosition()\n      //    }, function (responses) {\n      //        if (responses && responses.length > 0) {\n      //            // updateMarkerAddress(responses[0].formatted_address);\n      //            console.log(responses[0].formatted_address);\n      //            var address = getAddressObject(responses[0].address_components);\n      //            console.log(address);\n      //            updateLocationInDB(address, marker.lid, marker.ColName);\n      //        }\n      //    });\n      //});\n\n      markers.push(marker);\n    }\n    ;\n\n    /**\r\n     * Not Used for now\r\n     * @param {any} address\r\n     * @param {any} lid\r\n     * @param {any} colName\r\n     */\n    function updateLocationInDB(address, lid, colName) {\n      //this.mapFields[0].getValue()\n      //var that = this;\n      $.ajax({\n        url: VIS.Application.contextUrl + "Location/UpdateLocation",\n        data: {\n          Address: address,\n          C_Location_ID: lid\n        },\n        success: function (result) {\n          var field = jQuery.grep(self.mapFields, function (item, i) {\n            if (item.getColumnName() == colName) return item;\n          });\n          if (field) {\n            field[0].lookup.refreshLocation(lid);\n            self.gc.refreshUI();\n          }\n        },\n        error: function (e) {\n          console.log(e);\n        }\n      });\n    }\n\n    /**\r\n    * Not Used for now\r\n    * @param {any} address\r\n    * @param {any} lid\r\n    * @param {any} colName\r\n    */\n    function getAddressObject(address_components) {\n      var ShouldBeComponent = {\n        home: ["premise", "street_number"],\n        postal_code: ["postal_code"],\n        street: ["street_address", "route", "political"],\n        region: ["administrative_area_level_1"\n        //"administrative_area_level_2",\n        //"administrative_area_level_3",\n        //"administrative_area_level_4",\n        //"administrative_area_level_5"\n        ],\n        city: ["locality", "sublocality", "sublocality_level_1", "sublocality_level_2", "sublocality_level_3", "sublocality_level_4"],\n        country: ["country"]\n      };\n      var address = {\n        home: "",\n        postal_code: "",\n        street: "",\n        region: "",\n        city: "",\n        country: ""\n      };\n      address_components.forEach(component => {\n        for (var shouldBe in ShouldBeComponent) {\n          if (ShouldBeComponent[shouldBe].indexOf(component.types[0]) !== -1) {\n            //if (shouldBe === "country") {\n            //    address[shouldBe] = component.short_name;\n            //} else {\n\n            if (address[shouldBe].length > 0) {\n              address[shouldBe] = address[shouldBe] + " , " + component.long_name;\n            } else {\n              address[shouldBe] = component.long_name;\n            }\n          }\n        }\n      });\n      return address;\n    }\n    ;\n    function addMarkerWithTimeout(location, msg, timeout, lid, colName) {\n      window.setTimeout(function () {\n        addMarker(location, msg, lid, colName);\n      }, timeout);\n    }\n    ;\n\n    // Sets the map on all markers in the array.\n    function setAllMap(map) {\n      for (var i = 0; i < markers.length; i++) {\n        markers[i].setMap(map);\n        google.maps.event.clearListeners(markers[i], \'click\');\n        markers[i].info = null;\n      }\n    }\n    ;\n    // Removes the markers from the map, but keeps them in the array.\n    function clearMarkers() {\n      setAllMap(null);\n    }\n    ;\n\n    // Shows any markers currently in the array.\n    function showMarkers() {\n      setAllMap(map);\n    }\n    ;\n\n    // Deletes all markers in the array by removing references to them.\n    function deleteMarkers() {\n      clearMarkers();\n      markers = [];\n    }\n    ;\n    function removeMap() {\n      deleteMarkers();\n      //mapDiv.remove();\n      map = null;\n    }\n    ;\n    this.renderMap = function () {\n      if (!map) {\n        if (this.mapp) map = this.mapp;\n        map = new google.maps.Map(mapDiv[0], mapProp);\n\n        // Create the search box and link it to the UI element.\n        // const input = document.getElementById("pac-input");\n\n        //map.controls[google.maps.ControlPosition.TOP_LEFT].push(searchText);\n        //// Bias the SearchBox results towards current map\'s viewport.\n\n        //const searchBox = new google.maps.places.SearchBox(searchText);\n\n        //map.addListener("bounds_changed", () => {\n        //    searchBox.setBounds(map.getBounds());\n        //});\n\n        //const searchBox = new google.maps.places.SearchBox(searchText);\n\n        //map.controls[google.maps.ControlPosition.TOP_RIGHT].push(searchText);\n        //// Bias the SearchBox results towards current map\'s viewport.\n        //map.addListener("bounds_changed", () => {\n        //    searchBox.setBounds(map.getBounds());\n        //});\n\n        //searchBox.addListener("places_changed", () => {\n        //    const places = searchBox.getPlaces();\n\n        //    if (places.length == 0) {\n        //        return;\n        //    }\n\n        //    // Clear out the old markers.\n        //    markers.forEach((marker) => {\n        //        marker.setMap(null);\n        //    });\n        //    markers = [];\n\n        //    // For each place, get the icon, name and location.\n        //    const bounds = new google.maps.LatLngBounds();\n\n        //    places.forEach((place) => {\n        //        if (!place.geometry || !place.geometry.location) {\n        //            console.log("Returned place contains no geometry");\n        //            return;\n        //        }\n\n        //        const icon = {\n        //            url: place.icon,\n        //            size: new google.maps.Size(71, 71),\n        //            origin: new google.maps.Point(0, 0),\n        //            anchor: new google.maps.Point(17, 34),\n        //            scaledSize: new google.maps.Size(25, 25),\n        //        };\n\n        //        // Create a marker for each place.\n        //        markers.push(\n        //            new google.maps.Marker({\n        //                map,\n        //                icon,\n        //                title: place.name,\n        //                position: place.geometry.location,\n        //            })\n        //        );\n        //        if (place.geometry.viewport) {\n        //            // Only geocodes have viewport.\n        //            bounds.union(place.geometry.viewport);\n        //        } else {\n        //            bounds.extend(place.geometry.location);\n        //        }\n        //    });\n        //    map.fitBounds(bounds);\n        //});\n\n        fillCombo();\n      }\n    };\n    function fillCombo() {\n      var html = \'\';\n      var f = self.mapFields;\n      if (f.length > 1) {\n        html += \'<option data-index="-1" value="-1"> </option>\';\n        for (var i = 0; i < f.length; i++) {\n          html += \'<option data-index=\' + i + \' value=\' + f[i].getColumnName() + \' >\' + f[i].getHeader() + \'</option>\';\n        }\n        cmbLoc.html(html);\n        cmbLoc[0].selectedIndex = 0;\n        bindEvent();\n      } else {\n        cmbDiv.hide();\n        mapDiv.css(\'top\', \'0\');\n      }\n    }\n    ;\n    function initialize() {\n      mapDiv = $(\'<div id="map" class="vis-mv-map">\');\n      busyDiv = $(\'<div class="vis-apanel-busy vis-full-height">\').hide();\n      cmbDiv = $(\'<div class="vis-mv-header"> <select class="vis-mv-select vis-pull-right" /> </div>\');\n      cmbLoc = cmbDiv.find(".vis-mv-select");\n      root.append(cmbDiv).append(searchText).append(mapDiv).append(busyDiv);\n      if (isMapAvail) {\n        mapProp = {\n          center: new google.maps.LatLng(26, 76),\n          zoom: 4,\n          mapTypeId: google.maps.MapTypeId.ROADMAP\n        };\n      }\n    }\n    ;\n    initialize();\n    function bindEvent() {\n      cmbLoc.on("change", function (e) {\n        self.setBusy(true);\n        //self.curIndex = this.selectedIndex;\n        self.curIndex = $(e.target).find(\'option:selected\').data(\'index\');\n\n        //If no address field selected in map view , then sow all locations, otherwise selected field\'s location\n        if (self.curIndex == -1) self.setMapData(self.mapcols);else self.setMapData(self.mapcols[self.curIndex]);\n      });\n    }\n    ;\n    this.ResetCombo = function () {\n      cmbLoc.val(-1);\n      this.curIndex = -1;\n    };\n    this.setBusy = function (busy) {\n      if (busy) busyDiv.show();else busyDiv.hide();\n    };\n    this.getRoot = function () {\n      return root;\n    };\n    this.sizeChanged = function (h, w) {};\n    this.setMapData = function (LatLng) {\n      if (!isMapAvail) return;\n      this.renderMap();\n      deleteMarkers();\n      bounds = null;\n      bounds = new google.maps.LatLngBounds();\n      google.maps.event.trigger(map, \'resize\');\n      // window.setTimeout(function () {\n      // var len = lstLatLng.length;\n\n      if (self.curIndex == -1) {\n        // Show all address of selected records\n        var len = Object.keys(LatLng).length;\n        var keys = Object.keys(LatLng);\n        for (var i = 0; i < len; i++) {\n          var lstLatLng = LatLng[keys[i]];\n          if (!lstLatLng || lstLatLng.length == 0) continue;\n          for (var j = 0; j < lstLatLng.length; j++) {\n            try {\n              if (self.locationID && self.locationID == lstLatLng[j].lid || !self.locationID) self.setLatLong(lstLatLng[j].Latitude, lstLatLng[j].Longitude, lstLatLng[j].msg, lstLatLng[j].lid, lstLatLng[j].ColName);\n            } catch (e) {\n              console.log(e);\n            }\n          }\n        }\n      } else {\n        //Show current field\'s location in map\n        if (LatLng.length > 0) for (var i = 0; i < LatLng.length; i++) {\n          self.setLatLong(LatLng[i].Latitude, LatLng[i].Longitude, LatLng[i].msg, LatLng[i].lid, LatLng[i].ColName);\n        }\n      }\n      map.fitBounds(bounds);\n      self.setBusy(false);\n      //}, 10);\n    };\n    this.setLatLong = function (Latitude, Longitude, msg, lid, colName) {\n      if (!Latitude || !Longitude) return;\n      var ll = null;\n      ll = new google.maps.LatLng(Number(Latitude), Number(Longitude));\n      addMarkerWithTimeout(ll, msg, 1 * 100, lid, colName);\n      bounds.extend(ll);\n      map.fitBounds(bounds);\n    };\n    this.dc = function () {\n      removeMap();\n      root.remove();\n      this.cols = this.gc = this.aPanel = this.mapcols = null;\n      this.mapFields = null;\n      this.curIndex = -1;\n      this.getRoot = null;\n      this.dc = null;\n    };\n  }\n  ;\n  VMapView.prototype.setupMapView = function (aPanel, GC, mTab, mapContainer, vMapId) {\n    this.mapFields = [];\n    var cols = mTab.getMapColumns();\n    for (var i = 0; i < cols.length; i++) {\n      var f = mTab.getField(cols[i]);\n      if (f) this.mapFields.push(f);\n    }\n    this.cols = cols;\n    this.gc = GC;\n    this.aPanel = aPanel;\n    this.mapcols = {};\n    this.curIndex = -1;\n    mapContainer.append(this.getRoot());\n  };\n  VMapView.prototype.refreshUI = function (width, locID) {\n    this.locationID = locID;\n    var records = this.gc.getSelectedRows();\n    var len = records.length;\n    if (records.length < 1 || this.cols.length < 1) return;\n    var mapcols = [[]];\n    for (var i = 0; i < this.cols.length; i++) {\n      var colName = this.cols[i];\n      var l = this.mapFields[i].getLookup();\n      if (this.locationID && this.locationID != this.mapFields[i].getValue()) continue;\n      var locIds = [];\n      for (var j = 0; j < len; j++) {\n        var lid = records[j][colName.toLowerCase()];\n        if (lid) {\n          var ll = l.getLatLng(lid);\n          if (ll) {\n            ll.msg = l.getDisplay(lid);\n            ll.lid = lid;\n            ll.ColName = colName;\n            locIds.push(ll);\n          }\n        }\n      }\n      this.mapcols[i] = locIds;\n    }\n    this.ResetCombo();\n    if (this.curIndex == -1) this.setMapData(this.mapcols);else this.setMapData(this.mapcols[this.curIndex]);\n  };\n  VMapView.prototype.dispose = function () {\n    this.dc();\n  };\n\n  //VMapView.prototype.CreateMap = function () {\n  //  // this.map = new google.maps.Map(mapDiv[0], mapProp);\n\n  //};\n\n  VIS.VMapView = VMapView;\n  // window.initMAPAutocomplete = VIS.VMapView.prototype.CreateMap();\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/vmapview.js?')},"./Areas/VIS/Scripts/F20/wframe.js":()=>{eval(';\n(function (VIS, $) {\n  var AWINDOW_HEADER_HEIGHT = 0; // 43;\n  var APANEL_HEADER_HEIGHT = 50; //margin adjust of first tr\n  var APANEL_FOOTER_HEIGHT = 40;\n  var GC_HEADER_HEIGHT = 0;\n  var Level = VIS.Logging.Level;\n  var baseUrl = VIS.Application.contextUrl;\n  var dataSetUrl = baseUrl + "JsonData/JDataSetWithCode";\n  var nonQueryUrl = baseUrl + "JsonData/ExecuteNonQuer";\n  var dSetUrl = baseUrl + "Form/JDataSet";\n  var executeReader = function (sql, param, callback) {\n    var async = callback ? true : false;\n    var dataIn = {\n      sql: sql,\n      page: 1,\n      pageSize: 0\n    };\n    if (param) {\n      dataIn.param = param;\n    }\n    var dr = null;\n    getDataSetJString(dataIn, async, function (jString) {\n      dr = new VIS.DB.DataReader().toJson(jString);\n      if (callback) {\n        callback(dr);\n      }\n    });\n    return dr;\n  };\n\n  //executeDataSet\n  var executeDataSet = function (sql, param, callback) {\n    var async = callback ? true : false;\n    var dataIn = {\n      sql: sql,\n      page: 1,\n      pageSize: 0\n    };\n    if (param) {\n      dataIn.param = param;\n    }\n    var dataSet = null;\n    getDataSetJString(dataIn, async, function (jString) {\n      dataSet = new VIS.DB.DataSet().toJson(jString);\n      if (callback) {\n        callback(dataSet);\n      }\n    });\n    return dataSet;\n  };\n  var executeScalar = function (sql, params, callback) {\n    var async = callback ? true : false;\n    var dataIn = {\n      sql: sql,\n      page: 1,\n      pageSize: 0\n    };\n    if (params) {\n      dataIn.param = params;\n    }\n    var value = null;\n    getDataSetJString(dataIn, async, function (jString) {\n      dataSet = new VIS.DB.DataSet().toJson(jString);\n      var dataSet = new VIS.DB.DataSet().toJson(jString);\n      if (dataSet.getTable(0).getRows().length > 0) {\n        value = dataSet.getTable(0).getRow(0).getCell(0);\n      } else {\n        value = null;\n      }\n      dataSet.dispose();\n      dataSet = null;\n      if (async) {\n        callback(value);\n      }\n    });\n    return value;\n  };\n  var executeQueries = function (sqls, params, callback) {\n    var async = callback ? true : false;\n    var ret = null;\n    var dataIn = {\n      sql: sqls.join("/"),\n      param: params\n    };\n\n    // dataIn.sql = VIS.secureEngine.encrypt(dataIn.sql);\n    $.ajax({\n      url: nonQueryUrl + \'ies\',\n      type: "POST",\n      datatype: "json",\n      contentType: "application/json; charset=utf-8",\n      async: async,\n      data: JSON.stringify(dataIn)\n    }).done(function (json) {\n      ret = json;\n      if (callback) {\n        callback(json);\n      }\n    });\n    return ret;\n  };\n\n  //DataSet String\n  function getDataSetJString(data, async, callback) {\n    var result = null;\n    // data.sql = VIS.secureEngine.encrypt(data.sql);\n    $.ajax({\n      url: dataSetUrl,\n      type: "POST",\n      datatype: "json",\n      contentType: "application/json; charset=utf-8",\n      async: async,\n      data: JSON.stringify(data)\n    }).done(function (json) {\n      result = json;\n      if (callback) {\n        callback(json);\n      }\n      //return result;\n    });\n    return result;\n  }\n  ;\n  var executeDReader = function (sql, param, callback) {\n    var async = callback ? true : false;\n    var dataIn = {\n      sql: sql,\n      page: 1,\n      pageSize: 0\n    };\n    if (param) {\n      dataIn.param = param;\n    }\n    //dataIn.sql = VIS.secureEngine.encrypt(dataIn.sql);\n    var dr = null;\n    getDSetJString(dataIn, async, function (jString) {\n      dr = new VIS.DB.DataReader().toJson(jString);\n      if (callback) {\n        callback(dr);\n      }\n    });\n    return dr;\n  };\n  function getDSetJString(data, async, callback) {\n    var result = null;\n    data.sql = VIS.secureEngine.encrypt(data.sql);\n    $.ajax({\n      url: dSetUrl,\n      type: "POST",\n      datatype: "json",\n      contentType: "application/json; charset=utf-8",\n      async: async,\n      data: JSON.stringify(data)\n    }).done(function (json) {\n      result = json;\n      if (callback) {\n        callback(json);\n      }\n      //return result;\n    });\n    return result;\n  }\n  ;\n\n  //****************************************************//\n  //**             AWindow                           **//\n  //**************************************************//\n\n  var tmpWindow = document.querySelector(\'#vis-ad-windowtmp\').content; // $("#vis-ad-windowtmp");\n\n  /**\r\n   *  Main Application Window.\r\n   *  - Constructs, initializes and positions window framecnd_re\r\n   *  - Gets content, menu, from APanel\r\n   *\r\n   */\n\n  function AWindow() {\n    this.name;\n    this.windowNo;\n    this.id;\n    this.img = null;\n    this.cPanel; // common pointer , contain Window Panel OR Form Panel OR Process Panel\n    this.isHeaderVisible = true;\n    this.onClosed; // event\n    this.title = "window";\n    this.closeable = true;\n    var $header = null;\n    var $table, $contentGrid, $lblTitle, $btnClose;\n    var $toolDiv = null;\n    this.onLoad = null;\n    function initComponent() {\n      // $contentGrid = $("<div class=\'vis-awindow-body\'>");\n\n      var clone = document.importNode(tmpWindow, true);\n      $table = $(clone.querySelector(".vis-ad-w"));\n      //var td11 = $("<td style=\'max-height:42px;\'>");\n      $contentGrid = $table.find(".vis-ad-w-body"); //  ("<td class=\'vis-height-full\'>");\n      $lblTitle = $table.find("h5"); //$("<h1>");//.addClass("vis-awindow-title-label");\n      // Mohit - Shortcut as title.\n      $btnClose = $table.find(".vis-ad-w-close"); //$(\'<a href="javascript:void(0)" title="\' + VIS.Msg.getMsg("Close") + " " + VIS.Msg.getMsg("Shct_Close") + \'" class="vis-mainMenuIcons vis-icon-menuclose"></a>\');\n\n      $toolDiv = $table.find(".vis-ad-w-toolbar"); //$("<div class=\'vis-awindow-toolbar\' >");\n      $header = $table.find(".vis-ad-w-header");\n\n      //     $header = $table.find $("<div class=\'vis-awindow-header vis-menuTitle\' >").append($btnClose).append($lblTitle).append($toolDiv);\n      //  td11.append($header);\n      //var tr1 = $("<tr>").append(td11);\n      //var tr2 = $("<tr>").append($contentGrid);\n      //$table.append(tr1).append(tr2);\n    }\n    initComponent();\n\n    /* Privilized Functions */\n\n    this.setTitle = function (titl) {\n      this.title = titl;\n      $lblTitle.text(this.title);\n    };\n\n    /**\r\n      set name odf window\r\n      */\n\n    this.setSize = function (height, width) {\n      return;\n      $table.height(height);\n    };\n    this.hideHeader = function (hide) {\n      this.isHeaderVisible = !hide;\n      if (hide) {\n        $header.hide();\n      } else {\n        $header.show();\n      }\n      this.sizeChanged();\n    };\n    this.hideCloseIcon = function (hide) {\n      if (hide) {\n        $btnClose.hide();\n        this.closeable = false;\n      } else {\n        $btnClose.show();\n        this.closeable = true;\n      }\n    };\n    this.isCloseable = function (hide) {\n      return this.closeable;\n    };\n\n    /** encode\r\n     * get root container\r\n     */\n    this.getRootLayout = function () {\n      return $table;\n    };\n\n    /** \r\n     * get content grid\r\n     */\n    this.getContentGrid = function () {\n      return $contentGrid;\n    };\n    this.setToolbar = function (bar) {\n      $toolDiv.append(bar);\n    };\n    var self = this; /* self pointer */\n\n    $btnClose.on(VIS.Events.onTouchStartOrClick, function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      self.dispose(); //dispose\n    });\n\n    /**\r\n     * clean up \r\n    */\n    this.disposeComponent = function () {\n      self = null;\n      if ($btnClose) $btnClose.off(VIS.Events.onTouchStartOrClick);\n      $btnClose = null;\n      if ($table) $table.remove();\n      if ($contentGrid) $contentGrid.remove();\n      $table = $contentGrid = $lblTitle = $btnClose = null;\n      this.setTitle = null;\n      this.name = null;\n      this.windowNo = null;\n      this.id = null;\n      this.setTitle = null;\n      this.setName = null;\n      this.getRootLayout = null;\n      this.getContentGrid = null;\n      this.onLoad = null;\n    };\n  }\n  ;\n  AWindow.prototype.setName = function (name) {\n    this.name = name;\n  };\n  AWindow.prototype.getName = function () {\n    return this.name;\n  };\n  AWindow.prototype.sizeChanged = function (height, width) {\n    if (!height) height = VIS.Env.getScreenHeight();\n    if (!width) width = window.innerWidth;\n    // this.setSize(height);\n    var hHeight = this.isHeaderVisible ? 85 : 43;\n    try {\n      this.cPanel.sizeChanged(height - hHeight, width);\n    } catch (ex) {\n      console.log("size changed error");\n    }\n  };\n  AWindow.prototype.refresh = function () {\n    //console.log("refresh");\n    this.cPanel.refresh();\n    return this;\n  };\n  AWindow.prototype.keyDown = function (evt) {\n    //console.log("refresh");\n    if (this.cPanel.keyDown) this.cPanel.keyDown(evt);\n    return this;\n  };\n  AWindow.prototype.navigateThroghtShortcut = function (forward) {\n    //console.log("refresh");\n    var fEle = $(document.activeElement);\n    if (fEle && fEle.length > 0) {\n      fEle.trigger("change");\n      var tis = this;\n      window.setTimeout(function () {\n        if (tis.cPanel.navigateThroghtShortcut) tis.cPanel.navigateThroghtShortcut(forward);\n      }, 200);\n    } else {\n      if (this.cPanel.navigateThroghtShortcut) this.cPanel.navigateThroghtShortcut(forward);\n    }\n    return this;\n  };\n\n  /**\r\n   *\tDynamic Initialization Single Window\r\n   *  @param AD_Window_ID window\r\n   *  @param query selection criteria\r\n   *  @param callback to add menu item for window\r\n   *  @return true if loaded OK\r\n   */\n  AWindow.prototype.initWindow = function (AD_Window_ID, query, callback, action, sel) {\n    this.cPanel = new VIS.APanel(); //initlize Apanel\n    this.getContentGrid().css(\'display\', \'flex\'); // to support older design\n\n    //set variable\n    var windowNo = VIS.Env.getWindowNo();\n    this.id = windowNo + "_" + AD_Window_ID;\n    this.hid = action + "=" + AD_Window_ID;\n    var self = this;\n    this.hideHeader(true);\n    VIS.AEnv.getGridWindow(windowNo, AD_Window_ID, function (json) {\n      if (json.error != null) {\n        self.hasError = true;\n        VIS.ADialog.error(json.error); //log error\n        self.dispose();\n        self = null;\n        return;\n      }\n      var jsonData = $.parseJSON(json.result); // widow json\n\n      VIS.context.setContextOfWindow($.parseJSON(json.wCtx), windowNo); // set window context\n      //console.log(jsonData);\n\n      self.cPanel.initPanel(jsonData, query, self, false, sel); //initPanel\n      self.sizeChanged(); // set size and window\n      self.cPanel.createSearchAutoComplete();\n      //self.cPanel.selectFirstTab();\n\n      //Updated by raghu \n      //date:19-01-2016\n      //Change/Update for:Zoom from workflow on home page\n      self.cPanel.selectFirstTab(query != null);\n      VIS.MLookupCache.initWindowLookup(windowNo);\n\n      //Image \n      var wObj = self.cPanel.gridWindow;\n      var img = null;\n      if (wObj.getFontName() != \'\') img = wObj.getFontName();else if (wObj.getImageUrl() != \'\') img = VIS.Application.contextUrl + "Images/Thumb16x16/" + wObj.getImageUrl(); //fixed\n      else img = "fa fa-window-maximize";\n      self.img = img;\n      if (callback) {\n        callback(self.id, img, self.name, self.hid); //add shortcut\n      }\n      if (self.onLoad) self.onLoad();\n\n      // register popoverlay event for control\'s description\n      //self.cPanel.getRoot().find(\'.vis-ev-ctrlinfowrap\').popover({\n      //    trigger: \'focus\'\n      //});\n\n      jsonData = null;\n      self = null;\n    });\n    this.AD_Window_ID = AD_Window_ID;\n    this.windowNo = windowNo;\n    this.getRootLayout().id = this.id;\n    this.getRootLayout().attr("id", "AS_" + this.id);\n    this.getContentGrid().append(this.cPanel.getRoot());\n    return true;\n  };\n  AWindow.prototype.setCFrameContent = function (root, windowNo) {\n    this.cPanel = root; //initlize Apanel\n    //set variable\n    this.windowNo = windowNo;\n    this.id = this.windowNo + "_CFrame";\n    //this.frame.hid = action + "=";\n    this.getRootLayout().id = this.id;\n    this.getRootLayout().attr("id", "AS_" + this.id);\n    this.getContentGrid().append(this.cPanel.getRoot());\n  };\n\n  /**\r\n   *\tDynamic Initialization form\r\n   *  @param AD_Form_ID form\r\n   *  @param callback to add menu item for form\r\n  *  @return true if loaded OK\r\n  */\n  AWindow.prototype.initForm = function (AD_Form_ID, callback, action, additionalInfo) {\n    this.cPanel = new VIS.AForm(VIS.Env.getScreenHeight() - 85); //initlize AForm\n\n    //set variable\n    var windowNo = VIS.Env.getWindowNo();\n    this.id = windowNo + "_" + AD_Form_ID;\n    this.hid = action + "=" + AD_Form_ID;\n    var self = this;\n    VIS.dataContext.getFormDataString({\n      AD_Form_ID: AD_Form_ID\n    }, function (json) {\n      if (json.error != null) {\n        VIS.ADialog.error(json.error); //log error\n        self.dispose();\n        self = null;\n        return;\n      }\n      var jsonData = $.parseJSON(json.result); // widow json\n      //console.log(jsonData);\n\n      if (jsonData.IsError) {\n        VIS.ADialog.error(jsonData.Message); //log error\n        self.dispose();\n        self = null;\n        return;\n      }\n      self.setTitle(jsonData.DisplayName);\n      self.setName(jsonData.DisplayName);\n      if (!self.cPanel.openForm(jsonData, self, windowNo, additionalInfo)) {\n        self.dispose();\n        self = null;\n        return;\n      }\n      self.sizeChanged(); // set size and window\n\n      var img = "fa fa-list-alt";\n      self.img = img;\n      if (callback) {\n        callback(self.id, img, self.name, self.hid); //add shortcut\n      }\n      jsonData = null;\n      self = null;\n    });\n    this.windowNo = windowNo;\n    this.getRootLayout().id = this.id;\n    this.getRootLayout().attr("id", "AS_" + this.id);\n    this.getContentGrid().append(this.cPanel.getRoot());\n    return true;\n  };\n\n  /**\r\n   *\tDynamic Initialization process\r\n   *  @param AD_Process_ID process\r\n   *  @param callback to add menu item for form\r\n   *  @return true if loaded OK\r\n   */\n  AWindow.prototype.initProcess = function (AD_Process_ID, callback, action, splitUI, extrnalForm) {\n    this.cPanel = new VIS.AProcess(AD_Process_ID, VIS.Env.getScreenHeight() - AWINDOW_HEADER_HEIGHT, splitUI, extrnalForm); //initlize AForm\n\n    //set variable\n    var windowNo = VIS.Env.getWindowNo();\n    this.id = windowNo + "_" + AD_Process_ID;\n    this.hid = action + "=" + AD_Process_ID;\n    var self = this;\n    this.hideHeader(true);\n    VIS.dataContext.getProcessDataString({\n      AD_Process_ID: AD_Process_ID\n    }, function (json) {\n      if (json.error != null) {\n        VIS.ADialog.error(json.error); //log error\n        self.dispose();\n        self = null;\n        return;\n      }\n      var jsonData = $.parseJSON(json.result); // widow json\n\n      if (jsonData.IsError) {\n        VIS.ADialog.error(jsonData.Message); //log error\n        self.dispose();\n        self = null;\n        return;\n      }\n      self.setTitle("");\n      self.setName(jsonData.Name);\n      jsonData.AD_Process_ID = AD_Process_ID;\n      //console.log(jsonData);\n      self.cPanel.setActionOrigin(VIS.ProcessCtl.prototype.ORIGIN_MENU);\n      if (!self.cPanel.init(jsonData, self, windowNo)) {\n        self.dispose();\n        self = null;\n        return;\n      }\n      self.sizeChanged(); // set size and window\n\n      var img = null;\n      if (jsonData.FontName != \'\') img = jsonData.FontName;else if (jsonData.ImageUrl != \'\') img = VIS.Application.contextUrl + "Images/Thumb16x16/" + jsonData.ImageUrl; //fixed\n      else if (action == "P") img = "fa fa-cog";else img = "vis vis-report";\n      self.img = img;\n      if (callback) {\n        callback(self.id, img, self.name, self.hid); //add shortcut\n      }\n      jsonData = null;\n      self = null;\n    });\n    this.windowNo = windowNo;\n    this.getRootLayout().id = this.id;\n    this.getRootLayout().attr("id", "AS_" + this.id);\n    this.getContentGrid().append(this.cPanel.getRoot());\n    return true;\n  };\n  AWindow.prototype.refreshProcess = function (AD_Process_ID, callback, action, splitUI, externalForm) {\n    if (this.cPanel) {\n      this.cPanel.disposeComponent();\n      this.cPanel = null;\n    }\n    splitUI = true;\n    this.initProcess(AD_Process_ID, callback, action, splitUI, externalForm);\n    if (externalForm.disposeComponent) {\n      externalForm.getParameterContainer().empty().append(this.cPanel.getParametersContainer());\n      this.cPanel.getContentTable().css(\'height\', externalForm.getContentContainer().height());\n      externalForm.getContentContainer().empty().append(this.cPanel.getContentTable()).append(this.cPanel.getBusyIndicator()).css(\'position\', \'relative\');\n      ;\n      externalForm.getToolbarContainer().empty().append(this.cPanel.getToolbar());\n      //externalForm.getBusyIndicatorContainer().empty().append(this.cPanel.getBusyIndicator());\n    }\n    return this.cPanel;\n  };\n  AWindow.prototype.getProcessPanel = function () {\n    return this.cPanel;\n  };\n\n  /**\r\n   *  get title of window\r\n   *\r\n   * @return title of window\r\n   */\n  AWindow.prototype.getTitile = function () {\n    return this.title;\n  };\n  AWindow.prototype.getAD_Window_ID = function () {\n    return this.AD_Window_ID;\n  };\n\n  /**\r\n   Show window frame on ui\r\n   */\n  AWindow.prototype.show = function ($parent, callback) {\n    $parent.append(this.getRootLayout());\n    if (callback) {\n      callback(this.id, null, this.name, this.hid); //add shortcut\n    }\n    return true;\n  };\n  AWindow.prototype.refreshData = function () {\n    this.cPanel.refreshData();\n  };\n\n  /** \r\n   * get id of window\r\n   * @return unique id\r\n   */\n  AWindow.prototype.getId = function () {\n    return this.id;\n  };\n\n  /** \r\n   *  no of window\r\n   * @return window number\r\n   */\n  AWindow.prototype.getWindowNo = function () {\n    return this.windowNo;\n  };\n\n  /** \r\n   * dispose \r\n   */\n  AWindow.prototype.dispose = function () {\n    if (!this.closeable) return;\n    //if (VIS.context.getContext("#DisableMenu") == \'Y\') {\n    //    return;\n    //}\n    //dispose all popover\n    // this.cPanel.getRoot().find(\'.vis-ev-ctrlinfowrap\').popover(\'dispose\');\n    if (this.onClosed) {\n      if (!this.onClosed(this.id, this.$layout, this.hid, this.AD_Window_ID)) return;\n    }\n    this.onClosed = null;\n    if (this.cPanel) this.cPanel.dispose();\n    this.cPanel = null;\n    //if (this.AForm)\n    //    this.AForm.dispose();\n    //this.AForm = null;\n\n    this.children = null;\n    this.disposeComponent();\n    return true;\n  };\n\n  //************* AWindow End ************************//\n\n  //****************************************************//\n  //**             Apps Action                       **//\n  //**************************************************//\n  /*\r\n  Optinons = {\r\n     action:,\r\n     text:,\r\n     imageName:\r\n     toggle:,\r\n     toolTipText:,\r\n     imageOnly:  // show only Image\r\n     textOnly:\r\n     isSmall:\r\n     this.onAction=null;\r\n     isPopoverText:\r\n     direction:\r\n    */\n  function AppsAction(options) {\n    if (options) {\n      this.action;\n      this.toggle;\n      this.enableDisable;\n      this.pressed;\n      this.isEnabled = true;\n      this.text;\n      this.toolTipText;\n      this.imageOnly;\n      this.textOnly;\n      this.onAction = null;\n      this.isSmall;\n      this.iconName = \'\';\n      this.direction = "right";\n      $.extend(true, this, options);\n      this.items = {};\n      this.$li;\n      if (!this.text) {\n        this.text = VIS.I18N.getLabel(this.action); //action;\n        if (this.text.contains("&")) {\n          this.text = this.text.replace(\'&\', \'\');\n        }\n        //\tData\n        if (!this.toolTipText) this.toolTipText = this.text; // VIS.Msg.getMsg(this.action);\n        else {\n          this.toolTipText = this.text + VIS.Msg.getMsg(this.toolTipText);\n          //this.text = this.text + " " + this.toolTipText;\n        }\n        if (this.toolTipText.contains("&")) {\n          this.toolTipText = this.text + this.toolTipText.replace(\'&\', \'\');\n        }\n      }\n      var imgUrl = \'\'; // this.getPath();\n      var imgUrlX = \'\'; //this.getPath();\n\n      //var cls = \'\';\n      //var clsX = \'\';\n\n      if (this.isSmall) {\n        //imgUrl += this.action + "16.png";\n        imgUrl = this.iconName != \'\' ? this.iconName.toLowerCase() : this.action.toLowerCase();\n        if (this.toggle || this.enableDisable) {\n          // imgUrlX += this.action + "X16.png";\n          imgUrlX = imgUrl + \'x\';\n        }\n      } else {\n        //imgUrl += this.action + "24.png";\n        //if (this.toggle || this.enableDisable) {\n        //    imgUrlX += this.action + "X24.png";\n        //}\n        imgUrl = this.iconName != \'\' ? this.iconName.toLowerCase() : this.action.toLowerCase();\n        if (this.toggle || this.enableDisable) {\n          // imgUrlX += this.action + "X16.png";\n          imgUrlX = imgUrl + \'x\';\n        }\n      }\n      this.imgUrl = "vis-" + imgUrl;\n      this.imgUrlX = "vis-" + imgUrlX;\n    }\n    var that = this;\n    this.getListItm = function (listId) {\n      var li = $("<li>");\n      var d = $("<div></div>");\n      var fired = true;\n      var mouseDown = false;\n      if (this.action == "Save" || this.action == "New") {\n        // Handle case if user direct click on save button \n        li.on("mousedown touchstart", function (e) {\n          mouseDown = true;\n          window.setTimeout(function (md) {\n            if (mouseDown) li.trigger(\'click\');\n          }, 1000);\n        });\n      }\n      li.on(VIS.Events.onClick, function (e) {\n        mouseDown = false;\n        e.stopPropagation();\n        if (fired && that.onAction && that.isEnabled) {\n          if (that.toggle) {\n            that.setPressed(!that.pressed);\n          }\n          fired = false;\n          d.css(\'background-color\', \'red\');\n          setTimeout(function () {\n            d.css(\'background-color\', \'transparent\');\n            that.onAction(that.action);\n            fired = true;\n          }, 10);\n        }\n      });\n      if (this.textOnly) {\n        // li.text(this.text);\n        li.append($(\'<h5>\').text(this.text));\n      } else if (this.imageOnly) {\n        //this.img = $(\'<img />\').attr({ \'src\': this.imgUrl, \'alt\': this.text, \'title\': this.text });\n        this.img = $(\'<i class="vis \' + this.imgUrl + \'" title = "\' + this.toolTipText + \'">\');\n        li.append(d);\n        d.append(this.img);\n      } else {\n        //li.append(\'<ul class="vis-appsaction-ul-inner"><li><img src="\' + this.imgUrl + \'" title="\' + this.text + \'" /></li><li><span>\' + this.text + \'</span></li></ul>\');\n        if (this.direction == "r") li.append(\'<span>\' + this.text + \'</span> <i class="vis \' + this.imgUrl + \'" title="\' + this.toolTipText + \'" ></i>\');else li.append(\'<i class="vis \' + this.imgUrl + \'" title="\' + this.toolTipText + \'"></i><span>\' + this.text + \'</span>\');\n        this.img = li.find("i");\n      }\n      this.$li = li;\n      li.popover;\n      if (listId) {\n        this.items[listId] = li;\n      }\n      return this.$li;\n    };\n    this.getListItmIT = function (listId) {\n      if (this.$li) return this.$li;\n      var li = $("<li>");\n      var d = $("<div></div>");\n      var fired = true;\n      //Handle special case for Save action \n      li.on(VIS.Events.onClick, function (e) {\n        e.stopPropagation();\n        if (fired && that.onAction && that.isEnabled) {\n          if (that.toggle) {\n            that.setPressed(!that.pressed);\n          }\n          fired = false;\n          d.css(\'background-color\', \'red\');\n          setTimeout(function () {\n            d.css(\'background-color\', \'transparent\');\n            that.onAction(that.action);\n            fired = true;\n          }, 10);\n        }\n      });\n      if (this.textOnly) {\n        li.text(this.text);\n      } else if (this.imageOnly) {\n        //this.img = $(\'<img />\').attr({ \'src\': this.imgUrl, \'alt\': this.text, \'title\': this.text });\n        //li.append(d);\n        //d.append(this.img);\n        this.img = $(\'<i class="vis \' + this.imgUrl + \'" title = "\' + this.toolTipText + \'">\');\n        li.append(d);\n        d.append(this.img);\n      } else {\n        if (this.direction == "r") li.append(\'<span>\' + this.text + \'</span> <i class="vis \' + this.imgUrl + \'" title="\' + this.toolTipText + \'" ></i>\');else li.append(\'<i class="vis \' + this.imgUrl + \'" title="\' + this.toolTipText + \'" ></i><span>\' + this.text + \'</span>\');\n        this.img = li.find("i");\n      }\n      this.$li = li;\n      if (listId) {\n        this.items[listId] = li;\n      }\n      return this.$li;\n    };\n    this.disposeComponent = function () {\n      that = null;\n      this.getListItm = null;\n      this.getListItmIT = null;\n    };\n  }\n  ;\n  AppsAction.prototype.setPressed = function (pressed) {\n    if (!this.toggle || this.pressed == pressed) return;\n    this.pressed = pressed;\n    if (this.img) {\n      if (this.toggle) {\n        //this.img.toggleClass(!pressed ? this.imgUrl : this.imgUrlX);\n        if (pressed) {\n          this.img.removeClass(this.imgUrl);\n          this.img.addClass(this.imgUrlX);\n        } else {\n          this.img.removeClass(this.imgUrlX);\n          this.img.addClass(this.imgUrl);\n        }\n      }\n    }\n  };\n  AppsAction.prototype.setTextDirection = function (dir) {\n    this.direction = dir;\n  };\n  AppsAction.prototype.getIsPressed = function () {\n    return this.pressed;\n  };\n  AppsAction.prototype.getAction = function () {\n    return this.action;\n  };\n  AppsAction.prototype.getPath = function () {\n    return VIS.Application.contextUrl + "Areas/VIS/Images/base/";\n  };\n  AppsAction.prototype.getSeprator = function (isSamll, pipe) {\n    var src = this.getPath();\n    if (isSamll) {\n      src += "seprator16.png";\n    } else {\n      src += "seprator24.png";\n    }\n    if (pipe) return "<li>|</li>";\n    return \'<li><img src="\' + src + \'"></li>\';\n  };\n  AppsAction.prototype.setEnabled = function (enable) {\n    this.isEnabled = enable;\n    if (this.$li) {\n      this.$li.css("opacity", enable ? 1 : .6);\n    }\n    if (this.img) {\n      this.img.prop("disabled", !enable).css("opacity", enable ? 1 : .6);\n      //if (this.enableDisable)\n      // this.img.prop("src", enable ? this.imgUrl : this.imgUrlX);\n    }\n  };\n  AppsAction.prototype.highlightNewButton = function (highlight) {\n    if (highlight) {\n      if (this.$li.instructionPopRemoved) return;\n      if (!this.windowContainer) {\n        this.windowContainer = this.$li.closest(\'.vis-ad-w-p\');\n      }\n      if (this.windowContainer.find(\'.vis-window-instruc-overlay-new\').length <= 0) {\n        this.windowContainer.prepend(\'<div class="vis-window-instruc-overlay-new"><div class="vis-window-instruc-overlay-new-inn">\' + \'<p>\' + VIS.Msg.getMsg(\'CreateNewRec\') + \'</p></div></div>\');\n        this.$li.addClass(\'vis-window-instruc-overlay-new-li\');\n      }\n    } else {\n      if (!this.windowContainer) {\n        this.windowContainer = this.$li.closest(\'.vis-ad-w-p\');\n      }\n      this.windowContainer.find(\'.vis-window-instruc-overlay-new\').remove();\n      this.windowContainer.find(\'.vis-window-instruc-overlay-new-inn\').remove();\n      this.$li.removeClass(\'vis-window-instruc-overlay-new-li\');\n      this.$li.instructionPopRemoved = true;\n    }\n  };\n  AppsAction.prototype.show = function () {\n    //this.isEnabled = enable;\n    if (this.$li) {\n      this.$li.show();\n    }\n    if (this.img) {\n      this.img.show();\n      //if (this.enableDisable)\n      // this.img.prop("src", enable ? this.imgUrl : this.imgUrlX);\n    }\n  };\n  AppsAction.prototype.hide = function () {\n    //this.isEnabled = enable;\n    if (this.$li) {\n      this.$li.hide();\n    }\n    if (this.img) {\n      this.img.hide();\n      //if (this.enableDisable)\n      // this.img.prop("src", enable ? this.imgUrl : this.imgUrlX);\n    }\n  };\n\n  /*  Get Item\r\n  * --\r\n  */\n  AppsAction.prototype.getItem = function () {\n    return this.$li;\n  };\n  AppsAction.prototype.getIsEnabled = function () {\n    return this.isEnabled;\n  };\n  AppsAction.prototype.dispose = function (id) {\n    this.action = this.toggle = this.pressed = this.isEnabled = this.text = this.toolTipText = this.imageOnly = null;\n    this.textOnly = this.onAction = this.isSmall = null;\n    if (this.$li) {\n      this.$li.off(VIS.Events.onClick);\n      this.$li.remove();\n      this.$li = null;\n    }\n    if (this.img) {\n      this.img = null;\n    }\n    if (id) {\n      if (id in this.items) {\n        //console.log(id);\n        var val = this.items[id];\n        if (val) {\n          val.off(VIS.Events.onClick);\n          val.remove();\n          val = null;\n        }\n        delete this.items[id];\n      }\n    }\n    this.disposeComponent();\n  };\n  AppsAction.prototype.setIsRo;\n\n  //****************** END ********************//\n\n  //****************************************************//\n  //**            StatusBar                    **//\n  //**************************************************//\n\n  var statusTmp = document.querySelector("#vis-ad-statusbartmp").content;\n  function StatusBar(withInfo) {\n    var clone = document.importNode(statusTmp, true);\n    var $root = $(clone.querySelector(".vis-ad-w-p-s-main"));\n    this.$statusLine = $root.find(".vis-ad-w-p-s-msg").find("span"); // $("<span>");\n    this.$statusDB = $root.find(".vis-ad-w-p-s-statusdb"); // $("<span class=\'vis-statusbar-statusDB\'>").text("0/0");\n    this.$infoLine = $root.find(".vis-ad-w-p-s-infoline"); // $("<span class=\'vis-statusbar-infoLine\'>").text("info");\n\n    var $spanPageResult = $root.find(".vis-ad-w-p-s-result").find("span"); // $("<span class=\'vis-statusbar-pageMsg\'>");\n    var $comboPage = $("<select class=\'vis-statusbar-combo\'>");\n    var $ulPages = $root.find(".vis-ad-w-p-s-plst");\n    this.text = "";\n    this.dse;\n    this.merror;\n    this.mtext;\n    //\n    var showText = VIS.Msg.getMsg("ShowingResult");\n    var ofText = VIS.Msg.getMsg("of");\n    this.onComboChange;\n    function initilizeComponent() {\n      $root = $("<table class=\'vis-statusbar-table\'>");\n      r1Col1 = $("<td style=\'text-align:center\' colspan=\'3\' >");\n      r2Col1 = $("<td style=\'width:auto;white-space:nowrap;\'>");\n      r2Col2 = $("<td  style=\'width:100%;\'>");\n      r2Col3 = $("<td style=\'width:auto;white-space:nowrap;\'>");\n      $ulPages = $("<ul class=\'vis-statusbar-ul\'>");\n    }\n    ;\n\n    //initilizeComponent();\n    //page Numbers\n    //$ulPages.append($("<li>").append(this.$statusDB));\n    // r2Col1.append($spanPageResult).append($seprator);\n    //r2Col2.append($("<div class=\'vis-statusbar-statusLine\'>").append(this.$statusLine));\n    //r2Col3.append($ulPages);\n    // r1Col1.append(this.$infoLine);\n\n    if (!withInfo) {\n      this.$infoLine.hide();\n    }\n\n    /* Previlige function */\n    this.getRoot = function () {\n      return $root;\n    };\n    this.render = function () {\n      // $root.empty();\n      // $root.append($("<tr class=\'vis-height-auto\'>").append(r1Col1)).append($("<tr class=\'vis-height-full\'>").append(r2Col1).append(r2Col2).append(r2Col3));\n    };\n    this.setPageItem = function (item) {\n      $ulPages.append(item);\n    };\n    this.setComboPage = function () {\n      $ulPages.append($("<li>").append($comboPage));\n    };\n    this.setPageLine = function (dse) {\n      if (dse != null) {\n        var cp = dse.getCurrentPage();\n        var tp = dse.getTotalPage();\n        var ps = dse.getPageSize();\n        var tr = dse.getTotalRecords();\n        var s = (cp - 1) * ps;\n        var e = s + ps;\n        if (e > tr) e = tr;\n        if (tr == 0) {\n          s -= 1;\n        }\n        var text = showText + " " + (s + 1) + "-" + e + " " + ofText + " " + dse.getTotalRecords();\n        $spanPageResult.text(text);\n        if (tp != $comboPage[0].options.length) {\n          var output = [];\n          var selIndex = -1;\n          for (var i = 0; i < tp; i++) {\n            output[i] = \'<option>\' + (i + 1) + \'</option>\';\n          }\n          $comboPage.empty();\n          $comboPage.html(output.join(\'\'));\n        }\n        if ($comboPage[0].selectedIndex != cp - 1) {\n          $comboPage[0].selectedIndex = cp - 1;\n        }\n      }\n    };\n    this.setComboCallback = function (callback) {\n      selectionCallback = callback;\n    };\n    var self = this;\n    $comboPage.on("change", function (e) {\n      e.stopPropagation();\n      if (self.onComboChange) {\n        self.onComboChange(this.selectedIndex);\n      }\n    });\n    this.$statusDB.on("click", function () {\n      var title = VIS.Msg.getMsg("Who") + self.text;\n      var r = new VIS.RecordInfo(title, self.dse);\n      r.show();\n    });\n    this.disposeComponent = function () {\n      self = null;\n      $root.remove();\n      r1Col1 = null;\n      r2Col1 = null;\n      $root = null;\n      this.getRoot = null;\n      this.onComboChange = null;\n      $ulPages.remove();\n      $ulPages = null;\n      $spanPageResult = null;\n      this.$statusLine = null;\n      this.$statusDB = null;\n      $seprator = null;\n      this.disposeComponent = null;\n      this.setPageItem = null;\n      this.getRoot = null;\n      this.render = null;\n      this.setPageLine = null;\n      this.$infoLine = null;\n      this.text = null;\n      this.dse = null;\n      this.merror = null;\n      this.mtext = null;\n      $comboPage.empty();\n      $comboPage.remove();\n      $comboPage = null;\n    };\n  }\n  ;\n  StatusBar.prototype.setStatusDB = function (text, dse) {\n    if (text == null || text.length == 0) {\n      this.$statusDB.text("");\n    } else {\n      this.$statusDB.text(text);\n      //if (!statusDB.isVisible())\n      //    statusDB.setVisible(true);\n    }\n\n    //  Save\n    this.text = text;\n    this.dse = dse;\n    this.setPageLine(dse);\n  }; //\tsetStatusDB\n\n  StatusBar.prototype.setStatusLine = function (text, error) {\n    this.merror = error;\n    this.mtext = text;\n    //if (error)\n    //    statusLine.setForeground(red);\n    //else\n    //    statusLine.setForeground(black);\n    this.$statusLine.text(text);\n  }; //\n\n  StatusBar.prototype.setInfo = function (text) {\n    if (!this.$infoLine.is(\':visible\')) {\n      this.$infoLine.show(); //infoLine.setVisible(true);\n    }\n    this.$infoLine.text(text);\n  }; //\tset\n\n  StatusBar.prototype.dispose = function () {\n    this.disposeComponent();\n  };\n\n  //****************************************************//\n  //**            End                    **//\n  //**************************************************//\n\n  VIS.AParentDetail = function (gc, $root) {\n    this.gc = gc;\n    this.$root = $root;\n    this.visible = false;\n    this.expaned = false;\n    this.curGC = null;\n    var fields = gc.getMTab().getTableModel().getFields(); //all fields\n    var len = fields.length;\n    var $rPart,\n      $lPart,\n      $main = null;\n    var $divlbMain, $divlbNav, $lPartContent;\n    function initComponent() {\n      $main = $("<div class=\'vis-apanel-bar\'>");\n      $rPart = $("<div class=\'vis-apanel-bar-fixpart\' style=\'background-color:white\'>");\n      $lPart = $("<div class=\'vis-apanel-bar-varpart vis-apanel-bar-pdetail\'>");\n      $divlbMain = $(\'<div class="vis-apanel-lb-main">\');\n      $divlbNav = $("<div class=\'vis-apanel-lb-oflow\' style=\'border-left: 1px solid white;\'>").hide();\n      $divlbNav.html("<a data-dir=\'u\' href=\'javascript:void(0)\'><img style=\'margin-left:10px\' data-dir=\'u\' src=\'" + VIS.Application.contextUrl + "Areas/VIS/Images/base/arrow-top.png\' ></a><a data-dir=\'d\' href=\'javascript:void(0)\' ><img style=\'margin-left:10px\' data-dir=\'d\' src=\'" + VIS.Application.contextUrl + "Areas/VIS/Images/base/arrow-bottom.png\' /></a>");\n      $lPart.append($divlbMain).append($divlbNav);\n      $lPartContent = $("<div style=\'width:192px;overflow-y:auto;padding-left: 4px;padding-right:3px;\'>");\n      $divlbMain.append($lPartContent);\n      $main.append($lPart).append($rPart);\n      $root.append($main);\n      $main.hide();\n    }\n    initComponent();\n    var self = this;\n    $rPart.on(VIS.Events.onTouchStartOrClick, function (e) {\n      if (self.$root.width() > 20) {\n        self.hide();\n      } else {\n        self.show();\n      }\n      e.stopPropagation();\n    });\n    $divlbNav.on("click", function (e) {\n      e.stopPropagation();\n      var dir = $(e.target).data(\'dir\');\n      if (!dir) return;\n      var dHeight = $divlbMain.height();\n      var ulheight = $lPartContent.height();\n      var cPos = $divlbMain.scrollTop();\n      var offSet = Math.ceil(dHeight / 2);\n      var s = 0;\n      if (dir == \'d\') {\n        if (cPos + offSet >= ulheight - offSet) return;\n        var ms = ulheight - dHeight;\n        s = cPos + offSet;\n        $divlbMain.animate({\n          scrollTop: s > ms ? ms : s\n        }, 1000, "easeOutBounce");\n      } else if (dir == \'u\') {\n        if (cPos == 0) return;\n        s = cPos - offSet;\n        $divlbMain.animate({\n          scrollTop: s < 0 ? 0 : s\n        }, 1000, "easeOutBounce");\n        //$divTabControl.scrollLeft(cPos - offSet);\n      }\n    });\n    function refresh() {\n      var field = null;\n      var html = "";\n      var colValue = "";\n      for (var i = 0; i < len; i++) {\n        field = fields[i];\n        colValue = null;\n        colValue = field.getValue();\n        if (!colValue || colValue == "" || !field.getIsDisplayed()) continue;\n        html += "<h3>" + w2utils.encodeTags(field.getHeader()) + "</h3>";\n        var displayType = field.getDisplayType();\n        if (field.lookup) {\n          colValue = field.lookup.getDisplay(colValue, true);\n        }\n\n        //\tDate\n        else if (VIS.DisplayType.IsDate(displayType)) {\n          colValue = new Date(colValue).toLocaleString();\n        }\n        //\tRowID or Key (and Selection)\n\n        //\tYesNo\n        else if (displayType == VIS.DisplayType.YesNo) {\n          var str = colValue.toString();\n          if (field.getIsEncryptedColumn()) str = VIS.secureEngine.decrypt(str);\n          colValue = str.equals("Y"); //\tBoolean\n        }\n        //\tLOB \n        else colValue = colValue.toString(); //string\n        //\tEncrypted\n        if (field.getIsEncryptedColumn() && displayType != VIS.DisplayType.YesNo) colValue = VIS.secureEngine.decrypt(colValue);\n        html += "<h5>" + w2utils.encodeTags(colValue) + "</h5>";\n      }\n      $lPartContent.empty();\n      $lPartContent.html("<h1>" + gc.getMTab().getName() + "</h1>" + html);\n      self.setSize($main.height());\n    }\n    ;\n    this.show = function () {\n      if (self.expaned) {\n        refresh();\n        return;\n      }\n      this.expaned = true;\n      if (self.visible) {\n        $main.show();\n      }\n      //$main.height($root.height());\n      $root.animate({\n        //"left": $root.width() - 250 + "px",\n        "width": "200px"\n      }, 300, "swing");\n      $lPart.show().animate({\n        "width": "192px"\n      }, 300, "swing", showComplete);\n    };\n    this.hide = function () {\n      if (!this.expaned && this.visible)\n        //hiddden\n        return;\n      this.expaned = false;\n      $root.animate({\n        "width": self.visible ? "8px" : "0px"\n      }, 300, "swing");\n      if (!self.visible) {\n        $main.hide();\n      }\n      $lPart.hide().animate({\n        "width": "0px"\n      }, 300, "swing", hideComplete);\n    };\n    function hideComplete() {\n      if (self.curGC) {\n        self.curGC.multiRowResize();\n        self.curGC.aPanel.setWidth(-1, true);\n        self.curGC.aPanel.setTabNavigation();\n      }\n    }\n    ;\n    function showComplete() {\n      refresh();\n      if (self.curGC) {\n        self.curGC.multiRowResize();\n        self.curGC.aPanel.setWidth(-1, true);\n        self.curGC.aPanel.setTabNavigation();\n      }\n    }\n    ;\n    this.setSize = function (height) {\n      $main.height(height);\n      $divlbMain.height(height); //left bar overflow\n\n      if ($lPartContent.height() > $divlbMain.height()) {\n        if (!VIS.Application.isMobile) {\n          $divlbMain.height(height - 40);\n          $divlbNav.show();\n        }\n      }\n    };\n    this.disposeComponenet = function () {\n      this.gc = null;\n      this.$root = null;\n      this.visible = null;\n      this.expaned = null;\n      $divlbNav.off("click");\n      $rPart.off(VIS.Events.onTouchStartOrClick);\n      $rPart = $lPart = null;\n      $main.remove();\n      $main = null;\n      self = null;\n      this.curGC = null;\n      fields.length = 0;\n      fields = null;\n      this.show = null;\n      this.hide = null;\n    };\n  };\n  VIS.AParentDetail.prototype.evaluate = function (curGc) {\n    this.curGC = null;\n    this.curGC = curGc;\n    if (this.gc.getId() === curGc.getId()) {\n      this.visible = false;\n      this.hide();\n    } else {\n      this.curGC.isParentDetailVisible = true;\n      if (this.visible)\n        //already visible\n        return;\n      this.visible = true;\n      this.show();\n    }\n  };\n  VIS.AParentDetail.prototype.dispose = function () {\n    this.disposeComponenet();\n  };\n\n  //****************************************************//\n  //**             VSortTab                          **//\n  //**************************************************//\n  VIS.VSortTab = function (windowNo, AD_Table_ID, AD_ColumnSortOrder_ID, AD_ColumnSortYesNo_ID, isReadOnly, id) {\n    this.winNumber = windowNo;\n    this.tableName = null;\n    this.columnSortName = null;\n    this.columnYesNoName = null;\n    this.keyColumnName = null;\n    this.identifierColumnName = null;\n    this.identifierTranslated = false;\n    this.parentColumnName = null;\n    this.AD_Table_ID = AD_Table_ID;\n    this.AD_ColumnSortOrder_ID = AD_ColumnSortOrder_ID;\n    this.AD_ColumnSortYesNo_ID = AD_ColumnSortYesNo_ID;\n    this.aPanel = null;\n    this.log = VIS.Logging.VLogger.getVLogger("VSortTab");\n    var $tblRoot, $tabControl;\n    var $lblNo, $lblYes, $lstNo, $lstYes;\n    var $btnRight, $btnLeft, $btnUp, $btnDown;\n    var path = VIS.Application.contextUrl + "Areas/VIS/Images/base/";\n    var oldValues = null;\n    function initializeComponent() {\n      $lblNo = $("<span>").text(VIS.Msg.getMsg("N"));\n      $lblYes = $("<span>").text(VIS.Msg.getMsg("Y"));\n      //$lstNo = $("<select multiple " + (isReadOnly ? " disabled" : "") + ">");\n      //$lstYes = $("<select multiple" + (isReadOnly ? " disabled" : "") + " >");\n\n      $lstNo = $("<ul class=\'vis-sortTab-select\' " + (isReadOnly ? " disabled" : "") + ">");\n      $lstYes = $("<ul class=\'vis-sortTab-select\' " + (isReadOnly ? " disabled" : "") + " >");\n\n      //$noDiv = $("<div class=\'vis-apanel-sorttab-div\' " + (isReadOnly ? " disabled" : "") + ">");\n      //$yesDiv = $("<div class=\'vis-apanel-sorttab-div\' " + (isReadOnly ? " disabled" : "") + " >");\n\n      $btnLeft = $("<button" + (isReadOnly ? " disabled" : "") + " ><i class=\'fa fa-arrow-left\'></i></button");\n      $btnRight = $("<button" + (isReadOnly ? " disabled" : "") + " ><i class=\'fa fa-arrow-right\'></i></button");\n      $btnUp = $("<button" + (isReadOnly ? " disabled" : "") + " ><i class=\'fa fa-arrow-up\'></i></button");\n      $btnDown = $("<button" + (isReadOnly ? " disabled" : "") + " ><i class=\'fa fa-arrow-down\'></i></button");\n      $tblRoot = $("<table class=\'vis-apanel-sorttab\' style=\'display:none;\'>");\n      //$tabControl = $("<ul class=\'vis-gc-tabs-ul\'>");\n\n      //$tblRoot.append($("<tr>").append($("<td>").append($tabControl)));\n\n      var $td = $("<td class=\'vis-apanel-sorttab-td\'>");\n      var $divLeftContainer = $(\'<div class="vis-apanel-sorttab-cont">\');\n      $divLeftContainer.append($lstNo).append($("<div class=\'vis-apanel-sorttab-td-right\'>").append($btnRight).append($btnLeft));\n      $td.append($("<div class=\'vis-apanel-sorttab-td-inner\'>").append($lblNo).append($divLeftContainer));\n      var $divRightContainer = $(\'<div class="vis-apanel-sorttab-cont">\');\n      $divRightContainer.append($lstYes).append($("<div class=\'vis-apanel-sorttab-td-right\'>").append($btnUp).append($btnDown));\n      $td.append($("<div class=\'vis-apanel-sorttab-td-inner\'>").append($lblYes).append($divRightContainer));\n      $tblRoot.append($("<tr>").append($td));\n    }\n    initializeComponent();\n    this.dynInit(AD_Table_ID, AD_ColumnSortOrder_ID, AD_ColumnSortYesNo_ID); //Dynamic Initilize\n\n    this.getRoot = function () {\n      return $tblRoot;\n    };\n    this.getId = function () {\n      return id;\n    };\n    this.getlstModel = function (isYes) {\n      if (isYes) return $lstYes.find("li"); // [0].options;\n      return $lstNo.find("li"); // [0].options;\n    };\n    this.setLabelName = function (no, yes) {\n      $lblNo.text(no);\n      $lblYes.text(yes);\n    };\n    this.setListOptions = function (no, yes) {\n      $lstNo.empty();\n      $lstNo.append(no);\n      $lstYes.empty();\n      $lstYes.append(yes);\n    };\n    this.setOldValues = function (list) {\n      oldValues = list;\n    };\n    this.getOldValues = function () {\n      return oldValues;\n    };\n    var self = this;\n    $btnLeft.on(VIS.Events.onTouchStartOrClick, function (e) {\n      self.btn_Click("Left");\n      e.stopPropagation();\n    });\n    $btnRight.on(VIS.Events.onTouchStartOrClick, function (e) {\n      self.btn_Click("Right");\n      e.stopPropagation();\n    });\n    $btnUp.on(VIS.Events.onTouchStartOrClick, function (e) {\n      self.btn_Click("Up");\n      e.stopPropagation();\n    });\n    $btnDown.on(VIS.Events.onTouchStartOrClick, function (e) {\n      self.btn_Click("Down");\n      e.stopPropagation();\n    });\n    $lstNo.on(VIS.Events.onClick, "LI", function () {\n      $(this).toggleClass("vis-apanel-sorttab-selected");\n    });\n    $lstYes.on(VIS.Events.onClick, "LI", function () {\n      $(this).toggleClass("vis-apanel-sorttab-selected");\n    });\n    this.btn_Click = function (action) {\n      var change = false;\n      var selObjects = null;\n      if (action == "Right") {\n        selObjects = $lstNo.find("li.vis-apanel-sorttab-selected");\n        $lstYes.children().removeClass(\'vis-apanel-sorttab-selected\');\n        //$lstYes[0].selectedIndex = -1;\n        for (var i = 0; i < selObjects.length; i++) {\n          selObjects[i].remove();\n          $(selObjects[i]).toggleClass("vis-apanel-sorttab-selected");\n          //$lstYes[0].add(selObjects[i]);\n          $lstYes.append(selObjects[i]);\n          change = true;\n        }\n        selObjects.length = 0;\n        selObjects = 0;\n      } else if (action == "Left") {\n        selObjects = $lstYes.find("li.vis-apanel-sorttab-selected");\n        //$lstNo[0].selectedIndex = -1;\n        $lstNo.children().removeClass(\'vis-apanel-sorttab-selected\');\n        for (var j = 0; j < selObjects.length; j++) {\n          selObjects[j].remove();\n          $(selObjects[j]).toggleClass("vis-apanel-sorttab-selected");\n          $lstNo.append(selObjects[j]);\n          change = true;\n        }\n        selObjects.length = 0;\n        selObjects = 0;\n      } else {\n        var selObjects = $lstYes.find(\'li.vis-apanel-sorttab-selected\');\n        if (selObjects == null) {\n          return;\n        }\n        var length = selObjects.length;\n        if (length == 0) return;\n        var selObject = $(selObjects[0]);\n        if (selObject == null) return;\n        $lstYes.children().removeClass(\'vis-apanel-sorttab-selected\');\n        selObject.addClass(\'vis-apanel-sorttab-selected\');\n        //IList indices = ;\n        var index = selObject.index(); // $lstYes[0].selectedIndex;\n        //if (index == -1)\n        //    return;\n        //selObject = $lstYes[0].options[index];\n        //if (selObject == null)\n        //  return;\n\n        if (action == "Up") {\n          if (index == 0) return;\n          //Object newObject = lstYes.Items[index - 1];\n          //lstYes.Items.Insert( index,newObject);\n          //$lstYes[0].remove(index);\n          selObject.remove();\n          selObject.insertBefore($lstYes.find("li").eq(index - 1));\n          //$lstYes[0].add(selObject, index - 1);\n          // $lstYes[0].selectedIndex = index - 1;\n          change = true;\n        } else if (action == "Down") {\n          if (index >= $lstYes.children().length - 1) return;\n          selObject.remove();\n          //$lstYes[0].remove(index);\n          //$lstYes[0].add(selObject, index + 1);\n          selObject.insertAfter($lstYes.find("li").eq(index));\n          // $lstYes[0].selectedIndex = index + 1;\n          change = true;\n        }\n      }\n      if (change) {\n        this.notifyFireChanged(true);\n        //this.aPanel.aSave.setEnabled(true);\n      }\n    };\n    this.disposeComponent = function () {\n      $btnLeft.off(VIS.Events.onTouchStartOrClick);\n      $btnRight.off(VIS.Events.onTouchStartOrClick);\n      $btnUp.off(VIS.Events.onTouchStartOrClick);\n      $btnDown.off(VIS.Events.onTouchStartOrClick);\n      this.seletedTab = null;\n      $tblRoot.remove();\n      $tblRoot = null;\n      self = null;\n      this.winNumber = null;\n      this.tableName = null;\n      this.columnSortName = null;\n      this.columnYesNoName = null;\n      this.keyColumnName = null;\n      this.identifierColumnName = null;\n      this.identifierTranslated = false;\n      this.parentColumnName = null;\n      this.aPanel = null;\n      this.log = null;\n      $lstNo = null;\n      $lstYes = null;\n      $btnUp = $btnDown = $btnLeft = $btnRight = null;\n\n      //functions\n      this.btn_Click = this.setListOptions = this.getlstModel = this.setLabelName = this.setListOptions = this.getRoot = this.getId = null;\n      console.log("dispose vSortTab");\n    };\n  };\n  VIS.VSortTab.prototype.notifyFireChanged = function (enable) {\n    if (this.aContentPane) this.aContentPane.aSave.setEnabled(enable);else if (this.aPanel) this.aPanel.aSave.setEnabled(enable);\n  };\n  VIS.VSortTab.prototype.dynInit = function (AD_Table_ID, AD_ColumnSortOrder_ID, AD_ColumnSortYesNo_ID) {\n    var trl = !VIS.Env.isBaseLanguage(VIS.Env.getCtx(), "");\n    var sql = "VIS_122";\n    var param = [];\n    param[0] = new VIS.DB.SqlParam("@AD_Table_ID", AD_Table_ID);\n    param[1] = new VIS.DB.SqlParam("@AD_ColumnSortOrder_ID", AD_ColumnSortOrder_ID);\n    param[2] = new VIS.DB.SqlParam("@AD_ColumnSortYesNo_ID", AD_ColumnSortYesNo_ID);\n    if (trl) {\n      sql = "VIS_123";\n      param = [];\n      param[0] = new VIS.DB.SqlParam("@AD_Table_ID", AD_Table_ID);\n      param[1] = new VIS.DB.SqlParam("@AD_ColumnSortOrder_ID", AD_ColumnSortOrder_ID);\n      param[2] = new VIS.DB.SqlParam("@AD_ColumnSortYesNo_ID", AD_ColumnSortYesNo_ID);\n      param[3] = new VIS.DB.SqlParam("@AD_Language", VIS.Env.getAD_Language(VIS.Env.getCtx()));\n    }\n    var self = this;\n    var tableName = "";\n    executeReader(sql, param, function (dr) {\n      if (dr != null) {\n        var lblYesName = "";\n        while (dr.read()) {\n          self.tableName = dr.getString(0);\n          //\tSort Column\n          if (AD_ColumnSortOrder_ID == dr.get(1)) {\n            //log.Fine("Sort=" + dr.GetString(0) + "." + dr.GetString(2));\n            self.columnSortName = dr.getString(2);\n            lblYesName = dr.getString(3);\n          }\n          //\tOptional YesNo\n          else if (AD_ColumnSortYesNo_ID == dr.get(1)) {\n            //log.Fine("YesNo=" + dr.GetString(0) + "." + dr.GetString(2));\n            self.columnYesNoName = dr.getString(2);\n          }\n          //\tParent2\n          else if (dr.getString(4) == "Y") {\n            //log.Fine("Parent=" + dr.GetString(0) + "." + dr.GetString(2));\n            self.parentColumnName = dr.getString(2);\n          }\n          //\tKeyColumn\n          else if (dr.getString(5) == "Y") {\n            //log.Fine("Key=" + dr.GetString(0) + "." + dr.GetString(2));\n            self.keyColumnName = dr.getString(2);\n          }\n          //\tIdentifier\n          else if (dr.getString(6) == "Y") {\n            //log.Fine("Identifier=" + dr.GetString(0) + "." + dr.GetString(2));\n            self.identifierColumnName = dr.getString(2);\n            if (trl) self.identifierTranslated = "Y" == dr.getString(7);\n          } else {\n            //log.Fine("??NotUsed??=" + dr.GetString(0) + "." + dr.GetString(2));\n          }\n        }\n        dr.close();\n        self.setLabelName(VIS.Msg.getMsg("Available"), lblYesName);\n      }\n      self = null;\n    });\n  };\n  VIS.VSortTab.prototype.setVisible = function (visible) {\n    if (visible) {\n      this.getRoot().show();\n    } else {\n      this.getRoot().hide();\n    }\n  };\n  VIS.VSortTab.prototype.loadData = function () {\n    //lstNo.Items.Clear();\n    //lstYes.Items.Clear();\n\n    var ID = VIS.Env.getCtx().getWindowContext(this.winNumber, this.parentColumnName);\n    var data = VIS.dataContext.getJSONData(VIS.Application.contextUrl + "Form/LoadSortData", {\n      "AD_Table_ID": this.AD_Table_ID,\n      "AD_ColumnSortOrder_ID": this.AD_ColumnSortOrder_ID,\n      "AD_ColumnSortYesNo_ID": this.AD_ColumnSortYesNo_ID,\n      "AD_Language": VIS.Env.getAD_Language(VIS.Env.getCtx()),\n      "ID": ID,\n      "isTrl": !VIS.Env.isBaseLanguage(VIS.Env.getCtx(), "")\n    }, null); // spelling corrected by vinay bhatt on 18 oct 2018\n\n    var dr = new VIS.DB.DataReader().toJson(JSON.stringify(data)); //   executeDReader(sql, [new VIS.DB.SqlParam("@ID", ID)]);\n    var yesHtml = "";\n    var noHtml = "";\n    var listOldValues = [];\n    try {\n      while (dr.read()) {\n        var key = dr.get(0);\n        var name = dr.getString(1);\n        var seq = dr.get(2);\n        var isYes = seq != 0;\n        if (this.columnYesNoName != null) isYes = dr.getString(3) == "Y";\n        var pp = "<li data-value=\'" + key + "\'>" + name + "</li>";\n        if (isYes) {\n          yesHtml += pp;\n          listOldValues.push({\n            "key": key,\n            "value": seq\n          });\n        } else {\n          noHtml += pp;\n          listOldValues.push({\n            "key": key,\n            "value": seq\n          });\n        }\n      }\n      dr.close();\n      dr.dispose();\n      this.setOldValues(listOldValues);\n      this.setListOptions(noHtml, yesHtml);\n    } catch (e) {\n      // if (!dr.IsClosed)\n      this.log.log(VIS.Logging.Level.SEVERE, sql, e);\n    }\n    this.notifyFireChanged(false);\n    //this.aPanel.aSave.setEnabled(false);\n  };\n  VIS.VSortTab.prototype.getIsEnabled = function () {\n    var enable = false;\n    if (this.aContentPane) enable = this.aContentPane.aSave.getIsEnabled();else if (this.aPanel) enable = this.aPanel.aSave.getIsEnabled();\n    return enable;\n  };\n  VIS.VSortTab.prototype.saveData = function () {\n    if (!this.getIsEnabled()) return;\n    var sql = null;\n    //\tnoList - Set SortColumn to null and optional YesNo Column to \'N\'\n    var noModel = this.getlstModel();\n    var self = this;\n    //var queries = [];\n    var i = 0;\n    var pp;\n    //\tnoList - Set SortColumn to null and optional YesNo Column to \'N\'\n\n    //for (i = 0; i < noModel.length; i++) {\n\n    var tableName = this.tableName;\n    var columnSortName = this.columnSortName;\n    var columnYesNoName = this.columnYesNoName;\n    var keyColumnName = this.keyColumnName;\n    var values = [];\n    var noYes = [];\n    noModel.each(function (i, li) {\n      values.push($(li).data("value"));\n      noYes.push("N");\n      //var value = $(li).data("value");\n      //sql = "";\n      //sql += "UPDATE " + tableName\n      //    + " SET " + columnSortName + "=0";\n      //if (columnYesNoName != null)\n      //    sql += "," + columnYesNoName + "=\'N\'";\n\n      //sql += ", Updated=SYS_EXTRACT_UTC(SYSTIMESTAMP)";\n\n      //sql += " WHERE " + keyColumnName + "=" + value;\n\n      //queries.push(sql);\n    });\n    var yesModel = this.getlstModel(true);\n    // for (i = 0; i < yesModel.length; i++) {\n    yesModel.each(function (i, li) {\n      values.push($(li).data("value"));\n      noYes.push("Y");\n\n      //var value = $(li).data("value");\n      //sql = "";\n      //sql += "UPDATE " + tableName\n      //    + " SET " + columnSortName + "=" + (i + 1) + "0";\t//\t10 steps\n      //if (columnYesNoName != null)\n      //    sql += "," + columnYesNoName + "=\'Y\'";\n\n      //sql += ", Updated=SYS_EXTRACT_UTC(SYSTIMESTAMP)";\n\n      //sql += " WHERE " + keyColumnName + "=" + value;\n\n      //queries.push(sql);\n    });\n    $.ajax({\n      url: VIS.Application.contextUrl + \'Form/SetFieldsSorting\',\n      async: false,\n      type: \'POST\',\n      data: {\n        values: JSON.stringify(values),\n        noYes: JSON.stringify(noYes),\n        tableName: tableName,\n        keyColumnName: keyColumnName,\n        columnSortName: columnSortName,\n        columnYesNoName: columnYesNoName,\n        oldValues: JSON.stringify(self.getOldValues())\n      },\n      success: function (data) {},\n      error: function (er) {}\n    });\n\n    //var ret = executeQueries(queries, null);\n  };\n  VIS.VSortTab.prototype.unRegisterAPanel = function () {\n    this.saveData();\n    this.aPanel = null;\n  };\n  VIS.VSortTab.prototype.registerAPanel = function (pnl) {\n    this.aPanel = pnl;\n  };\n\n  /**\r\n   * add sub tab view datastatus listner \r\n   * --contentpane\r\n   * @param {any} lsnr\r\n   */\n  VIS.VSortTab.prototype.addSubTabDataStatusListner = function (lstner) {\n    this.aContentPane = lstner;\n  };\n\n  /**\r\n   * Remove subtab view data status listnerlistner\r\n   * */\n  VIS.VSortTab.prototype.removeSubTabDataStatusListner = function () {\n    this.aContentPane = null;\n  };\n  VIS.VSortTab.prototype.sizeChanged = function (height, width) {\n    this.getRoot().height(height);\n  };\n  VIS.VSortTab.prototype.dispose = function () {\n    this.disposeComponent();\n  };\n\n  //********************** END *********************//\n\n  /**\r\n   *\tRecord Information \r\n   * - show record id and logged changed values\r\n   */\n\n  VIS.RecordInfo = function (_title, _dse) {\n    /** The Data\t\t*/\n    var m_data = null;\n    var title = _title;\n    /**\tLogger\t\t\t*/\n    var log = VIS.Logging.VLogger.getVLogger("VIS.RecordInfo");\n\n    /** Info\t\t\t*/\n    var info = "";\n    var $root = $("<div style=\'min-width:550px;max-width:600px\'>");\n    var ch = null;\n\n    //  data Information\n\n    var dataIn = {\n      "CreatedBy": _dse.CreatedBy,\n      "Created": _dse.Created,\n      "Updated": _dse.Updated,\n      "UpdatedBy": _dse.UpdatedBy,\n      "Info": _dse.Info,\n      "AD_Table_ID": _dse.AD_Table_ID,\n      "Record_ID": _dse.Record_ID\n    };\n    VIS.dataContext.getJSONData(VIS.Application.contextUrl + "JsonData/GetRecordInfo", {\n      dse: dataIn\n    }, function (data) {\n      $root.html("<span>" + data.Info + "</span>");\n      if (data.ShowGrid) {\n        var tbl = $("<table class=\'vis-advancedSearchTable\'>");\n        var tRoot = $("<div class=\'vis-advancedSearchTableWrap vis-table-responsive\' style=\'max-height:200px;overflow-y:auto\'>").append(tbl);\n        $root.append(tRoot);\n        var html = "";\n        var htm = "",\n          obj = null;\n        for (var i = 0, j = data.Rows.length; i < j; i++) {\n          if (i == 0) {\n            html += \'<thead><tr class="vis-advancedSearchTableHead">\';\n            for (var k = 0; k < data.Headers.length; k++) {\n              html += \'<th>\' + data.Headers[k] + \'</th>\';\n            }\n            html += \'</tr></thead><tbody>\';\n          }\n          htm = \'<tr class="vis-advancedSearchTableRow">\';\n          obj = data.Rows[i];\n          htm += \'<td>\' + obj["AD_Column_ID"] + \'</td><td>\' + obj["NewValue"] + \'</td>\' + \'<td>\' + obj["OldValue"] + \'</td><td>\' + obj["UpdatedBy"] + \'</td><td>\' + Globalize.format(new Date(obj["Updated"]), \'f\') + \'</td>\';\n          htm += \'</tr>\';\n          html += htm;\n        }\n        html += \'</tbody>\';\n        tbl.html(html);\n      }\n    });\n    function dispose() {\n      m_data = null;\n      log = null;\n      $root.remove();\n      $root = null;\n    }\n    ;\n    this.show = function () {\n      ch = new VIS.ChildDialog();\n      ch.setTitle(title);\n      ch.setContent($root);\n      ch.setPosition({\n        my: "center bottom-3"\n      });\n      ch.close = function () {\n        dispose();\n      };\n      ch.show();\n    };\n  };\n\n  //Assignment Gobal Namespace\n  VIS.AWindow = AWindow;\n  VIS.AppsAction = AppsAction;\n  VIS.StatusBar = StatusBar;\n})(VIS, jQuery);\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/F20/wframe.js?')},"./Areas/VIS/Scripts/src/VIS_v2.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _F20_aheaderpanel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../F20/aheaderpanel.js */ "./Areas/VIS/Scripts/F20/aheaderpanel.js");\n/* harmony import */ var _F20_aheaderpanel_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_F20_aheaderpanel_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _F20_atabpanel_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../F20/atabpanel.js */ "./Areas/VIS/Scripts/F20/atabpanel.js");\n/* harmony import */ var _F20_atabpanel_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_F20_atabpanel_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _F20_wframe_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../F20/wframe.js */ "./Areas/VIS/Scripts/F20/wframe.js");\n/* harmony import */ var _F20_wframe_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_F20_wframe_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _F20_atabbedpane_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../F20/atabbedpane.js */ "./Areas/VIS/Scripts/F20/atabbedpane.js");\n/* harmony import */ var _F20_atabbedpane_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_F20_atabbedpane_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _F20_veditview_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../F20/veditview.js */ "./Areas/VIS/Scripts/F20/veditview.js");\n/* harmony import */ var _F20_veditview_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_F20_veditview_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _F20_vcardview_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../F20/vcardview.js */ "./Areas/VIS/Scripts/F20/vcardview.js");\n/* harmony import */ var _F20_vcardview_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_F20_vcardview_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _F20_vgridview_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../F20/vgridview.js */ "./Areas/VIS/Scripts/F20/vgridview.js");\n/* harmony import */ var _F20_vgridview_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_F20_vgridview_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _F20_vmapview_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../F20/vmapview.js */ "./Areas/VIS/Scripts/F20/vmapview.js");\n/* harmony import */ var _F20_vmapview_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_F20_vmapview_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _F20_aviewcontroller_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../F20/aviewcontroller.js */ "./Areas/VIS/Scripts/F20/aviewcontroller.js");\n/* harmony import */ var _F20_aviewcontroller_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_F20_aviewcontroller_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _F20_apanel_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../F20/apanel.js */ "./Areas/VIS/Scripts/F20/apanel.js");\n/* harmony import */ var _F20_apanel_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_F20_apanel_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _F20_acontentpane_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../F20/acontentpane.js */ "./Areas/VIS/Scripts/F20/acontentpane.js");\n/* harmony import */ var _F20_acontentpane_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_F20_acontentpane_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _F20_afilterpanel_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../F20/afilterpanel.js */ "./Areas/VIS/Scripts/F20/afilterpanel.js");\n/* harmony import */ var _F20_afilterpanel_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_F20_afilterpanel_js__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _F20_themecnfgtr_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../F20/themecnfgtr.js */ "./Areas/VIS/Scripts/F20/themecnfgtr.js");\n/* harmony import */ var _F20_themecnfgtr_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_F20_themecnfgtr_js__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _F20_atabdialog_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../F20/atabdialog.js */ "./Areas/VIS/Scripts/F20/atabdialog.js");\n/* harmony import */ var _F20_atabdialog_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_F20_atabdialog_js__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _F20_vlandingpage_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../F20/vlandingpage.js */ "./Areas/VIS/Scripts/F20/vlandingpage.js");\n/* harmony import */ var _F20_vlandingpage_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_F20_vlandingpage_js__WEBPACK_IMPORTED_MODULE_14__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://VIENNA_Advantage_Framework/./Areas/VIS/Scripts/src/VIS_v2.js?')}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(n,e)=>{for(var t in e)__webpack_require__.o(e,t)&&!__webpack_require__.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},__webpack_require__.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./Areas/VIS/Scripts/src/VIS_v2.js")})();